"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = patchDialogServiceConnectorInline;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _pDeferEs = _interopRequireDefault(require("p-defer-es5"));

// Patching a function to add pre-processing of arguments and post-processing of result.
function patchFunction(fn, pre, post) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args = pre ? pre.apply(void 0, (0, _toConsumableArray2.default)(args)) : args;
    var result = fn.apply(void 0, (0, _toConsumableArray2.default)(args));
    return post ? post(result) : result;
  };
}

function patchDialogServiceConnectorInline(dialogServiceConnector) {
  // This function will patch DialogServiceConnector by modifying the object.
  // The patches are intended to fill-in features to make DialogServiceConnector object works like the full-fledged Recognizer object.
  var lastRecognitionDeferred;
  dialogServiceConnector.listenOnceAsync = patchFunction(dialogServiceConnector.listenOnceAsync.bind(dialogServiceConnector), function (resolve, reject) {
    lastRecognitionDeferred = (0, _pDeferEs.default)();

    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    return [patchFunction(resolve, null, function (result) {
      lastRecognitionDeferred.resolve(result);
      return result;
    }), patchFunction(reject, null, function (error) {
      lastRecognitionDeferred.reject(error);
      return error;
    })].concat(args);
  }); // TODO: startContinuousRecognitionAsync is not working yet, use listenOnceAsync instead.

  dialogServiceConnector.startContinuousRecognitionAsync = function (resolve, reject) {
    dialogServiceConnector.listenOnceAsync(function () {// We will resolve the Promise in a setTimeout.
    }, function (err) {
      resolve = null;
      reject && reject(err);
    });
    setTimeout(function () {
      reject = null;
      resolve && resolve();
    }, 0);
  }; // TODO: stopContinuousRecognitionAsync is not working yet.
  //       We will leave out the implementation as falsy, Web Chat will disable the microphone button after start dictate.
  //       This will prevent user from aborting speech recognition.
  // dialogServiceConnector.stopContinuousRecognitionAsync = resolve => {
  // };


  return dialogServiceConnector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUuanMiXSwibmFtZXMiOlsicGF0Y2hGdW5jdGlvbiIsImZuIiwicHJlIiwicG9zdCIsImFyZ3MiLCJyZXN1bHQiLCJwYXRjaERpYWxvZ1NlcnZpY2VDb25uZWN0b3JJbmxpbmUiLCJkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yIiwibGFzdFJlY29nbml0aW9uRGVmZXJyZWQiLCJsaXN0ZW5PbmNlQXN5bmMiLCJiaW5kIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yIiwic3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyIsImVyciIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQSxTQUFTQSxhQUFULENBQXVCQyxFQUF2QixFQUEyQkMsR0FBM0IsRUFBZ0NDLElBQWhDLEVBQXNDO0FBQ3BDLFNBQU8sWUFBYTtBQUFBLHNDQUFUQyxJQUFTO0FBQVRBLE1BQUFBLElBQVM7QUFBQTs7QUFDbEJBLElBQUFBLElBQUksR0FBR0YsR0FBRyxHQUFHQSxHQUFHLE1BQUgsMENBQU9FLElBQVAsRUFBSCxHQUFrQkEsSUFBNUI7QUFFQSxRQUFNQyxNQUFNLEdBQUdKLEVBQUUsTUFBRiwwQ0FBTUcsSUFBTixFQUFmO0FBRUEsV0FBT0QsSUFBSSxHQUFHQSxJQUFJLENBQUNFLE1BQUQsQ0FBUCxHQUFrQkEsTUFBN0I7QUFDRCxHQU5EO0FBT0Q7O0FBRWMsU0FBU0MsaUNBQVQsQ0FBMkNDLHNCQUEzQyxFQUFtRTtBQUNoRjtBQUNBO0FBRUEsTUFBSUMsdUJBQUo7QUFFQUQsRUFBQUEsc0JBQXNCLENBQUNFLGVBQXZCLEdBQXlDVCxhQUFhLENBQ3BETyxzQkFBc0IsQ0FBQ0UsZUFBdkIsQ0FBdUNDLElBQXZDLENBQTRDSCxzQkFBNUMsQ0FEb0QsRUFFcEQsVUFBQ0ksT0FBRCxFQUFVQyxNQUFWLEVBQThCO0FBQzVCSixJQUFBQSx1QkFBdUIsR0FBRyx3QkFBMUI7O0FBRDRCLHVDQUFUSixJQUFTO0FBQVRBLE1BQUFBLElBQVM7QUFBQTs7QUFHNUIsWUFDRUosYUFBYSxDQUFDVyxPQUFELEVBQVUsSUFBVixFQUFnQixVQUFBTixNQUFNLEVBQUk7QUFDckNHLE1BQUFBLHVCQUF1QixDQUFDRyxPQUF4QixDQUFnQ04sTUFBaEM7QUFFQSxhQUFPQSxNQUFQO0FBQ0QsS0FKWSxDQURmLEVBTUVMLGFBQWEsQ0FBQ1ksTUFBRCxFQUFTLElBQVQsRUFBZSxVQUFBQyxLQUFLLEVBQUk7QUFDbkNMLE1BQUFBLHVCQUF1QixDQUFDSSxNQUF4QixDQUErQkMsS0FBL0I7QUFFQSxhQUFPQSxLQUFQO0FBQ0QsS0FKWSxDQU5mLFNBV0tULElBWEw7QUFhRCxHQWxCbUQsQ0FBdEQsQ0FOZ0YsQ0EyQmhGOztBQUNBRyxFQUFBQSxzQkFBc0IsQ0FBQ08sK0JBQXZCLEdBQXlELFVBQUNILE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUM1RUwsSUFBQUEsc0JBQXNCLENBQUNFLGVBQXZCLENBQ0UsWUFBTSxDQUNKO0FBQ0QsS0FISCxFQUlFLFVBQUFNLEdBQUcsRUFBSTtBQUNMSixNQUFBQSxPQUFPLEdBQUcsSUFBVjtBQUNBQyxNQUFBQSxNQUFNLElBQUlBLE1BQU0sQ0FBQ0csR0FBRCxDQUFoQjtBQUNELEtBUEg7QUFVQUMsSUFBQUEsVUFBVSxDQUFDLFlBQU07QUFDZkosTUFBQUEsTUFBTSxHQUFHLElBQVQ7QUFDQUQsTUFBQUEsT0FBTyxJQUFJQSxPQUFPLEVBQWxCO0FBQ0QsS0FIUyxFQUdQLENBSE8sQ0FBVjtBQUlELEdBZkQsQ0E1QmdGLENBNkNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxTQUFPSixzQkFBUDtBQUNEIiwic291cmNlUm9vdCI6ImRpcmVjdGxpbmVzcGVlY2g6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZURlZmVycmVkIGZyb20gJ3AtZGVmZXItZXM1JztcblxuLy8gUGF0Y2hpbmcgYSBmdW5jdGlvbiB0byBhZGQgcHJlLXByb2Nlc3Npbmcgb2YgYXJndW1lbnRzIGFuZCBwb3N0LXByb2Nlc3Npbmcgb2YgcmVzdWx0LlxuZnVuY3Rpb24gcGF0Y2hGdW5jdGlvbihmbiwgcHJlLCBwb3N0KSB7XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGFyZ3MgPSBwcmUgPyBwcmUoLi4uYXJncykgOiBhcmdzO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gZm4oLi4uYXJncyk7XG5cbiAgICByZXR1cm4gcG9zdCA/IHBvc3QocmVzdWx0KSA6IHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGF0Y2hEaWFsb2dTZXJ2aWNlQ29ubmVjdG9ySW5saW5lKGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHBhdGNoIERpYWxvZ1NlcnZpY2VDb25uZWN0b3IgYnkgbW9kaWZ5aW5nIHRoZSBvYmplY3QuXG4gIC8vIFRoZSBwYXRjaGVzIGFyZSBpbnRlbmRlZCB0byBmaWxsLWluIGZlYXR1cmVzIHRvIG1ha2UgRGlhbG9nU2VydmljZUNvbm5lY3RvciBvYmplY3Qgd29ya3MgbGlrZSB0aGUgZnVsbC1mbGVkZ2VkIFJlY29nbml6ZXIgb2JqZWN0LlxuXG4gIGxldCBsYXN0UmVjb2duaXRpb25EZWZlcnJlZDtcblxuICBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLmxpc3Rlbk9uY2VBc3luYyA9IHBhdGNoRnVuY3Rpb24oXG4gICAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5saXN0ZW5PbmNlQXN5bmMuYmluZChkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yKSxcbiAgICAocmVzb2x2ZSwgcmVqZWN0LCAuLi5hcmdzKSA9PiB7XG4gICAgICBsYXN0UmVjb2duaXRpb25EZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHBhdGNoRnVuY3Rpb24ocmVzb2x2ZSwgbnVsbCwgcmVzdWx0ID0+IHtcbiAgICAgICAgICBsYXN0UmVjb2duaXRpb25EZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KSxcbiAgICAgICAgcGF0Y2hGdW5jdGlvbihyZWplY3QsIG51bGwsIGVycm9yID0+IHtcbiAgICAgICAgICBsYXN0UmVjb2duaXRpb25EZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuXG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9KSxcbiAgICAgICAgLi4uYXJnc1xuICAgICAgXTtcbiAgICB9XG4gICk7XG5cbiAgLy8gVE9ETzogc3RhcnRDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyBpcyBub3Qgd29ya2luZyB5ZXQsIHVzZSBsaXN0ZW5PbmNlQXN5bmMgaW5zdGVhZC5cbiAgZGlhbG9nU2VydmljZUNvbm5lY3Rvci5zdGFydENvbnRpbnVvdXNSZWNvZ25pdGlvbkFzeW5jID0gKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGRpYWxvZ1NlcnZpY2VDb25uZWN0b3IubGlzdGVuT25jZUFzeW5jKFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBXZSB3aWxsIHJlc29sdmUgdGhlIFByb21pc2UgaW4gYSBzZXRUaW1lb3V0LlxuICAgICAgfSxcbiAgICAgIGVyciA9PiB7XG4gICAgICAgIHJlc29sdmUgPSBudWxsO1xuICAgICAgICByZWplY3QgJiYgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVqZWN0ID0gbnVsbDtcbiAgICAgIHJlc29sdmUgJiYgcmVzb2x2ZSgpO1xuICAgIH0sIDApO1xuICB9O1xuXG4gIC8vIFRPRE86IHN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyBpcyBub3Qgd29ya2luZyB5ZXQuXG4gIC8vICAgICAgIFdlIHdpbGwgbGVhdmUgb3V0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBmYWxzeSwgV2ViIENoYXQgd2lsbCBkaXNhYmxlIHRoZSBtaWNyb3Bob25lIGJ1dHRvbiBhZnRlciBzdGFydCBkaWN0YXRlLlxuICAvLyAgICAgICBUaGlzIHdpbGwgcHJldmVudCB1c2VyIGZyb20gYWJvcnRpbmcgc3BlZWNoIHJlY29nbml0aW9uLlxuICAvLyBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yLnN0b3BDb250aW51b3VzUmVjb2duaXRpb25Bc3luYyA9IHJlc29sdmUgPT4ge1xuICAvLyB9O1xuXG4gIHJldHVybiBkaWFsb2dTZXJ2aWNlQ29ubmVjdG9yO1xufVxuIl19