"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTaskQueue;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _pDeferEs = _interopRequireDefault(require("p-defer-es5"));

function createTaskQueue() {
  var queueWithCurrent = [];
  var queue = {
    cancelAll: function cancelAll() {
      queueWithCurrent.forEach(function (_ref) {
        var cancel = _ref.cancel;
        return cancel();
      });
    },
    push: function push(fn) {
      var cancelDeferred = (0, _pDeferEs.default)();
      var resultDeferred = (0, _pDeferEs.default)();
      var entry = {
        promise: resultDeferred.promise
      };
      var abort;

      var cancel = entry.cancel = function () {
        // Override the "fn" so we don't call the actual "fn" later.
        // In this approach, we can reuse the logic inside "start" to handle post-cancellation.
        fn = function fn() {
          return {
            result: Promise.reject(new Error('cancelled before start'))
          };
        }; // Abort the task if it is currently running.


        abort && abort();
        cancelDeferred.reject(new Error('cancelled in the midway'));
      };

      var start = /*#__PURE__*/function () {
        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
          var _fn, abortFn, result;

          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _fn = fn(), abortFn = _fn.abort, result = _fn.result;
                  abort = abortFn;
                  _context.prev = 2;
                  _context.t0 = resultDeferred;
                  _context.next = 6;
                  return Promise.race([result, cancelDeferred.promise]);

                case 6:
                  _context.t1 = _context.sent;

                  _context.t0.resolve.call(_context.t0, _context.t1);

                  _context.next = 13;
                  break;

                case 10:
                  _context.prev = 10;
                  _context.t2 = _context["catch"](2);
                  resultDeferred.reject(_context.t2);

                case 13:
                  queueWithCurrent = queueWithCurrent.filter(function (e) {
                    return e !== entry;
                  });

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[2, 10]]);
        }));

        return function start() {
          return _ref2.apply(this, arguments);
        };
      }();

      var lastEntry = queueWithCurrent[queueWithCurrent.length - 1];
      var lastPromise = lastEntry && lastEntry.promise || Promise.resolve();
      queueWithCurrent.push(entry); // After the last promise resolved/rejected, we will start this task.
      // We will start even if the last promise rejected.

      lastPromise.then(start, start);
      return {
        cancel: cancel,
        result: resultDeferred.promise
      };
    }
  };
  Object.defineProperty(queue, 'length', {
    get: function get() {
      return queueWithCurrent.length;
    }
  });
  return queue;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVUYXNrUXVldWUuanMiXSwibmFtZXMiOlsiY3JlYXRlVGFza1F1ZXVlIiwicXVldWVXaXRoQ3VycmVudCIsInF1ZXVlIiwiY2FuY2VsQWxsIiwiZm9yRWFjaCIsImNhbmNlbCIsInB1c2giLCJmbiIsImNhbmNlbERlZmVycmVkIiwicmVzdWx0RGVmZXJyZWQiLCJlbnRyeSIsInByb21pc2UiLCJhYm9ydCIsInJlc3VsdCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsInN0YXJ0IiwiYWJvcnRGbiIsInJhY2UiLCJyZXNvbHZlIiwiZmlsdGVyIiwiZSIsImxhc3RFbnRyeSIsImxlbmd0aCIsImxhc3RQcm9taXNlIiwidGhlbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRWUsU0FBU0EsZUFBVCxHQUEyQjtBQUN4QyxNQUFJQyxnQkFBZ0IsR0FBRyxFQUF2QjtBQUVBLE1BQU1DLEtBQUssR0FBRztBQUNaQyxJQUFBQSxTQUFTLEVBQUUscUJBQU07QUFDZkYsTUFBQUEsZ0JBQWdCLENBQUNHLE9BQWpCLENBQXlCO0FBQUEsWUFBR0MsTUFBSCxRQUFHQSxNQUFIO0FBQUEsZUFBZ0JBLE1BQU0sRUFBdEI7QUFBQSxPQUF6QjtBQUNELEtBSFc7QUFJWkMsSUFBQUEsSUFBSSxFQUFFLGNBQUFDLEVBQUUsRUFBSTtBQUNWLFVBQU1DLGNBQWMsR0FBRyx3QkFBdkI7QUFDQSxVQUFNQyxjQUFjLEdBQUcsd0JBQXZCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUYsY0FBYyxDQUFDRTtBQUExQixPQUFkO0FBQ0EsVUFBSUMsS0FBSjs7QUFFQSxVQUFNUCxNQUFNLEdBQUlLLEtBQUssQ0FBQ0wsTUFBTixHQUFlLFlBQU07QUFDbkM7QUFDQTtBQUNBRSxRQUFBQSxFQUFFLEdBQUc7QUFBQSxpQkFBTztBQUFFTSxZQUFBQSxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0MsTUFBUixDQUFlLElBQUlDLEtBQUosQ0FBVSx3QkFBVixDQUFmO0FBQVYsV0FBUDtBQUFBLFNBQUwsQ0FIbUMsQ0FLbkM7OztBQUNBSixRQUFBQSxLQUFLLElBQUlBLEtBQUssRUFBZDtBQUNBSixRQUFBQSxjQUFjLENBQUNPLE1BQWYsQ0FBc0IsSUFBSUMsS0FBSixDQUFVLHlCQUFWLENBQXRCO0FBQ0QsT0FSRDs7QUFVQSxVQUFNQyxLQUFLO0FBQUEsNEZBQUc7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHdCQUN1QlYsRUFBRSxFQUR6QixFQUNHVyxPQURILE9BQ0pOLEtBREksRUFDWUMsTUFEWixPQUNZQSxNQURaO0FBR1pELGtCQUFBQSxLQUFLLEdBQUdNLE9BQVI7QUFIWTtBQUFBLGdDQU9WVCxjQVBVO0FBQUE7QUFBQSx5QkFPbUJLLE9BQU8sQ0FBQ0ssSUFBUixDQUFhLENBQUNOLE1BQUQsRUFBU0wsY0FBYyxDQUFDRyxPQUF4QixDQUFiLENBUG5COztBQUFBO0FBQUE7O0FBQUEsOEJBT0tTLE9BUEw7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFTVlgsa0JBQUFBLGNBQWMsQ0FBQ00sTUFBZjs7QUFUVTtBQVlaZCxrQkFBQUEsZ0JBQWdCLEdBQUdBLGdCQUFnQixDQUFDb0IsTUFBakIsQ0FBd0IsVUFBQUMsQ0FBQztBQUFBLDJCQUFJQSxDQUFDLEtBQUtaLEtBQVY7QUFBQSxtQkFBekIsQ0FBbkI7O0FBWlk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBSDs7QUFBQSx3QkFBTE8sS0FBSztBQUFBO0FBQUE7QUFBQSxTQUFYOztBQWVBLFVBQU1NLFNBQVMsR0FBR3RCLGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQ3VCLE1BQWpCLEdBQTBCLENBQTNCLENBQWxDO0FBQ0EsVUFBTUMsV0FBVyxHQUFJRixTQUFTLElBQUlBLFNBQVMsQ0FBQ1osT0FBeEIsSUFBb0NHLE9BQU8sQ0FBQ00sT0FBUixFQUF4RDtBQUVBbkIsTUFBQUEsZ0JBQWdCLENBQUNLLElBQWpCLENBQXNCSSxLQUF0QixFQWxDVSxDQW9DVjtBQUNBOztBQUNBZSxNQUFBQSxXQUFXLENBQUNDLElBQVosQ0FBaUJULEtBQWpCLEVBQXdCQSxLQUF4QjtBQUVBLGFBQU87QUFDTFosUUFBQUEsTUFBTSxFQUFOQSxNQURLO0FBRUxRLFFBQUFBLE1BQU0sRUFBRUosY0FBYyxDQUFDRTtBQUZsQixPQUFQO0FBSUQ7QUFoRFcsR0FBZDtBQW1EQWdCLEVBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQjFCLEtBQXRCLEVBQTZCLFFBQTdCLEVBQXVDO0FBQUUyQixJQUFBQSxHQUFHLEVBQUU7QUFBQSxhQUFNNUIsZ0JBQWdCLENBQUN1QixNQUF2QjtBQUFBO0FBQVAsR0FBdkM7QUFFQSxTQUFPdEIsS0FBUDtBQUNEIiwic291cmNlUm9vdCI6ImRpcmVjdGxpbmVzcGVlY2g6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZURlZmVycmVkIGZyb20gJ3AtZGVmZXItZXM1JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVGFza1F1ZXVlKCkge1xuICBsZXQgcXVldWVXaXRoQ3VycmVudCA9IFtdO1xuXG4gIGNvbnN0IHF1ZXVlID0ge1xuICAgIGNhbmNlbEFsbDogKCkgPT4ge1xuICAgICAgcXVldWVXaXRoQ3VycmVudC5mb3JFYWNoKCh7IGNhbmNlbCB9KSA9PiBjYW5jZWwoKSk7XG4gICAgfSxcbiAgICBwdXNoOiBmbiA9PiB7XG4gICAgICBjb25zdCBjYW5jZWxEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICBjb25zdCByZXN1bHREZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gICAgICBjb25zdCBlbnRyeSA9IHsgcHJvbWlzZTogcmVzdWx0RGVmZXJyZWQucHJvbWlzZSB9O1xuICAgICAgbGV0IGFib3J0O1xuXG4gICAgICBjb25zdCBjYW5jZWwgPSAoZW50cnkuY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICAvLyBPdmVycmlkZSB0aGUgXCJmblwiIHNvIHdlIGRvbid0IGNhbGwgdGhlIGFjdHVhbCBcImZuXCIgbGF0ZXIuXG4gICAgICAgIC8vIEluIHRoaXMgYXBwcm9hY2gsIHdlIGNhbiByZXVzZSB0aGUgbG9naWMgaW5zaWRlIFwic3RhcnRcIiB0byBoYW5kbGUgcG9zdC1jYW5jZWxsYXRpb24uXG4gICAgICAgIGZuID0gKCkgPT4gKHsgcmVzdWx0OiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ2NhbmNlbGxlZCBiZWZvcmUgc3RhcnQnKSkgfSk7XG5cbiAgICAgICAgLy8gQWJvcnQgdGhlIHRhc2sgaWYgaXQgaXMgY3VycmVudGx5IHJ1bm5pbmcuXG4gICAgICAgIGFib3J0ICYmIGFib3J0KCk7XG4gICAgICAgIGNhbmNlbERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoJ2NhbmNlbGxlZCBpbiB0aGUgbWlkd2F5JykpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGFib3J0OiBhYm9ydEZuLCByZXN1bHQgfSA9IGZuKCk7XG5cbiAgICAgICAgYWJvcnQgPSBhYm9ydEZuO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gRWl0aGVyIHdhaXQgZm9yIHRoZSBhY3R1YWwgcmVzdWx0LCBvciB0aGUgdGFzayBpcyBiZWluZyBjYW5jZWxsZWQuXG4gICAgICAgICAgcmVzdWx0RGVmZXJyZWQucmVzb2x2ZShhd2FpdCBQcm9taXNlLnJhY2UoW3Jlc3VsdCwgY2FuY2VsRGVmZXJyZWQucHJvbWlzZV0pKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXN1bHREZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWVXaXRoQ3VycmVudCA9IHF1ZXVlV2l0aEN1cnJlbnQuZmlsdGVyKGUgPT4gZSAhPT0gZW50cnkpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgbGFzdEVudHJ5ID0gcXVldWVXaXRoQ3VycmVudFtxdWV1ZVdpdGhDdXJyZW50Lmxlbmd0aCAtIDFdO1xuICAgICAgY29uc3QgbGFzdFByb21pc2UgPSAobGFzdEVudHJ5ICYmIGxhc3RFbnRyeS5wcm9taXNlKSB8fCBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgICAgcXVldWVXaXRoQ3VycmVudC5wdXNoKGVudHJ5KTtcblxuICAgICAgLy8gQWZ0ZXIgdGhlIGxhc3QgcHJvbWlzZSByZXNvbHZlZC9yZWplY3RlZCwgd2Ugd2lsbCBzdGFydCB0aGlzIHRhc2suXG4gICAgICAvLyBXZSB3aWxsIHN0YXJ0IGV2ZW4gaWYgdGhlIGxhc3QgcHJvbWlzZSByZWplY3RlZC5cbiAgICAgIGxhc3RQcm9taXNlLnRoZW4oc3RhcnQsIHN0YXJ0KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FuY2VsLFxuICAgICAgICByZXN1bHQ6IHJlc3VsdERlZmVycmVkLnByb21pc2VcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShxdWV1ZSwgJ2xlbmd0aCcsIHsgZ2V0OiAoKSA9PiBxdWV1ZVdpdGhDdXJyZW50Lmxlbmd0aCB9KTtcblxuICByZXR1cm4gcXVldWU7XG59XG4iXX0=