"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = playWhiteNoise;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _base64Arraybuffer = require("base64-arraybuffer");

var _eventAsPromise = _interopRequireDefault(require("event-as-promise"));

var EMPTY_MP3_BASE64 = 'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';

function subscribeEvent(target, name, handler) {
  target.addEventListener(name, handler);
  return function () {
    return target.removeEventListener(name, handler);
  };
}

function asyncDecodeAudioData(audioContext, arrayBuffer) {
  return new Promise(function (resolve, reject) {
    var promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject); // Newer implementation of "decodeAudioData" will return a Promise

    promise && typeof promise.then === 'function' && resolve(promise);
  });
}

function playDecoded(audioContext, audioBuffer, source) {
  return new Promise(function (resolve, reject) {
    var audioContextClosed = new _eventAsPromise.default();
    var sourceEnded = new _eventAsPromise.default();
    var unsubscribe = subscribeEvent(audioContext, 'statechange', function (_ref) {
      var state = _ref.target.state;
      return state === 'closed' && audioContextClosed.eventListener();
    });

    try {
      source.buffer = audioBuffer; // "ended" may not fire if the underlying AudioContext is closed prematurely

      source.onended = sourceEnded.eventListener;
      source.connect(audioContext.destination);
      source.start(0);
      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);
    } catch (err) {
      reject(err);
    } finally {
      unsubscribe();
    }
  });
}

function playWhiteNoise(_x) {
  return _playWhiteNoise.apply(this, arguments);
}

function _playWhiteNoise() {
  _playWhiteNoise = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(audioContext) {
    var source, audioBuffer;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            source = audioContext.createBufferSource();
            _context.next = 3;
            return asyncDecodeAudioData(audioContext, (0, _base64Arraybuffer.decode)(EMPTY_MP3_BASE64));

          case 3:
            audioBuffer = _context.sent;
            _context.next = 6;
            return playDecoded(audioContext, audioBuffer, source);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _playWhiteNoise.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wbGF5V2hpdGVOb2lzZS5qcyJdLCJuYW1lcyI6WyJFTVBUWV9NUDNfQkFTRTY0Iiwic3Vic2NyaWJlRXZlbnQiLCJ0YXJnZXQiLCJuYW1lIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXN5bmNEZWNvZGVBdWRpb0RhdGEiLCJhdWRpb0NvbnRleHQiLCJhcnJheUJ1ZmZlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsImRlY29kZUF1ZGlvRGF0YSIsInRoZW4iLCJwbGF5RGVjb2RlZCIsImF1ZGlvQnVmZmVyIiwic291cmNlIiwiYXVkaW9Db250ZXh0Q2xvc2VkIiwiRXZlbnRBc1Byb21pc2UiLCJzb3VyY2VFbmRlZCIsInVuc3Vic2NyaWJlIiwic3RhdGUiLCJldmVudExpc3RlbmVyIiwiYnVmZmVyIiwib25lbmRlZCIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInN0YXJ0IiwicmFjZSIsInVwY29taW5nIiwiZXJyIiwicGxheVdoaXRlTm9pc2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FDcEIsc2tCQURGOztBQUdBLFNBQVNDLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDQyxJQUFoQyxFQUFzQ0MsT0FBdEMsRUFBK0M7QUFDN0NGLEVBQUFBLE1BQU0sQ0FBQ0csZ0JBQVAsQ0FBd0JGLElBQXhCLEVBQThCQyxPQUE5QjtBQUVBLFNBQU87QUFBQSxXQUFNRixNQUFNLENBQUNJLG1CQUFQLENBQTJCSCxJQUEzQixFQUFpQ0MsT0FBakMsQ0FBTjtBQUFBLEdBQVA7QUFDRDs7QUFFRCxTQUFTRyxvQkFBVCxDQUE4QkMsWUFBOUIsRUFBNENDLFdBQTVDLEVBQXlEO0FBQ3ZELFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFNQyxPQUFPLEdBQUdMLFlBQVksQ0FBQ00sZUFBYixDQUE2QkwsV0FBN0IsRUFBMENFLE9BQTFDLEVBQW1EQyxNQUFuRCxDQUFoQixDQURzQyxDQUd0Qzs7QUFDQUMsSUFBQUEsT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ0UsSUFBZixLQUF3QixVQUFuQyxJQUFpREosT0FBTyxDQUFDRSxPQUFELENBQXhEO0FBQ0QsR0FMTSxDQUFQO0FBTUQ7O0FBRUQsU0FBU0csV0FBVCxDQUFxQlIsWUFBckIsRUFBbUNTLFdBQW5DLEVBQWdEQyxNQUFoRCxFQUF3RDtBQUN0RCxTQUFPLElBQUlSLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEMsUUFBTU8sa0JBQWtCLEdBQUcsSUFBSUMsdUJBQUosRUFBM0I7QUFDQSxRQUFNQyxXQUFXLEdBQUcsSUFBSUQsdUJBQUosRUFBcEI7QUFDQSxRQUFNRSxXQUFXLEdBQUdyQixjQUFjLENBQ2hDTyxZQURnQyxFQUVoQyxhQUZnQyxFQUdoQztBQUFBLFVBQWFlLEtBQWIsUUFBR3JCLE1BQUgsQ0FBYXFCLEtBQWI7QUFBQSxhQUEyQkEsS0FBSyxLQUFLLFFBQVYsSUFBc0JKLGtCQUFrQixDQUFDSyxhQUFuQixFQUFqRDtBQUFBLEtBSGdDLENBQWxDOztBQU1BLFFBQUk7QUFDRk4sTUFBQUEsTUFBTSxDQUFDTyxNQUFQLEdBQWdCUixXQUFoQixDQURFLENBRUY7O0FBQ0FDLE1BQUFBLE1BQU0sQ0FBQ1EsT0FBUCxHQUFpQkwsV0FBVyxDQUFDRyxhQUE3QjtBQUVBTixNQUFBQSxNQUFNLENBQUNTLE9BQVAsQ0FBZW5CLFlBQVksQ0FBQ29CLFdBQTVCO0FBQ0FWLE1BQUFBLE1BQU0sQ0FBQ1csS0FBUCxDQUFhLENBQWI7QUFFQW5CLE1BQUFBLE9BQU8sQ0FBQ29CLElBQVIsQ0FBYSxDQUFDWCxrQkFBa0IsQ0FBQ1ksUUFBbkIsRUFBRCxFQUFnQ1YsV0FBVyxDQUFDVSxRQUFaLEVBQWhDLENBQWIsRUFBc0VoQixJQUF0RSxDQUEyRUosT0FBM0U7QUFDRCxLQVRELENBU0UsT0FBT3FCLEdBQVAsRUFBWTtBQUNacEIsTUFBQUEsTUFBTSxDQUFDb0IsR0FBRCxDQUFOO0FBQ0QsS0FYRCxTQVdVO0FBQ1JWLE1BQUFBLFdBQVc7QUFDWjtBQUNGLEdBdkJNLENBQVA7QUF3QkQ7O1NBRTZCVyxjOzs7Ozs0RkFBZixpQkFBOEJ6QixZQUE5QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDUFUsWUFBQUEsTUFETyxHQUNFVixZQUFZLENBQUMwQixrQkFBYixFQURGO0FBQUE7QUFBQSxtQkFFYTNCLG9CQUFvQixDQUFDQyxZQUFELEVBQWUsK0JBQU9SLGdCQUFQLENBQWYsQ0FGakM7O0FBQUE7QUFFUGlCLFlBQUFBLFdBRk87QUFBQTtBQUFBLG1CQUlQRCxXQUFXLENBQUNSLFlBQUQsRUFBZVMsV0FBZixFQUE0QkMsTUFBNUIsQ0FKSjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHIiwic291cmNlUm9vdCI6ImRpcmVjdGxpbmVzcGVlY2g6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVjb2RlIH0gZnJvbSAnYmFzZTY0LWFycmF5YnVmZmVyJztcbmltcG9ydCBFdmVudEFzUHJvbWlzZSBmcm9tICdldmVudC1hcy1wcm9taXNlJztcblxuY29uc3QgRU1QVFlfTVAzX0JBU0U2NCA9XG4gICdTVVF6QkFBQUFBQUFJMVJUVTBVQUFBQVBBQUFEVEdGMlpqVTNMalUyTGpFd01RQUFBQUFBQUFBQUFBQUEvL3RBd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBU1c1bWJ3QUFBQThBQUFBQ0FBQUJoZ0M3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1N3U3dTd1Ny8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzhBQUFBQVRHRjJZelUzTGpZMEFBQUFBQUFBQUFBQUFBQUFKQVVIQUFBQUFBQUFBWVlvUkJxcEFBQUFBQUQvK3hERUFBUEFBQUdrQUFBQUlBQUFOSUFBQUFSTVFVMUZNeTQ1T1M0MVZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZmLzdFTVFwZzhBQUFhUUFBQUFnQUFBMGdBQUFCRlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWJztcblxuZnVuY3Rpb24gc3Vic2NyaWJlRXZlbnQodGFyZ2V0LCBuYW1lLCBoYW5kbGVyKSB7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuXG4gIHJldHVybiAoKSA9PiB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gYXN5bmNEZWNvZGVBdWRpb0RhdGEoYXVkaW9Db250ZXh0LCBhcnJheUJ1ZmZlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb21pc2UgPSBhdWRpb0NvbnRleHQuZGVjb2RlQXVkaW9EYXRhKGFycmF5QnVmZmVyLCByZXNvbHZlLCByZWplY3QpO1xuXG4gICAgLy8gTmV3ZXIgaW1wbGVtZW50YXRpb24gb2YgXCJkZWNvZGVBdWRpb0RhdGFcIiB3aWxsIHJldHVybiBhIFByb21pc2VcbiAgICBwcm9taXNlICYmIHR5cGVvZiBwcm9taXNlLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgcmVzb2x2ZShwcm9taXNlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBsYXlEZWNvZGVkKGF1ZGlvQ29udGV4dCwgYXVkaW9CdWZmZXIsIHNvdXJjZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGF1ZGlvQ29udGV4dENsb3NlZCA9IG5ldyBFdmVudEFzUHJvbWlzZSgpO1xuICAgIGNvbnN0IHNvdXJjZUVuZGVkID0gbmV3IEV2ZW50QXNQcm9taXNlKCk7XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBzdWJzY3JpYmVFdmVudChcbiAgICAgIGF1ZGlvQ29udGV4dCxcbiAgICAgICdzdGF0ZWNoYW5nZScsXG4gICAgICAoeyB0YXJnZXQ6IHsgc3RhdGUgfSB9KSA9PiBzdGF0ZSA9PT0gJ2Nsb3NlZCcgJiYgYXVkaW9Db250ZXh0Q2xvc2VkLmV2ZW50TGlzdGVuZXIoKVxuICAgICk7XG5cbiAgICB0cnkge1xuICAgICAgc291cmNlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xuICAgICAgLy8gXCJlbmRlZFwiIG1heSBub3QgZmlyZSBpZiB0aGUgdW5kZXJseWluZyBBdWRpb0NvbnRleHQgaXMgY2xvc2VkIHByZW1hdHVyZWx5XG4gICAgICBzb3VyY2Uub25lbmRlZCA9IHNvdXJjZUVuZGVkLmV2ZW50TGlzdGVuZXI7XG5cbiAgICAgIHNvdXJjZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICBzb3VyY2Uuc3RhcnQoMCk7XG5cbiAgICAgIFByb21pc2UucmFjZShbYXVkaW9Db250ZXh0Q2xvc2VkLnVwY29taW5nKCksIHNvdXJjZUVuZGVkLnVwY29taW5nKCldKS50aGVuKHJlc29sdmUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmVqZWN0KGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcGxheVdoaXRlTm9pc2UoYXVkaW9Db250ZXh0KSB7XG4gIGNvbnN0IHNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCBhc3luY0RlY29kZUF1ZGlvRGF0YShhdWRpb0NvbnRleHQsIGRlY29kZShFTVBUWV9NUDNfQkFTRTY0KSk7XG5cbiAgYXdhaXQgcGxheURlY29kZWQoYXVkaW9Db250ZXh0LCBhdWRpb0J1ZmZlciwgc291cmNlKTtcbn1cbiJdfQ==