"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _useAdaptiveCardsHostConfig = _interopRequireDefault(require("../hooks/useAdaptiveCardsHostConfig"));

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../hooks/useAdaptiveCardsPackage"));

/* eslint no-magic-numbers: ["error", { "ignore": [-1, 0, 2] }] */
var ErrorBox = _botframeworkWebchatComponent.Components.ErrorBox;
var useDisabled = _botframeworkWebchatComponent.hooks.useDisabled,
    useLocalizer = _botframeworkWebchatComponent.hooks.useLocalizer,
    usePerformCardAction = _botframeworkWebchatComponent.hooks.usePerformCardAction,
    useRenderMarkdownAsHTML = _botframeworkWebchatComponent.hooks.useRenderMarkdownAsHTML,
    useScrollToEnd = _botframeworkWebchatComponent.hooks.useScrollToEnd,
    useStyleSet = _botframeworkWebchatComponent.hooks.useStyleSet;

function addClass(element, className) {
  var classNames = new Set(element.className.split(' '));

  if (!classNames.has(className)) {
    classNames.add(className);
    element.className = Array.from(classNames).join(' ');
    return true;
  }

  return false;
}

function addPersistentClassWithUndo(element, className) {
  if (addClass(element, className)) {
    // After we add the class, keep observing the element to make sure the class is not removed.
    var observer = new MutationObserver(function () {
      return addClass(element, className);
    });
    observer.observe(element, {
      attributes: true,
      attributeFilter: ['class']
    });
    return function () {
      var classNames = new Set(element.className.split(' '));
      classNames.delete(className);
      element.className = Array.from(classNames).join(' ');
      observer.disconnect();
    };
  }
}

function isPlainObject(obj) {
  return Object.getPrototypeOf(obj) === Object.prototype;
}

function setAttributeWithUndo(element, qualifiedName, nextValue) {
  var value = element.getAttribute(qualifiedName);

  if (value !== nextValue) {
    element.setAttribute(qualifiedName, nextValue);
    return function () {
      return value ? element.setAttribute(qualifiedName, value) : element.removeAttribute(qualifiedName);
    };
  }
}

var disabledHandler = function disabledHandler(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
  event.stopPropagation();
};

function addEventListenerOnceWithUndo(element, name, handler) {
  /* eslint-disable-next-line prefer-const */
  var detach;

  var detachingHandler = function detachingHandler(event) {
    try {
      handler(event);
    } finally {
      // IE11 does not support { once: true }, so we need to detach manually.
      detach();
    }
  };

  detach = function detach() {
    return element.removeEventListener(name, detachingHandler);
  };

  element.addEventListener(name, detachingHandler, {
    once: true
  });
  return detach;
}

function disableElementWithUndo(element) {
  var undoStack = [];
  var isActive = element === document.activeElement;
  var tag = element.nodeName.toLowerCase();
  /* eslint-disable-next-line default-case */

  switch (tag) {
    // Should we not disable <a>? Will some of the <a> are styled as button?
    case 'a':
      undoStack.push(addEventListenerOnceWithUndo(element, 'click', disabledHandler));
      break;

    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      undoStack.push(setAttributeWithUndo(element, 'aria-disabled', 'true'));

      if (isActive) {
        undoStack.push(addEventListenerOnceWithUndo(element, 'blur', function () {
          return undoStack.push(setAttributeWithUndo(element, 'disabled', 'disabled'));
        }));
      } else {
        undoStack.push(setAttributeWithUndo(element, 'disabled', 'disabled'));
      }

      if (tag === 'input' || tag === 'textarea') {
        undoStack.push(addEventListenerOnceWithUndo(element, 'click', disabledHandler));
        undoStack.push(setAttributeWithUndo(element, 'readonly', 'readonly'));
      } else if (tag === 'select') {
        undoStack.push.apply(undoStack, (0, _toConsumableArray2.default)([].map.call(element.querySelectorAll('option'), function (option) {
          return setAttributeWithUndo(option, 'disabled', 'disabled');
        })));
      }

      break;
  }

  return function () {
    return undoStack.forEach(function (undo) {
      return undo && undo();
    });
  };
}

function disableInputElementsWithUndo(element) {
  var observeSubtree = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var undoStack = [].map.call(element.querySelectorAll('a, button, input, select, textarea'), function (element) {
    return disableElementWithUndo(element);
  });
  var tag = element.nodeName.toLowerCase(); // Only set tabindex="-1" on focusable element. Otherwise, we will make <div> focusable by mouse.

  (tag === 'a' || tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea') && undoStack.push(setAttributeWithUndo(element, 'tabindex', '-1'));

  if (observeSubtree) {
    var observer = new MutationObserver(function (mutations) {
      return mutations.forEach(function (_ref) {
        var addedNodes = _ref.addedNodes;
        return undoStack.push.apply(undoStack, (0, _toConsumableArray2.default)(addedNodes.map(function (addedNode) {
          return disableInputElementsWithUndo(addedNode, false);
        })));
      });
    });
    observer.observe(element, {
      childList: true,
      subtree: true
    });
    undoStack.push(function () {
      return observer.disconnect();
    });
  }

  return function () {
    return undoStack.forEach(function (undo) {
      return undo && undo();
    });
  };
}

function getFocusableElements(element) {
  return [].filter.call(element.querySelectorAll(['a', 'body', 'button', 'frame', 'iframe', 'img', 'input', 'isindex', 'object', 'select', 'textarea', '[tabindex]'].join(', ')), function (element) {
    var tabIndex = (0, _botframeworkWebchatComponent.getTabIndex)(element);
    return typeof tabIndex === 'number' && tabIndex >= 0;
  });
}

function restoreActiveElementIndex(element, activeElementIndex) {
  var focusable = getFocusableElements(element)[activeElementIndex];
  focusable && focusable.focus();
}

function saveActiveElementIndex(element) {
  return getFocusableElements(element).indexOf(document.activeElement);
}

function restoreInputValues(element, inputValues) {
  var inputs = element.querySelectorAll('input, select, textarea');
  [].forEach.call(inputs, function (input, index) {
    var value = inputValues[index];

    if (typeof value !== 'undefined') {
      var tagName = input.tagName,
          type = input.type;

      if (tagName === 'INPUT' && (type === 'checkbox' || type === 'radio')) {
        input.checked = value;
      } else {
        input.value = value;
      }
    }
  });
}

function saveInputValues(element) {
  var inputs = element.querySelectorAll('input, select, textarea');
  return [].map.call(inputs, function (_ref2) {
    var checked = _ref2.checked,
        tagName = _ref2.tagName,
        type = _ref2.type,
        value = _ref2.value;

    if (tagName === 'INPUT' && (type === 'checkbox' || type === 'radio')) {
      return checked;
    }

    return value;
  });
}

var AdaptiveCardRenderer = function AdaptiveCardRenderer(_ref3) {
  var actionPerformedClassName = _ref3.actionPerformedClassName,
      adaptiveCard = _ref3.adaptiveCard,
      disabledFromProps = _ref3.disabled,
      tapAction = _ref3.tapAction;

  var _useStyleSet = useStyleSet(),
      _useStyleSet2 = (0, _slicedToArray2.default)(_useStyleSet, 1),
      adaptiveCardRendererStyleSet = _useStyleSet2[0].adaptiveCardRenderer;

  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      _useAdaptiveCardsPack3 = _useAdaptiveCardsPack2[0],
      GlobalSettings = _useAdaptiveCardsPack3.GlobalSettings,
      HostConfig = _useAdaptiveCardsPack3.HostConfig;

  var _useState = (0, _react.useState)([]),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      actionsPerformed = _useState2[0],
      setActionsPerformed = _useState2[1];

  var _useAdaptiveCardsHost = (0, _useAdaptiveCardsHostConfig.default)(),
      _useAdaptiveCardsHost2 = (0, _slicedToArray2.default)(_useAdaptiveCardsHost, 1),
      adaptiveCardsHostConfig = _useAdaptiveCardsHost2[0];

  var _useDisabled = useDisabled(),
      _useDisabled2 = (0, _slicedToArray2.default)(_useDisabled, 1),
      disabledFromComposer = _useDisabled2[0];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      errors = _useState4[0],
      setErrors = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
      lastRender = _useState6[0],
      setLastRender = _useState6[1];

  var activeElementIndexRef = (0, _react.useRef)(-1);
  var adaptiveCardElementRef = (0, _react.useRef)();
  var contentRef = (0, _react.useRef)();
  var inputValuesRef = (0, _react.useRef)([]);
  var localize = useLocalizer();
  var performCardAction = usePerformCardAction();
  var renderMarkdownAsHTML = useRenderMarkdownAsHTML();
  var scrollToEnd = useScrollToEnd();
  var disabled = disabledFromComposer || disabledFromProps; // TODO: [P2] #3199 We should consider using `adaptiveCard.selectAction` instead.
  // The null check for "tapAction" is in "handleClickAndKeyPressForTapAction".

  var handleClickAndKeyPress = (0, _react.useCallback)(function (event) {
    var key = event.key,
        target = event.target,
        type = event.type; // Some items, e.g. tappable text, cannot be disabled thru DOM attributes

    var current = contentRef.current;
    var adaptiveCardRoot = current.querySelector('.ac-adaptiveCard[tabindex="0"]');

    if (!adaptiveCardRoot) {
      return console.warn('botframework-webchat: No Adaptive Card root container can be found, probably on an unsupported Adaptive Card version.');
    } // For "keypress" event, we only listen to ENTER and SPACEBAR key.


    if (type === 'keypress') {
      if (key !== 'Enter' && key !== ' ') {
        return;
      }

      event.preventDefault();
    } // We will call performCardAction if either:
    // 1. We are on the target, or
    // 2. The event-dispatching element is not interactive


    if (target !== adaptiveCardRoot) {
      var tabIndex = (0, _botframeworkWebchatComponent.getTabIndex)(target); // If the user is clicking on something that is already clickable, do not allow them to click the card.
      // E.g. a hero card can be tappable, and image and buttons inside the hero card can also be tappable.

      if (typeof tabIndex === 'number' && tabIndex >= 0) {
        return;
      }
    }

    performCardAction(tapAction);
    scrollToEnd();
  }, [contentRef, performCardAction, scrollToEnd, tapAction]); // Only listen to event if it is not disabled and have "tapAction" prop.

  var handleClickAndKeyPressForTapAction = !disabled && tapAction ? handleClickAndKeyPress : undefined;
  var addActionsPerformed = (0, _react.useCallback)(function (action) {
    return !~actionsPerformed.indexOf(action) && setActionsPerformed([].concat((0, _toConsumableArray2.default)(actionsPerformed), [action]));
  }, [actionsPerformed, setActionsPerformed]);
  var handleExecuteAction = (0, _react.useCallback)(function (action) {
    // Some items, e.g. tappable image, cannot be disabled thru DOM attributes
    if (disabled) {
      return;
    }

    addActionsPerformed(action);
    var actionTypeName = action.getJsonTypeName();

    if (actionTypeName === 'Action.OpenUrl') {
      performCardAction({
        type: 'openUrl',
        value: action.url
      });
    } else if (actionTypeName === 'Action.Submit') {
      if (typeof action.data !== 'undefined') {
        var actionData = action.data;

        if (actionData && actionData.__isBotFrameworkCardAction) {
          var cardAction = actionData.cardAction;
          var displayText = cardAction.displayText,
              text = cardAction.text,
              type = cardAction.type,
              value = cardAction.value;
          performCardAction({
            displayText: displayText,
            text: text,
            type: type,
            value: value
          });
        } else {
          performCardAction({
            type: typeof action.data === 'string' ? 'imBack' : 'postBack',
            value: action.data
          });
        }
      }

      scrollToEnd();
    } else {
      console.error("Web Chat: received unknown action from Adaptive Cards");
      console.error(action);
    }
  }, [addActionsPerformed, disabled, performCardAction, scrollToEnd]);
  (0, _react.useLayoutEffect)(function () {
    var current = contentRef.current;

    if (!current || !adaptiveCard) {
      activeElementIndexRef.current = -1;
      inputValuesRef.current = [];
    } // Currently, the only way to set the Markdown engine is to set it thru static member of AdaptiveCard class
    // TODO: [P3] Checks if we could make the "renderMarkdownAsHTML" per card
    //       This could be limitations from Adaptive Cards package (not supported as of 1.2.5)
    //       Because there could be timing difference between .parse and .render, we could be using wrong Markdown engine


    adaptiveCard.constructor.onProcessMarkdown = function (text, result) {
      if (renderMarkdownAsHTML) {
        result.outputHtml = renderMarkdownAsHTML(text);
        result.didProcess = true;
      }
    };

    if (adaptiveCardsHostConfig) {
      adaptiveCard.hostConfig = isPlainObject(adaptiveCardsHostConfig) ? new HostConfig(adaptiveCardsHostConfig) : adaptiveCardsHostConfig;
    } // For accessibility issue #1340, `tabindex="0"` must not be set for the root container if it is not interactive.


    GlobalSettings.setTabIndexAtCardRoot = !!tapAction;

    var _adaptiveCard$validat = adaptiveCard.validateProperties(),
        failures = _adaptiveCard$validat.failures;

    if (failures.length) {
      return setErrors(failures.reduce(function (items, _ref4) {
        var errors = _ref4.errors;
        return [].concat((0, _toConsumableArray2.default)(items), (0, _toConsumableArray2.default)(errors.map(function (_ref5) {
          var message = _ref5.message;
          return new Error(message);
        })));
      }, []));
    }

    var element;

    try {
      element = adaptiveCard.render();
    } catch (error) {
      return setErrors([error]);
    }

    if (!element) {
      return setErrors([new Error('Adaptive Card rendered as empty element')]);
    } // Clear errors on next render


    setErrors([]);
    restoreInputValues(element, inputValuesRef.current);
    current.appendChild(element);
    adaptiveCardElementRef.current = element; // Focus can only be restored after the DOM is attached.

    restoreActiveElementIndex(element, activeElementIndexRef.current);
    setLastRender(Date.now());
    return function () {
      activeElementIndexRef.current = saveActiveElementIndex(element);
      inputValuesRef.current = saveInputValues(element);
      current.removeChild(adaptiveCardElementRef.current);
      adaptiveCardElementRef.current = undefined;
    };
  }, [adaptiveCard, adaptiveCardsHostConfig, contentRef, GlobalSettings, HostConfig, renderMarkdownAsHTML, setErrors, tapAction]);
  (0, _react.useEffect)(function () {
    // Set onExecuteAction without causing unnecessary re-render.
    adaptiveCard.onExecuteAction = disabled ? undefined : handleExecuteAction;
  }, [adaptiveCard, disabled, handleExecuteAction]);
  (0, _react.useEffect)(function () {
    // If the Adaptive Card get re-rendered, re-disable elements as needed.
    if (disabled) {
      return disableInputElementsWithUndo(adaptiveCardElementRef.current);
    }
  }, [disabled, lastRender]);
  (0, _react.useEffect)(function () {
    // If the Adaptive Card changed, reset all actions performed.
    setActionsPerformed([]);
  }, [adaptiveCard]);
  (0, _react.useEffect)(function () {
    // Add developers to highlight actions when they have been clicked.
    if (!actionPerformedClassName) {
      return;
    }

    var undoStack = actionsPerformed.map(function (_ref6) {
      var renderedElement = _ref6.renderedElement;
      return renderedElement && adaptiveCardElementRef.current.contains(renderedElement) && addPersistentClassWithUndo(renderedElement, actionPerformedClassName);
    });
    return function () {
      return undoStack.forEach(function (undo) {
        return undo && undo();
      });
    };
  }, [actionsPerformed, actionPerformedClassName, lastRender]);
  return errors.length ? /*#__PURE__*/_react.default.createElement(ErrorBox, {
    message: localize('ADAPTIVE_CARD_ERROR_BOX_TITLE_RENDER')
  }, errors.map(function (_ref7, index) {
    var error = _ref7.error,
        message = _ref7.message;
    return (
      /*#__PURE__*/

      /* eslint-disable-next-line react/no-array-index-key */
      _react.default.createElement("pre", {
        key: index
      }, JSON.stringify({
        error: error,
        message: message
      }, null, 2))
    );
  })) : /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(adaptiveCardRendererStyleSet + '', 'webchat__adaptive-card-renderer'),
    onClick: handleClickAndKeyPressForTapAction,
    onKeyPress: handleClickAndKeyPressForTapAction,
    ref: contentRef
  });
};

AdaptiveCardRenderer.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined,
  tapAction: undefined
};
AdaptiveCardRenderer.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  adaptiveCard: _propTypes.default.any.isRequired,
  disabled: _propTypes.default.bool,
  tapAction: _propTypes.default.shape({
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.string
  })
};
var _default = AdaptiveCardRenderer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,