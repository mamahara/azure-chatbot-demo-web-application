"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../hooks/useAdaptiveCardsPackage"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var useDirection = _botframeworkWebchatComponent.hooks.useDirection;

function stripSubmitAction(card) {
  if (!card.actions) {
    return card;
  } // Filter out HTTP action buttons


  var nextActions = card.actions.filter(function (action) {
    return action.type !== 'Action.Submit';
  }).map(function (action) {
    return action.type === 'Action.ShowCard' ? _objectSpread(_objectSpread({}, action), {}, {
      card: stripSubmitAction(action.card)
    }) : action;
  });
  return _objectSpread(_objectSpread({}, card), {}, {
    nextActions: nextActions
  });
}

function updateRTLInline(element, rtl, adaptiveCardsPackage) {
  if (element instanceof adaptiveCardsPackage.Container) {
    element.rtl = rtl;
  } // Tree traversal to add rtl boolean to child elements


  if (element.getItemAt && element.getItemCount) {
    var count = element.getItemCount();

    for (var index = 0; index < count; index++) {
      var child = element.getItemAt(index);
      updateRTLInline(child, rtl, adaptiveCardsPackage);
    }
  }
}

var AdaptiveCardContent = function AdaptiveCardContent(_ref) {
  var actionPerformedClassName = _ref.actionPerformedClassName,
      content = _ref.content,
      disabled = _ref.disabled;

  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];

  var AdaptiveCard = adaptiveCardsPackage.AdaptiveCard;

  var _useDirection = useDirection(),
      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),
      direction = _useDirection2[0];

  var _useMemo = (0, _react.useMemo)(function () {
    if (content) {
      var _card = new AdaptiveCard();

      var errors = []; // TODO: [P3] Move from "onParseError" to "card.parse(json, errors)"

      AdaptiveCard.onParseError = function (error) {
        return errors.push(error);
      };

      _card.parse(stripSubmitAction(_objectSpread({
        version: '1.0'
      }, (0, _typeof2.default)(content) === 'object' ? content : {}))); // Add rtl to Adaptive Card and child elements if Web Chat direction is 'rtl'


      updateRTLInline(_card, direction === 'rtl', adaptiveCardsPackage);
      AdaptiveCard.onParseError = null;
      return {
        card: _card,
        errors: errors
      };
    }

    return {};
  }, [AdaptiveCard, adaptiveCardsPackage, content, direction]),
      card = _useMemo.card;

  return !!card && /*#__PURE__*/_react.default.createElement(_AdaptiveCardRenderer.default, {
    actionPerformedClassName: actionPerformedClassName,
    adaptiveCard: card,
    disabled: disabled
  });
};

AdaptiveCardContent.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined
};
AdaptiveCardContent.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  content: _propTypes.default.any.isRequired,
  disabled: _propTypes.default.bool
};
var _default = AdaptiveCardContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvQWRhcHRpdmVDYXJkQ29udGVudC5qcyJdLCJuYW1lcyI6WyJ1c2VEaXJlY3Rpb24iLCJob29rcyIsInN0cmlwU3VibWl0QWN0aW9uIiwiY2FyZCIsImFjdGlvbnMiLCJuZXh0QWN0aW9ucyIsImZpbHRlciIsImFjdGlvbiIsInR5cGUiLCJtYXAiLCJ1cGRhdGVSVExJbmxpbmUiLCJlbGVtZW50IiwicnRsIiwiYWRhcHRpdmVDYXJkc1BhY2thZ2UiLCJDb250YWluZXIiLCJnZXRJdGVtQXQiLCJnZXRJdGVtQ291bnQiLCJjb3VudCIsImluZGV4IiwiY2hpbGQiLCJBZGFwdGl2ZUNhcmRDb250ZW50IiwiYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lIiwiY29udGVudCIsImRpc2FibGVkIiwiQWRhcHRpdmVDYXJkIiwiZGlyZWN0aW9uIiwiZXJyb3JzIiwib25QYXJzZUVycm9yIiwiZXJyb3IiLCJwdXNoIiwicGFyc2UiLCJ2ZXJzaW9uIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiYW55IiwiaXNSZXF1aXJlZCIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7OztJQUVRQSxZLEdBQWlCQyxtQyxDQUFqQkQsWTs7QUFFUixTQUFTRSxpQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUM7QUFDL0IsTUFBSSxDQUFDQSxJQUFJLENBQUNDLE9BQVYsRUFBbUI7QUFDakIsV0FBT0QsSUFBUDtBQUNELEdBSDhCLENBSy9COzs7QUFDQSxNQUFNRSxXQUFXLEdBQUdGLElBQUksQ0FBQ0MsT0FBTCxDQUNqQkUsTUFEaUIsQ0FDVixVQUFBQyxNQUFNO0FBQUEsV0FBSUEsTUFBTSxDQUFDQyxJQUFQLEtBQWdCLGVBQXBCO0FBQUEsR0FESSxFQUVqQkMsR0FGaUIsQ0FFYixV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QUFtQixDQUFDWSxZQUFwQixHQUFtQztBQUNqQ1gsRUFBQUEsd0JBQXdCLEVBQUUsRUFETztBQUVqQ0UsRUFBQUEsUUFBUSxFQUFFVTtBQUZ1QixDQUFuQztBQUtBYixtQkFBbUIsQ0FBQ2MsU0FBcEIsR0FBZ0M7QUFDOUJiLEVBQUFBLHdCQUF3QixFQUFFYyxtQkFBVUMsTUFETjtBQUU5QmQsRUFBQUEsT0FBTyxFQUFFYSxtQkFBVUUsR0FBVixDQUFjQyxVQUZPO0FBRzlCZixFQUFBQSxRQUFRLEVBQUVZLG1CQUFVSTtBQUhVLENBQWhDO2VBTWVuQixtQiIsInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQWRhcHRpdmVDYXJkUmVuZGVyZXIgZnJvbSAnLi9BZGFwdGl2ZUNhcmRSZW5kZXJlcic7XG5pbXBvcnQgdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UgZnJvbSAnLi4vaG9va3MvdXNlQWRhcHRpdmVDYXJkc1BhY2thZ2UnO1xuXG5pbXBvcnQgeyBob29rcyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvbXBvbmVudCc7XG5cbmNvbnN0IHsgdXNlRGlyZWN0aW9uIH0gPSBob29rcztcblxuZnVuY3Rpb24gc3RyaXBTdWJtaXRBY3Rpb24oY2FyZCkge1xuICBpZiAoIWNhcmQuYWN0aW9ucykge1xuICAgIHJldHVybiBjYXJkO1xuICB9XG5cbiAgLy8gRmlsdGVyIG91dCBIVFRQIGFjdGlvbiBidXR0b25zXG4gIGNvbnN0IG5leHRBY3Rpb25zID0gY2FyZC5hY3Rpb25zXG4gICAgLmZpbHRlcihhY3Rpb24gPT4gYWN0aW9uLnR5cGUgIT09ICdBY3Rpb24uU3VibWl0JylcbiAgICAubWFwKGFjdGlvbiA9PiAoYWN0aW9uLnR5cGUgPT09ICdBY3Rpb24uU2hvd0NhcmQnID8geyAuLi5hY3Rpb24sIGNhcmQ6IHN0cmlwU3VibWl0QWN0aW9uKGFjdGlvbi5jYXJkKSB9IDogYWN0aW9uKSk7XG5cbiAgcmV0dXJuIHsgLi4uY2FyZCwgbmV4dEFjdGlvbnMgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUlRMSW5saW5lKGVsZW1lbnQsIHJ0bCwgYWRhcHRpdmVDYXJkc1BhY2thZ2UpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBhZGFwdGl2ZUNhcmRzUGFja2FnZS5Db250YWluZXIpIHtcbiAgICBlbGVtZW50LnJ0bCA9IHJ0bDtcbiAgfVxuXG4gIC8vIFRyZWUgdHJhdmVyc2FsIHRvIGFkZCBydGwgYm9vbGVhbiB0byBjaGlsZCBlbGVtZW50c1xuICBpZiAoZWxlbWVudC5nZXRJdGVtQXQgJiYgZWxlbWVudC5nZXRJdGVtQ291bnQpIHtcbiAgICBjb25zdCBjb3VudCA9IGVsZW1lbnQuZ2V0SXRlbUNvdW50KCk7XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY291bnQ7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gZWxlbWVudC5nZXRJdGVtQXQoaW5kZXgpO1xuXG4gICAgICB1cGRhdGVSVExJbmxpbmUoY2hpbGQsIHJ0bCwgYWRhcHRpdmVDYXJkc1BhY2thZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBBZGFwdGl2ZUNhcmRDb250ZW50ID0gKHsgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lLCBjb250ZW50LCBkaXNhYmxlZCB9KSA9PiB7XG4gIGNvbnN0IFthZGFwdGl2ZUNhcmRzUGFja2FnZV0gPSB1c2VBZGFwdGl2ZUNhcmRzUGFja2FnZSgpO1xuICBjb25zdCB7IEFkYXB0aXZlQ2FyZCB9ID0gYWRhcHRpdmVDYXJkc1BhY2thZ2U7XG4gIGNvbnN0IFtkaXJlY3Rpb25dID0gdXNlRGlyZWN0aW9uKCk7XG4gIGNvbnN0IHsgY2FyZCB9ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGNvbnN0IGNhcmQgPSBuZXcgQWRhcHRpdmVDYXJkKCk7XG4gICAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgICAgLy8gVE9ETzogW1AzXSBNb3ZlIGZyb20gXCJvblBhcnNlRXJyb3JcIiB0byBcImNhcmQucGFyc2UoanNvbiwgZXJyb3JzKVwiXG4gICAgICBBZGFwdGl2ZUNhcmQub25QYXJzZUVycm9yID0gZXJyb3IgPT4gZXJyb3JzLnB1c2goZXJyb3IpO1xuXG4gICAgICBjYXJkLnBhcnNlKFxuICAgICAgICBzdHJpcFN1Ym1pdEFjdGlvbih7XG4gICAgICAgICAgdmVyc2lvbjogJzEuMCcsXG4gICAgICAgICAgLi4uKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyA/IGNvbnRlbnQgOiB7fSlcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIC8vIEFkZCBydGwgdG8gQWRhcHRpdmUgQ2FyZCBhbmQgY2hpbGQgZWxlbWVudHMgaWYgV2ViIENoYXQgZGlyZWN0aW9uIGlzICdydGwnXG4gICAgICB1cGRhdGVSVExJbmxpbmUoY2FyZCwgZGlyZWN0aW9uID09PSAncnRsJywgYWRhcHRpdmVDYXJkc1BhY2thZ2UpO1xuXG4gICAgICBBZGFwdGl2ZUNhcmQub25QYXJzZUVycm9yID0gbnVsbDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FyZCxcbiAgICAgICAgZXJyb3JzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfSwgW0FkYXB0aXZlQ2FyZCwgYWRhcHRpdmVDYXJkc1BhY2thZ2UsIGNvbnRlbnQsIGRpcmVjdGlvbl0pO1xuXG4gIHJldHVybiAoXG4gICAgISFjYXJkICYmIChcbiAgICAgIDxBZGFwdGl2ZUNhcmRSZW5kZXJlclxuICAgICAgICBhY3Rpb25QZXJmb3JtZWRDbGFzc05hbWU9e2FjdGlvblBlcmZvcm1lZENsYXNzTmFtZX1cbiAgICAgICAgYWRhcHRpdmVDYXJkPXtjYXJkfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAvPlxuICAgIClcbiAgKTtcbn07XG5cbkFkYXB0aXZlQ2FyZENvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhY3Rpb25QZXJmb3JtZWRDbGFzc05hbWU6ICcnLFxuICBkaXNhYmxlZDogdW5kZWZpbmVkXG59O1xuXG5BZGFwdGl2ZUNhcmRDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZW50OiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWRhcHRpdmVDYXJkQ29udGVudDtcbiJdfQ==