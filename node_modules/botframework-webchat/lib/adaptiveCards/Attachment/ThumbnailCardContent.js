"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AdaptiveCardBuilder = _interopRequireDefault(require("./AdaptiveCardBuilder"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

var _useAdaptiveCardsPackage = _interopRequireDefault(require("../hooks/useAdaptiveCardsPackage"));

/* eslint no-magic-numbers: ["error", { "ignore": [25, 75] }] */
var useDirection = _botframeworkWebchatComponent.hooks.useDirection,
    useStyleOptions = _botframeworkWebchatComponent.hooks.useStyleOptions;

var ThumbnailCardContent = function ThumbnailCardContent(_ref) {
  var actionPerformedClassName = _ref.actionPerformedClassName,
      content = _ref.content,
      disabled = _ref.disabled;

  var _useAdaptiveCardsPack = (0, _useAdaptiveCardsPackage.default)(),
      _useAdaptiveCardsPack2 = (0, _slicedToArray2.default)(_useAdaptiveCardsPack, 1),
      adaptiveCardsPackage = _useAdaptiveCardsPack2[0];

  var _useDirection = useDirection(),
      _useDirection2 = (0, _slicedToArray2.default)(_useDirection, 1),
      direction = _useDirection2[0];

  var _useStyleOptions = useStyleOptions(),
      _useStyleOptions2 = (0, _slicedToArray2.default)(_useStyleOptions, 1),
      styleOptions = _useStyleOptions2[0];

  var builtCard = (0, _react.useMemo)(function () {
    if (content) {
      var builder = new _AdaptiveCardBuilder.default(adaptiveCardsPackage, styleOptions, direction);
      var TextSize = adaptiveCardsPackage.TextSize,
          TextWeight = adaptiveCardsPackage.TextWeight;
      var buttons = content.buttons,
          images = content.images,
          subtitle = content.subtitle,
          text = content.text,
          title = content.title;
      var richCardWrapTitle = styleOptions.richCardWrapTitle;

      if (images && images.length) {
        var _builder$addColumnSet = builder.addColumnSet([75, 25]),
            _builder$addColumnSet2 = (0, _slicedToArray2.default)(_builder$addColumnSet, 2),
            firstColumn = _builder$addColumnSet2[0],
            lastColumn = _builder$addColumnSet2[1];

        var _images = (0, _slicedToArray2.default)(images, 1),
            _images$ = _images[0],
            tap = _images$.tap,
            url = _images$.url;

        builder.addTextBlock(title, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder,
          wrap: richCardWrapTitle
        }, firstColumn);
        builder.addTextBlock(subtitle, {
          isSubtle: true,
          wrap: richCardWrapTitle
        }, firstColumn);
        builder.addImage(url, lastColumn, tap);
        builder.addTextBlock(text, {
          wrap: true
        });
        builder.addButtons(buttons);
      } else {
        builder.addCommon(content);
      }

      return builder.card;
    }
  }, [adaptiveCardsPackage, direction, content, styleOptions]);
  return /*#__PURE__*/_react.default.createElement(_AdaptiveCardRenderer.default, {
    actionPerformedClassName: actionPerformedClassName,
    adaptiveCard: builtCard,
    disabled: disabled,
    tapAction: content && content.tap
  });
};

ThumbnailCardContent.defaultProps = {
  actionPerformedClassName: '',
  disabled: undefined
};
ThumbnailCardContent.propTypes = {
  actionPerformedClassName: _propTypes.default.string,
  content: _propTypes.default.shape({
    buttons: _propTypes.default.array,
    images: _propTypes.default.arrayOf(_propTypes.default.shape({
      tap: _propTypes.default.any,
      url: _propTypes.default.string.isRequired
    })),
    subtitle: _propTypes.default.string,
    tap: _propTypes.default.any,
    text: _propTypes.default.string,
    title: _propTypes.default.string
  }).isRequired,
  disabled: _propTypes.default.bool
};
var _default = ThumbnailCardContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvVGh1bWJuYWlsQ2FyZENvbnRlbnQuanMiXSwibmFtZXMiOlsidXNlRGlyZWN0aW9uIiwiaG9va3MiLCJ1c2VTdHlsZU9wdGlvbnMiLCJUaHVtYm5haWxDYXJkQ29udGVudCIsImFjdGlvblBlcmZvcm1lZENsYXNzTmFtZSIsImNvbnRlbnQiLCJkaXNhYmxlZCIsImFkYXB0aXZlQ2FyZHNQYWNrYWdlIiwiZGlyZWN0aW9uIiwic3R5bGVPcHRpb25zIiwiYnVpbHRDYXJkIiwiYnVpbGRlciIsIkFkYXB0aXZlQ2FyZEJ1aWxkZXIiLCJUZXh0U2l6ZSIsIlRleHRXZWlnaHQiLCJidXR0b25zIiwiaW1hZ2VzIiwic3VidGl0bGUiLCJ0ZXh0IiwidGl0bGUiLCJyaWNoQ2FyZFdyYXBUaXRsZSIsImxlbmd0aCIsImFkZENvbHVtblNldCIsImZpcnN0Q29sdW1uIiwibGFzdENvbHVtbiIsInRhcCIsInVybCIsImFkZFRleHRCbG9jayIsInNpemUiLCJNZWRpdW0iLCJ3ZWlnaHQiLCJCb2xkZXIiLCJ3cmFwIiwiaXNTdWJ0bGUiLCJhZGRJbWFnZSIsImFkZEJ1dHRvbnMiLCJhZGRDb21tb24iLCJjYXJkIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwic2hhcGUiLCJhcnJheSIsImFycmF5T2YiLCJhbnkiLCJpc1JlcXVpcmVkIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQVJBO0lBVVFBLFksR0FBa0NDLG1DLENBQWxDRCxZO0lBQWNFLGUsR0FBb0JELG1DLENBQXBCQyxlOztBQUV0QixJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLE9BQXFEO0FBQUEsTUFBbERDLHdCQUFrRCxRQUFsREEsd0JBQWtEO0FBQUEsTUFBeEJDLE9BQXdCLFFBQXhC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QUFRLEVBQUVpQztBQUZ3QixDQUFwQztBQUtBcEMsb0JBQW9CLENBQUNxQyxTQUFyQixHQUFpQztBQUMvQnBDLEVBQUFBLHdCQUF3QixFQUFFcUMsbUJBQVVDLE1BREw7QUFFL0JyQyxFQUFBQSxPQUFPLEVBQUVvQyxtQkFBVUUsS0FBVixDQUFnQjtBQUN2QjVCLElBQUFBLE9BQU8sRUFBRTBCLG1CQUFVRyxLQURJO0FBRXZCNUIsSUFBQUEsTUFBTSxFQUFFeUIsbUJBQVVJLE9BQVYsQ0FDTkosbUJBQVVFLEtBQVYsQ0FBZ0I7QUFDZGxCLE1BQUFBLEdBQUcsRUFBRWdCLG1CQUFVSyxHQUREO0FBRWRwQixNQUFBQSxHQUFHLEVBQUVlLG1CQUFVQyxNQUFWLENBQWlCSztBQUZSLEtBQWhCLENBRE0sQ0FGZTtBQVF2QjlCLElBQUFBLFFBQVEsRUFBRXdCLG1CQUFVQyxNQVJHO0FBU3ZCakIsSUFBQUEsR0FBRyxFQUFFZ0IsbUJBQVVLLEdBVFE7QUFVdkI1QixJQUFBQSxJQUFJLEVBQUV1QixtQkFBVUMsTUFWTztBQVd2QnZCLElBQUFBLEtBQUssRUFBRXNCLG1CQUFVQztBQVhNLEdBQWhCLEVBWU5LLFVBZDRCO0FBZS9CekMsRUFBQUEsUUFBUSxFQUFFbUMsbUJBQVVPO0FBZlcsQ0FBakM7ZUFrQmU3QyxvQiIsInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzI1LCA3NV0gfV0gKi9cblxuaW1wb3J0IHsgaG9va3MgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb21wb25lbnQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQWRhcHRpdmVDYXJkQnVpbGRlciBmcm9tICcuL0FkYXB0aXZlQ2FyZEJ1aWxkZXInO1xuaW1wb3J0IEFkYXB0aXZlQ2FyZFJlbmRlcmVyIGZyb20gJy4vQWRhcHRpdmVDYXJkUmVuZGVyZXInO1xuaW1wb3J0IHVzZUFkYXB0aXZlQ2FyZHNQYWNrYWdlIGZyb20gJy4uL2hvb2tzL3VzZUFkYXB0aXZlQ2FyZHNQYWNrYWdlJztcblxuY29uc3QgeyB1c2VEaXJlY3Rpb24sIHVzZVN0eWxlT3B0aW9ucyB9ID0gaG9va3M7XG5cbmNvbnN0IFRodW1ibmFpbENhcmRDb250ZW50ID0gKHsgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lLCBjb250ZW50LCBkaXNhYmxlZCB9KSA9PiB7XG4gIGNvbnN0IFthZGFwdGl2ZUNhcmRzUGFja2FnZV0gPSB1c2VBZGFwdGl2ZUNhcmRzUGFja2FnZSgpO1xuICBjb25zdCBbZGlyZWN0aW9uXSA9IHVzZURpcmVjdGlvbigpO1xuICBjb25zdCBbc3R5bGVPcHRpb25zXSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuICBjb25zdCBidWlsdENhcmQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoY29udGVudCkge1xuICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBBZGFwdGl2ZUNhcmRCdWlsZGVyKGFkYXB0aXZlQ2FyZHNQYWNrYWdlLCBzdHlsZU9wdGlvbnMsIGRpcmVjdGlvbik7XG4gICAgICBjb25zdCB7IFRleHRTaXplLCBUZXh0V2VpZ2h0IH0gPSBhZGFwdGl2ZUNhcmRzUGFja2FnZTtcbiAgICAgIGNvbnN0IHsgYnV0dG9ucywgaW1hZ2VzLCBzdWJ0aXRsZSwgdGV4dCwgdGl0bGUgfSA9IGNvbnRlbnQ7XG4gICAgICBjb25zdCB7IHJpY2hDYXJkV3JhcFRpdGxlIH0gPSBzdHlsZU9wdGlvbnM7XG5cbiAgICAgIGlmIChpbWFnZXMgJiYgaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBbZmlyc3RDb2x1bW4sIGxhc3RDb2x1bW5dID0gYnVpbGRlci5hZGRDb2x1bW5TZXQoWzc1LCAyNV0pO1xuICAgICAgICBjb25zdCBbeyB0YXAsIHVybCB9XSA9IGltYWdlcztcblxuICAgICAgICBidWlsZGVyLmFkZFRleHRCbG9jayhcbiAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICB7IHNpemU6IFRleHRTaXplLk1lZGl1bSwgd2VpZ2h0OiBUZXh0V2VpZ2h0LkJvbGRlciwgd3JhcDogcmljaENhcmRXcmFwVGl0bGUgfSxcbiAgICAgICAgICBmaXJzdENvbHVtblxuICAgICAgICApO1xuXG4gICAgICAgIGJ1aWxkZXIuYWRkVGV4dEJsb2NrKHN1YnRpdGxlLCB7IGlzU3VidGxlOiB0cnVlLCB3cmFwOiByaWNoQ2FyZFdyYXBUaXRsZSB9LCBmaXJzdENvbHVtbik7XG4gICAgICAgIGJ1aWxkZXIuYWRkSW1hZ2UodXJsLCBsYXN0Q29sdW1uLCB0YXApO1xuICAgICAgICBidWlsZGVyLmFkZFRleHRCbG9jayh0ZXh0LCB7IHdyYXA6IHRydWUgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQnV0dG9ucyhidXR0b25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ29tbW9uKGNvbnRlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1aWxkZXIuY2FyZDtcbiAgICB9XG4gIH0sIFthZGFwdGl2ZUNhcmRzUGFja2FnZSwgZGlyZWN0aW9uLCBjb250ZW50LCBzdHlsZU9wdGlvbnNdKTtcblxuICByZXR1cm4gKFxuICAgIDxBZGFwdGl2ZUNhcmRSZW5kZXJlclxuICAgICAgYWN0aW9uUGVyZm9ybWVkQ2xhc3NOYW1lPXthY3Rpb25QZXJmb3JtZWRDbGFzc05hbWV9XG4gICAgICBhZGFwdGl2ZUNhcmQ9e2J1aWx0Q2FyZH1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIHRhcEFjdGlvbj17Y29udGVudCAmJiBjb250ZW50LnRhcH1cbiAgICAvPlxuICApO1xufTtcblxuVGh1bWJuYWlsQ2FyZENvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhY3Rpb25QZXJmb3JtZWRDbGFzc05hbWU6ICcnLFxuICBkaXNhYmxlZDogdW5kZWZpbmVkXG59O1xuXG5UaHVtYm5haWxDYXJkQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIGFjdGlvblBlcmZvcm1lZENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGVudDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBidXR0b25zOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW1hZ2VzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIHRhcDogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgdXJsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgICAgIH0pXG4gICAgKSxcbiAgICBzdWJ0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0YXA6IFByb3BUeXBlcy5hbnksXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZ1xuICB9KS5pc1JlcXVpcmVkLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRodW1ibmFpbENhcmRDb250ZW50O1xuIl19