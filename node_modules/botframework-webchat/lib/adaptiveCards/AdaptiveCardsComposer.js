"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var defaultAdaptiveCardsPackage = _interopRequireWildcard(require("adaptivecards"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AdaptiveCardsContext = _interopRequireDefault(require("./AdaptiveCardsContext"));

var AdaptiveCardsComposer = function AdaptiveCardsComposer(_ref) {
  var adaptiveCardsHostConfig = _ref.adaptiveCardsHostConfig,
      adaptiveCardsPackage = _ref.adaptiveCardsPackage,
      children = _ref.children;
  var patchedAdaptiveCardsPackage = (0, _react.useMemo)(function () {
    return adaptiveCardsPackage || defaultAdaptiveCardsPackage;
  }, [adaptiveCardsPackage]);
  var adaptiveCardsContext = (0, _react.useMemo)(function () {
    return {
      adaptiveCardsPackage: patchedAdaptiveCardsPackage,
      hostConfigFromProps: adaptiveCardsHostConfig
    };
  }, [adaptiveCardsHostConfig, patchedAdaptiveCardsPackage]);
  return /*#__PURE__*/_react.default.createElement(_AdaptiveCardsContext.default.Provider, {
    value: adaptiveCardsContext
  }, children);
};

AdaptiveCardsComposer.defaultProps = {
  adaptiveCardsHostConfig: undefined,
  adaptiveCardsPackage: undefined,
  children: undefined
};
AdaptiveCardsComposer.propTypes = {
  adaptiveCardsHostConfig: _propTypes.default.any,
  adaptiveCardsPackage: _propTypes.default.any,
  children: _propTypes.default.any
};
var _default = AdaptiveCardsComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0FkYXB0aXZlQ2FyZHNDb21wb3Nlci5qcyJdLCJuYW1lcyI6WyJBZGFwdGl2ZUNhcmRzQ29tcG9zZXIiLCJhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyIsImFkYXB0aXZlQ2FyZHNQYWNrYWdlIiwiY2hpbGRyZW4iLCJwYXRjaGVkQWRhcHRpdmVDYXJkc1BhY2thZ2UiLCJkZWZhdWx0QWRhcHRpdmVDYXJkc1BhY2thZ2UiLCJhZGFwdGl2ZUNhcmRzQ29udGV4dCIsImhvc3RDb25maWdGcm9tUHJvcHMiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUEsSUFBTUEscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixPQUFpRTtBQUFBLE1BQTlEQyx1QkFBOEQsUUFBOURBLHVCQUE4RDtBQUFBLE1BQXJDQyxvQkFBcUMsUUFBckNBLG9CQUFxQztBQUFBLE1BQWZDLFFBQWUsUUFBZkEsUUFBZTtBQUM3RixNQUFNQywyQkFBMkIsR0FBRyxvQkFBUTtBQUFBLFdBQU1GLG9CQUFvQixJQUFJRywyQkFBOUI7QUFBQSxHQUFSLEVBQW1FLENBQ3JHSCxvQkFEcUcsQ0FBbkUsQ0FBcEM7QUFJQSxNQUFNSSxvQkFBb0IsR0FBRyxvQkFDM0I7QUFBQSxXQUFPO0FBQ0xKLE1BQUFBLG9CQUFvQixFQUFFRSwyQkFEakI7QUFFTEcsTUFBQUEsbUJBQW1CLEVBQUVOO0FBRmhCLEtBQVA7QUFBQSxHQUQyQixFQUszQixDQUFDQSx1QkFBRCxFQUEwQkcsMkJBQTFCLENBTDJCLENBQTdCO0FBUUEsc0JBQU8sNkJBQUMsNkJBQUQsQ0FBc0IsUUFBdEI7QUFBK0IsSUFBQSxLQUFLLEVBQUVFO0FBQXRDLEtBQTZESCxRQUE3RCxDQUFQO0FBQ0QsQ0FkRDs7QUFnQkFILHFCQUFxQixDQUFDUSxZQUF0QixHQUFxQztBQUNuQ1AsRUFBQUEsdUJBQXVCLEVBQUVRLFNBRFU7QUFFbkNQLEVBQUFBLG9CQUFvQixFQUFFTyxTQUZhO0FBR25DTixFQUFBQSxRQUFRLEVBQUVNO0FBSHlCLENBQXJDO0FBTUFULHFCQUFxQixDQUFDVSxTQUF0QixHQUFrQztBQUNoQ1QsRUFBQUEsdUJBQXVCLEVBQUVVLG1CQUFVQyxHQURIO0FBRWhDVixFQUFBQSxvQkFBb0IsRUFBRVMsbUJBQVVDLEdBRkE7QUFHaENULEVBQUFBLFFBQVEsRUFBRVEsbUJBQVVDO0FBSFksQ0FBbEM7ZUFNZVoscUIiLCJzb3VyY2VSb290IjoiYnVuZGxlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRlZmF1bHRBZGFwdGl2ZUNhcmRzUGFja2FnZSBmcm9tICdhZGFwdGl2ZWNhcmRzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFkYXB0aXZlQ2FyZHNDb250ZXh0IGZyb20gJy4vQWRhcHRpdmVDYXJkc0NvbnRleHQnO1xuXG5jb25zdCBBZGFwdGl2ZUNhcmRzQ29tcG9zZXIgPSAoeyBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZywgYWRhcHRpdmVDYXJkc1BhY2thZ2UsIGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgcGF0Y2hlZEFkYXB0aXZlQ2FyZHNQYWNrYWdlID0gdXNlTWVtbygoKSA9PiBhZGFwdGl2ZUNhcmRzUGFja2FnZSB8fCBkZWZhdWx0QWRhcHRpdmVDYXJkc1BhY2thZ2UsIFtcbiAgICBhZGFwdGl2ZUNhcmRzUGFja2FnZVxuICBdKTtcblxuICBjb25zdCBhZGFwdGl2ZUNhcmRzQ29udGV4dCA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGFkYXB0aXZlQ2FyZHNQYWNrYWdlOiBwYXRjaGVkQWRhcHRpdmVDYXJkc1BhY2thZ2UsXG4gICAgICBob3N0Q29uZmlnRnJvbVByb3BzOiBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZ1xuICAgIH0pLFxuICAgIFthZGFwdGl2ZUNhcmRzSG9zdENvbmZpZywgcGF0Y2hlZEFkYXB0aXZlQ2FyZHNQYWNrYWdlXVxuICApO1xuXG4gIHJldHVybiA8QWRhcHRpdmVDYXJkc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2FkYXB0aXZlQ2FyZHNDb250ZXh0fT57Y2hpbGRyZW59PC9BZGFwdGl2ZUNhcmRzQ29udGV4dC5Qcm92aWRlcj47XG59O1xuXG5BZGFwdGl2ZUNhcmRzQ29tcG9zZXIuZGVmYXVsdFByb3BzID0ge1xuICBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZzogdW5kZWZpbmVkLFxuICBhZGFwdGl2ZUNhcmRzUGFja2FnZTogdW5kZWZpbmVkLFxuICBjaGlsZHJlbjogdW5kZWZpbmVkXG59O1xuXG5BZGFwdGl2ZUNhcmRzQ29tcG9zZXIucHJvcFR5cGVzID0ge1xuICBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZzogUHJvcFR5cGVzLmFueSxcbiAgYWRhcHRpdmVDYXJkc1BhY2thZ2U6IFByb3BUeXBlcy5hbnksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBZGFwdGl2ZUNhcmRzQ29tcG9zZXI7XG4iXX0=