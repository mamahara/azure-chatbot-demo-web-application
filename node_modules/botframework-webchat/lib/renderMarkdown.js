"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

var _markdownItForInline = _interopRequireDefault(require("markdown-it-for-inline"));

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var _markdownItAttrsEs = _interopRequireDefault(require("markdown-it-attrs-es5"));

var _sanitizeHtml = _interopRequireDefault(require("sanitize-html"));

/* eslint no-magic-numbers: ["error", { "ignore": [1] }] */
var SANITIZE_HTML_OPTIONS = {
  allowedAttributes: {
    a: ['aria-label', 'href', 'name', 'rel', 'target', 'title'],
    img: ['alt', 'src']
  },
  allowedSchemes: ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'],
  allowedTags: ['a', 'b', 'blockquote', 'br', 'caption', 'code', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'li', 'nl', 'ol', 'p', 'pre', 'span', 'strike', 'strong', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul']
};
var customMarkdownIt = new _markdownIt.default({
  breaks: false,
  html: false,
  linkify: true,
  typographer: true,
  xhtmlOut: true
}).use(_markdownItAttrsEs.default).use(_markdownItForInline.default, 'url_new_win', 'link_open', function (tokens, index) {
  // TODO: [P4] This is copied from v3 and looks clunky
  //       We should refactor this code
  var targetAttrIndex = tokens[index].attrIndex('target');

  if (~targetAttrIndex) {
    tokens[index].attrs[targetAttrIndex][1] = '_blank';
  } else {
    tokens[index].attrPush(['target', '_blank']);
  }

  var relAttrIndex = tokens[index].attrIndex('rel');

  if (~relAttrIndex) {
    tokens[index].attrs[relAttrIndex][1] = 'noopener noreferrer';
  } else {
    tokens[index].attrPush(['rel', 'noopener noreferrer']);
  }
});

function render(markdown, _ref) {
  var markdownRespectCRLF = _ref.markdownRespectCRLF;

  if (markdownRespectCRLF) {
    markdown = markdown.replace(/\n\r|\r\n/g, function (carriageReturn) {
      return carriageReturn === '\n\r' ? '\r\n' : '\n\r';
    });
  }

  var html = customMarkdownIt.render(markdown);
  return (0, _sanitizeHtml.default)(html, SANITIZE_HTML_OPTIONS);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXJNYXJrZG93bi5qcyJdLCJuYW1lcyI6WyJTQU5JVElaRV9IVE1MX09QVElPTlMiLCJhbGxvd2VkQXR0cmlidXRlcyIsImEiLCJpbWciLCJhbGxvd2VkU2NoZW1lcyIsImFsbG93ZWRUYWdzIiwiY3VzdG9tTWFya2Rvd25JdCIsIk1hcmtkb3duSXQiLCJicmVha3MiLCJodG1sIiwibGlua2lmeSIsInR5cG9ncmFwaGVyIiwieGh0bWxPdXQiLCJ1c2UiLCJtYXJrZG93bkl0QXR0cnMiLCJpdGVyYXRvciIsInRva2VucyIsImluZGV4IiwidGFyZ2V0QXR0ckluZGV4IiwiYXR0ckluZGV4IiwiYXR0cnMiLCJhdHRyUHVzaCIsInJlbEF0dHJJbmRleCIsInJlbmRlciIsIm1hcmtkb3duIiwibWFya2Rvd25SZXNwZWN0Q1JMRiIsInJlcGxhY2UiLCJjYXJyaWFnZVJldHVybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBTEE7QUFPQSxJQUFNQSxxQkFBcUIsR0FBRztBQUM1QkMsRUFBQUEsaUJBQWlCLEVBQUU7QUFDakJDLElBQUFBLENBQUMsRUFBRSxDQUFDLFlBQUQsRUFBZSxNQUFmLEVBQXVCLE1BQXZCLEVBQStCLEtBQS9CLEVBQXNDLFFBQXRDLEVBQWdELE9BQWhELENBRGM7QUFFakJDLElBQUFBLEdBQUcsRUFBRSxDQUFDLEtBQUQsRUFBUSxLQUFSO0FBRlksR0FEUztBQUs1QkMsRUFBQUEsY0FBYyxFQUFFLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsS0FBM0MsRUFBa0QsS0FBbEQsQ0FMWTtBQU01QkMsRUFBQUEsV0FBVyxFQUFFLENBQ1gsR0FEVyxFQUVYLEdBRlcsRUFHWCxZQUhXLEVBSVgsSUFKVyxFQUtYLFNBTFcsRUFNWCxNQU5XLEVBT1gsS0FQVyxFQVFYLElBUlcsRUFTWCxJQVRXLEVBVVgsSUFWVyxFQVdYLElBWFcsRUFZWCxJQVpXLEVBYVgsSUFiVyxFQWNYLElBZFcsRUFlWCxJQWZXLEVBZ0JYLEdBaEJXLEVBaUJYLEtBakJXLEVBa0JYLElBbEJXLEVBbUJYLElBbkJXLEVBb0JYLElBcEJXLEVBcUJYLEdBckJXLEVBc0JYLEtBdEJXLEVBdUJYLE1BdkJXLEVBd0JYLFFBeEJXLEVBeUJYLFFBekJXLEVBMEJYLE9BMUJXLEVBMkJYLE9BM0JXLEVBNEJYLElBNUJXLEVBNkJYLE9BN0JXLEVBOEJYLElBOUJXLEVBK0JYLE9BL0JXLEVBZ0NYLElBaENXLEVBaUNYLElBakNXO0FBTmUsQ0FBOUI7QUEyQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUMsbUJBQUosQ0FBZTtBQUN0Q0MsRUFBQUEsTUFBTSxFQUFFLEtBRDhCO0FBRXRDQyxFQUFBQSxJQUFJLEVBQUUsS0FGZ0M7QUFHdENDLEVBQUFBLE9BQU8sRUFBRSxJQUg2QjtBQUl0Q0MsRUFBQUEsV0FBVyxFQUFFLElBSnlCO0FBS3RDQyxFQUFBQSxRQUFRLEVBQUU7QUFMNEIsQ0FBZixFQU90QkMsR0FQc0IsQ0FPbEJDLDBCQVBrQixFQVF0QkQsR0FSc0IsQ0FRbEJFLDRCQVJrQixFQVFSLGFBUlEsRUFRTyxXQVJQLEVBUW9CLFVBQUNDLE1BQUQsRUFBU0MsS0FBVCxFQUFtQjtBQUM1RDtBQUNBO0FBQ0EsTUFBTUMsZUFBZSxHQUFHRixNQUFNLENBQUNDLEtBQUQsQ0FBTixDQUFjRSxTQUFkLENBQXdCLFFBQXhCLENBQXhCOztBQUVBLE1BQUksQ0FBQ0QsZUFBTCxFQUFzQjtBQUNwQkYsSUFBQUEsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0csS0FBZCxDQUFvQkYsZUFBcEIsRUFBcUMsQ0FBckMsSUFBMEMsUUFBMUM7QUFDRCxHQUZELE1BRU87QUFDTEYsSUFBQUEsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0ksUUFBZCxDQUF1QixDQUFDLFFBQUQsRUFBVyxRQUFYLENBQXZCO0FBQ0Q7O0FBRUQsTUFBTUMsWUFBWSxHQUFHTixNQUFNLENBQUNDLEtBQUQsQ0FBTixDQUFjRSxTQUFkLENBQXdCLEtBQXhCLENBQXJCOztBQUVBLE1BQUksQ0FBQ0csWUFBTCxFQUFtQjtBQUNqQk4sSUFBQUEsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0csS0FBZCxDQUFvQkUsWUFBcEIsRUFBa0MsQ0FBbEMsSUFBdUMscUJBQXZDO0FBQ0QsR0FGRCxNQUVPO0FBQ0xOLElBQUFBLE1BQU0sQ0FBQ0MsS0FBRCxDQUFOLENBQWNJLFFBQWQsQ0FBdUIsQ0FBQyxLQUFELEVBQVEscUJBQVIsQ0FBdkI7QUFDRDtBQUNGLENBMUJzQixDQUF6Qjs7QUE0QmUsU0FBU0UsTUFBVCxDQUFnQkMsUUFBaEIsUUFBbUQ7QUFBQSxNQUF2QkMsbUJBQXVCLFFBQXZCQSxtQkFBdUI7O0FBQ2hFLE1BQUlBLG1CQUFKLEVBQXlCO0FBQ3ZCRCxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixZQUFqQixFQUFnQyxVQUFBQyxjQUFjO0FBQUEsYUFBS0EsY0FBYyxLQUFLLE1BQW5CLEdBQTRCLE1BQTVCLEdBQXFDLE1BQTFDO0FBQUEsS0FBOUMsQ0FBWDtBQUNEOztBQUVELE1BQU1sQixJQUFJLEdBQUdILGdCQUFnQixDQUFDaUIsTUFBakIsQ0FBd0JDLFFBQXhCLENBQWI7QUFFQSxTQUFPLDJCQUFhZixJQUFiLEVBQW1CVCxxQkFBbkIsQ0FBUDtBQUNEIiwic291cmNlUm9vdCI6ImJ1bmRsZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbMV0gfV0gKi9cblxuaW1wb3J0IGl0ZXJhdG9yIGZyb20gJ21hcmtkb3duLWl0LWZvci1pbmxpbmUnO1xuaW1wb3J0IE1hcmtkb3duSXQgZnJvbSAnbWFya2Rvd24taXQnO1xuaW1wb3J0IG1hcmtkb3duSXRBdHRycyBmcm9tICdtYXJrZG93bi1pdC1hdHRycy1lczUnO1xuaW1wb3J0IHNhbml0aXplSFRNTCBmcm9tICdzYW5pdGl6ZS1odG1sJztcblxuY29uc3QgU0FOSVRJWkVfSFRNTF9PUFRJT05TID0ge1xuICBhbGxvd2VkQXR0cmlidXRlczoge1xuICAgIGE6IFsnYXJpYS1sYWJlbCcsICdocmVmJywgJ25hbWUnLCAncmVsJywgJ3RhcmdldCcsICd0aXRsZSddLFxuICAgIGltZzogWydhbHQnLCAnc3JjJ11cbiAgfSxcbiAgYWxsb3dlZFNjaGVtZXM6IFsnZGF0YScsICdodHRwJywgJ2h0dHBzJywgJ2Z0cCcsICdtYWlsdG8nLCAnc2lwJywgJ3RlbCddLFxuICBhbGxvd2VkVGFnczogW1xuICAgICdhJyxcbiAgICAnYicsXG4gICAgJ2Jsb2NrcXVvdGUnLFxuICAgICdicicsXG4gICAgJ2NhcHRpb24nLFxuICAgICdjb2RlJyxcbiAgICAnZGl2JyxcbiAgICAnZW0nLFxuICAgICdoMScsXG4gICAgJ2gyJyxcbiAgICAnaDMnLFxuICAgICdoNCcsXG4gICAgJ2g1JyxcbiAgICAnaDYnLFxuICAgICdocicsXG4gICAgJ2knLFxuICAgICdpbWcnLFxuICAgICdsaScsXG4gICAgJ25sJyxcbiAgICAnb2wnLFxuICAgICdwJyxcbiAgICAncHJlJyxcbiAgICAnc3BhbicsXG4gICAgJ3N0cmlrZScsXG4gICAgJ3N0cm9uZycsXG4gICAgJ3RhYmxlJyxcbiAgICAndGJvZHknLFxuICAgICd0ZCcsXG4gICAgJ3Rmb290JyxcbiAgICAndGgnLFxuICAgICd0aGVhZCcsXG4gICAgJ3RyJyxcbiAgICAndWwnXG4gIF1cbn07XG5cbmNvbnN0IGN1c3RvbU1hcmtkb3duSXQgPSBuZXcgTWFya2Rvd25JdCh7XG4gIGJyZWFrczogZmFsc2UsXG4gIGh0bWw6IGZhbHNlLFxuICBsaW5raWZ5OiB0cnVlLFxuICB0eXBvZ3JhcGhlcjogdHJ1ZSxcbiAgeGh0bWxPdXQ6IHRydWVcbn0pXG4gIC51c2UobWFya2Rvd25JdEF0dHJzKVxuICAudXNlKGl0ZXJhdG9yLCAndXJsX25ld193aW4nLCAnbGlua19vcGVuJywgKHRva2VucywgaW5kZXgpID0+IHtcbiAgICAvLyBUT0RPOiBbUDRdIFRoaXMgaXMgY29waWVkIGZyb20gdjMgYW5kIGxvb2tzIGNsdW5reVxuICAgIC8vICAgICAgIFdlIHNob3VsZCByZWZhY3RvciB0aGlzIGNvZGVcbiAgICBjb25zdCB0YXJnZXRBdHRySW5kZXggPSB0b2tlbnNbaW5kZXhdLmF0dHJJbmRleCgndGFyZ2V0Jyk7XG5cbiAgICBpZiAofnRhcmdldEF0dHJJbmRleCkge1xuICAgICAgdG9rZW5zW2luZGV4XS5hdHRyc1t0YXJnZXRBdHRySW5kZXhdWzFdID0gJ19ibGFuayc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRva2Vuc1tpbmRleF0uYXR0clB1c2goWyd0YXJnZXQnLCAnX2JsYW5rJ10pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbEF0dHJJbmRleCA9IHRva2Vuc1tpbmRleF0uYXR0ckluZGV4KCdyZWwnKTtcblxuICAgIGlmICh+cmVsQXR0ckluZGV4KSB7XG4gICAgICB0b2tlbnNbaW5kZXhdLmF0dHJzW3JlbEF0dHJJbmRleF1bMV0gPSAnbm9vcGVuZXIgbm9yZWZlcnJlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRva2Vuc1tpbmRleF0uYXR0clB1c2goWydyZWwnLCAnbm9vcGVuZXIgbm9yZWZlcnJlciddKTtcbiAgICB9XG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIobWFya2Rvd24sIHsgbWFya2Rvd25SZXNwZWN0Q1JMRiB9KSB7XG4gIGlmIChtYXJrZG93blJlc3BlY3RDUkxGKSB7XG4gICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC9cXG5cXHJ8XFxyXFxuL2d1LCBjYXJyaWFnZVJldHVybiA9PiAoY2FycmlhZ2VSZXR1cm4gPT09ICdcXG5cXHInID8gJ1xcclxcbicgOiAnXFxuXFxyJykpO1xuICB9XG5cbiAgY29uc3QgaHRtbCA9IGN1c3RvbU1hcmtkb3duSXQucmVuZGVyKG1hcmtkb3duKTtcblxuICByZXR1cm4gc2FuaXRpemVIVE1MKGh0bWwsIFNBTklUSVpFX0hUTUxfT1BUSU9OUyk7XG59XG4iXX0=