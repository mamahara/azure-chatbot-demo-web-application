"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _react = _interopRequireDefault(require("react"));

var browser = _interopRequireWildcard(require("./browser"));

var _best = _interopRequireDefault(require("./best"));

var _Context = _interopRequireDefault(require("./Context"));

var _ScrollSpy = _interopRequireDefault(require("./ScrollSpy"));

var _ScrollTo = _interopRequireDefault(require("./ScrollTo"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function getView(dir) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      scrollable = _ref.current;

  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      itemContainer = _ref2.current;

  var scrollingTo = arguments.length > 3 ? arguments[3] : undefined;
  var rtl = dir === 'rtl';

  if (itemContainer && scrollable) {
    var scrollLeft = scrollingTo || scrollable.scrollLeft;
    var trueScrollLeft = rtl ? browser.chrome ? scrollLeft - (scrollable.scrollWidth - scrollable.offsetWidth) : browser.edgeUWP || browser.internetExplorer ? -scrollLeft : scrollLeft : scrollLeft;
    var items = itemContainer.children; // This will enumerate <li> inside <FilmStrip>

    var scrollCenter = trueScrollLeft + scrollable.offsetWidth / 2;
    var index = (0, _best.default)([].slice.call(items), function (item) {
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      return 1 / Math.abs(scrollCenter - offsetCenter);
    });

    if (~index) {
      var item = items[index];
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      var indexFraction = index + (scrollCenter - offsetCenter) / item.offsetWidth * (rtl ? -1 : 1); // We "fix" indexFraction if the viewport is at the start/end of the content
      // This is to simplify code that use Math.round(indexFraction) to find the scrollable index
      // if (scrollLeft === 0) {
      //   indexFraction = 0;
      // } else if (scrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {
      //   indexFraction = items.length - 1;
      // } else if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {
      //   indexFraction = Math.round(indexFraction);
      // }

      if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {
        indexFraction = Math.round(indexFraction);
      }

      var selectedIndex;

      if (Math.abs(trueScrollLeft) < 1) {
        selectedIndex = 0;
      } else if (rtl ? trueScrollLeft <= scrollable.offsetWidth - scrollable.scrollWidth : trueScrollLeft >= scrollable.scrollWidth - scrollable.offsetWidth) {
        selectedIndex = items.length - 1;
      } else {
        selectedIndex = Math.round(indexFraction);
      }

      return {
        index: selectedIndex,
        indexFraction: indexFraction
      };
    }
  }
}

function getScrollLeft(dir) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      scrollable = _ref3.current;

  var _ref4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      itemContainer = _ref4.current;

  var index = arguments.length > 3 ? arguments[3] : undefined;
  var rtl = dir === 'rtl';

  if (itemContainer && scrollable) {
    var items = itemContainer.children; // This will enumerate <li> inside <FilmStrip>

    var item = items[Math.max(0, Math.min(items.length - 1, index))];

    if (item) {
      if (scrollable.offsetWidth === scrollable.scrollWidth) {
        return 0;
      }

      var result = item.offsetLeft + (item.offsetWidth - scrollable.offsetWidth) / 2;

      if (rtl) {
        result = Math.min(result, 0);
        result = Math.max(result, scrollable.offsetWidth - scrollable.scrollWidth);
      } else {
        result = Math.max(result, 0);
        result = Math.min(result, scrollable.scrollWidth - scrollable.offsetWidth);
      }

      if (rtl) {
        if (browser.chrome) {
          result += scrollable.scrollWidth - scrollable.offsetWidth;
        } else if (browser.edgeUWP || browser.internetExplorer) {
          result = -result;
        }
      }

      return result;
    }
  }
}

var FilmComposer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FilmComposer, _React$Component);

  function FilmComposer(props) {
    var _this;

    _classCallCheck(this, FilmComposer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilmComposer).call(this, props));
    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_this));
    _this.handleScrollToEnd = _this.handleScrollToEnd.bind(_assertThisInitialized(_this));
    _this.itemContainerRef = _react.default.createRef();
    _this.scrollableRef = _react.default.createRef();
    _this.mergeContext = (0, _memoizeOne.default)(function (state, dir) {
      var numItems = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      return _objectSpread({}, state, {
        dir: dir,
        numItems: numItems
      });
    });
    _this.state = {
      context: {
        itemContainerRef: _this.itemContainerRef,
        scrollableRef: _this.scrollableRef,
        scrollBarPercentage: '0%',
        scrollBarWidth: '0%',
        scrolling: false,
        scrollTo: function scrollTo(_scrollTo) {
          _this.setState(function (state) {
            var view = getView(_this.props.dir, _this.scrollableRef, _this.itemContainerRef, state.scrollLeft);

            if (view) {
              var index = view.index,
                  indexFraction = view.indexFraction;

              var targetIndex = _scrollTo({
                index: index,
                indexFraction: indexFraction
              });

              if (typeof targetIndex === 'number') {
                return {
                  scrollLeft: getScrollLeft(_this.props.dir, _this.scrollableRef, _this.itemContainerRef, targetIndex)
                };
              }
            }
          });
        },
        scrollOneLeft: function scrollOneLeft() {
          if (_this.props.dir === 'rtl') {
            _this.state.context.scrollTo(function (_ref5) {
              var indexFraction = _ref5.indexFraction;
              return Math.floor(indexFraction) + 1;
            });
          } else {
            _this.state.context.scrollTo(function (_ref6) {
              var indexFraction = _ref6.indexFraction;
              return Math.ceil(indexFraction) - 1;
            });
          }
        },
        scrollOneRight: function scrollOneRight() {
          if (_this.props.dir === 'rtl') {
            _this.state.context.scrollTo(function (_ref7) {
              var indexFraction = _ref7.indexFraction;
              return Math.ceil(indexFraction) - 1;
            });
          } else {
            _this.state.context.scrollTo(function (_ref8) {
              var indexFraction = _ref8.indexFraction;
              return Math.floor(indexFraction) + 1;
            });
          }
        }
      },
      scrollLeft: null
    };
    return _this;
  }

  _createClass(FilmComposer, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.scrollTimeout);
    }
  }, {
    key: "handleScroll",
    value: function handleScroll(_ref9) {
      var _this2 = this;

      var scrollBarPercentage = _ref9.fraction,
          initial = _ref9.initial,
          scrollBarWidth = _ref9.width;
      this.setState(function (_ref10) {
        var context = _ref10.context,
            scrollLeft = _ref10.scrollLeft;
        var view = getView(_this2.props.dir, _this2.scrollableRef, _this2.itemContainerRef, scrollLeft);

        if (view) {
          var index = view.index,
              indexFraction = view.indexFraction;
          return {
            context: _objectSpread({}, context, {
              index: index,
              indexFraction: indexFraction,
              scrolling: !initial,
              scrollBarPercentage: scrollBarPercentage,
              scrollBarWidth: scrollBarWidth
            })
          };
        }
      });

      if (!initial) {
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = setTimeout(function () {
          _this2.setState(function (_ref11) {
            var context = _ref11.context;
            return {
              context: _objectSpread({}, context, {
                scrolling: false
              })
            };
          });
        }, 500);
      }
    }
  }, {
    key: "handleScrollToEnd",
    value: function handleScrollToEnd() {
      this.setState(function () {
        return {
          scrollLeft: null
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          dir = _this$props.dir,
          numItems = _this$props.numItems,
          scrollableRef = this.scrollableRef,
          _this$state = this.state,
          context = _this$state.context,
          scrollLeft = _this$state.scrollLeft;
      return _react.default.createElement(_Context.default.Provider, {
        value: this.mergeContext(context, dir, numItems)
      }, children, _react.default.createElement(_ScrollSpy.default, {
        onScroll: this.handleScroll,
        targetRef: scrollableRef
      }), typeof scrollLeft === 'number' && _react.default.createElement(_ScrollTo.default, {
        onEnd: this.handleScrollToEnd,
        scrollLeft: scrollLeft,
        targetRef: scrollableRef
      }));
    }
  }]);

  return FilmComposer;
}(_react.default.Component);

exports.default = FilmComposer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,