"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLocaleString = getLocaleString;
exports.localize = localize;
Object.defineProperty(exports, "getRTLList", {
  enumerable: true,
  get: function get() {
    return _getRTLList.default;
  }
});
exports.default = void 0;

var _getLocaleString = _interopRequireDefault(require("./getLocaleString"));

var _getAllLocalizedStrings = _interopRequireDefault(require("./getAllLocalizedStrings"));

var _getRTLList = _interopRequireDefault(require("./getRTLList"));

var _normalizeLanguage = _interopRequireDefault(require("../Utils/normalizeLanguage"));

var _useLocalizer = _interopRequireDefault(require("../hooks/useLocalizer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var deprecationNotesShown;

function localize(id, language) {
  if (!deprecationNotesShown) {
    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');
    deprecationNotesShown = true;
  }

  var allStrings = (0, _getAllLocalizedStrings.default)();
  var normalizedLanguage = (0, _normalizeLanguage.default)(language);
  var localizedStrings = allStrings[normalizedLanguage];

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return Object.entries(args).reduce(function (str, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        index = _ref2[0],
        arg = _ref2[1];

    return str.replace("$".concat(+index + 1), arg);
  }, localizedStrings && localizedStrings[id] || allStrings['en-US'][id] || '');
}

function getLocaleString() {
  if (!deprecationNotesShown) {
    console.warn('botframework-webchat: localize() is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');
    deprecationNotesShown = true;
  }

  return _getLocaleString.default.apply(void 0, arguments);
}

var _default = function _default(_ref3) {
  var args = _ref3.args,
      text = _ref3.text;

  if (!deprecationNotesShown) {
    console.warn('botframework-webchat: <Localize> is deprecated. Please use the useLocalizer() hooks instead. This function will be removed on or after 2022-02-12.');
    deprecationNotesShown = true;
  }

  return (0, _useLocalizer.default)().apply(void 0, [text].concat(_toConsumableArray(args || [])));
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vTG9jYWxpemUuanMiXSwibmFtZXMiOlsiZGVwcmVjYXRpb25Ob3Rlc1Nob3duIiwibG9jYWxpemUiLCJpZCIsImxhbmd1YWdlIiwiY29uc29sZSIsIndhcm4iLCJhbGxTdHJpbmdzIiwibm9ybWFsaXplZExhbmd1YWdlIiwibG9jYWxpemVkU3RyaW5ncyIsImFyZ3MiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVkdWNlIiwic3RyIiwiaW5kZXgiLCJhcmciLCJyZXBsYWNlIiwiZ2V0TG9jYWxlU3RyaW5nIiwiZGVwcmVjYXRpbmdHZXRMb2NhbGVTdHJpbmciLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBSUEscUJBQUo7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQkMsRUFBbEIsRUFBc0JDLFFBQXRCLEVBQXlDO0FBQ3ZDLE1BQUksQ0FBQ0gscUJBQUwsRUFBNEI7QUFDMUJJLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLG9KQURGO0FBSUFMLElBQUFBLHFCQUFxQixHQUFHLElBQXhCO0FBQ0Q7O0FBRUQsTUFBTU0sVUFBVSxHQUFHLHNDQUFuQjtBQUNBLE1BQU1DLGtCQUFrQixHQUFHLGdDQUFrQkosUUFBbEIsQ0FBM0I7QUFDQSxNQUFNSyxnQkFBZ0IsR0FBR0YsVUFBVSxDQUFDQyxrQkFBRCxDQUFuQzs7QUFYdUMsb0NBQU5FLElBQU07QUFBTkEsSUFBQUEsSUFBTTtBQUFBOztBQWF2QyxTQUFPQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUYsSUFBZixFQUFxQkcsTUFBckIsQ0FDTCxVQUFDQyxHQUFEO0FBQUE7QUFBQSxRQUFPQyxLQUFQO0FBQUEsUUFBY0MsR0FBZDs7QUFBQSxXQUF1QkYsR0FBRyxDQUFDRyxPQUFKLFlBQWdCLENBQUNGLEtBQUQsR0FBUyxDQUF6QixHQUE4QkMsR0FBOUIsQ0FBdkI7QUFBQSxHQURLLEVBRUpQLGdCQUFnQixJQUFJQSxnQkFBZ0IsQ0FBQ04sRUFBRCxDQUFyQyxJQUE4Q0ksVUFBVSxDQUFDLE9BQUQsQ0FBVixDQUFvQkosRUFBcEIsQ0FBOUMsSUFBeUUsRUFGcEUsQ0FBUDtBQUlEOztBQUVELFNBQVNlLGVBQVQsR0FBa0M7QUFDaEMsTUFBSSxDQUFDakIscUJBQUwsRUFBNEI7QUFDMUJJLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLG9KQURGO0FBSUFMLElBQUFBLHFCQUFxQixHQUFHLElBQXhCO0FBQ0Q7O0FBRUQsU0FBT2tCLGlEQUFQO0FBQ0Q7O2VBRWMseUJBQW9CO0FBQUEsTUFBakJULElBQWlCLFNBQWpCQSxJQUFpQjtBQUFBLE1BQVhVLElBQVcsU0FBWEEsSUFBVzs7QUFDakMsTUFBSSxDQUFDbkIscUJBQUwsRUFBNEI7QUFDMUJJLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLG9KQURGO0FBSUFMLElBQUFBLHFCQUFxQixHQUFHLElBQXhCO0FBQ0Q7O0FBRUQsU0FBTyw0Q0FBZW1CLElBQWYsNEJBQXlCVixJQUFJLElBQUksRUFBakMsR0FBUDtBQUNELEMiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExvY2FsaXplIGlzIGRlc2lnbmVkIHRvIGJlIGVsYWJvcmF0aXZlbHkgcmV0dXJuIG11bHRpcGxlIHJlc3VsdHMgYW5kIHBvc3NpYmx5IGV4Y2VlZGluZyBjb21wbGV4aXR5IHJlcXVpcmVtZW50XG4vKiBlc2xpbnQgY29tcGxleGl0eTogXCJvZmZcIiAqL1xuXG5pbXBvcnQgZGVwcmVjYXRpbmdHZXRMb2NhbGVTdHJpbmcgZnJvbSAnLi9nZXRMb2NhbGVTdHJpbmcnO1xuaW1wb3J0IGdldEFsbExvY2FsaXplZFN0cmluZ3MgZnJvbSAnLi9nZXRBbGxMb2NhbGl6ZWRTdHJpbmdzJztcbmltcG9ydCBnZXRSVExMaXN0IGZyb20gJy4vZ2V0UlRMTGlzdCc7XG5pbXBvcnQgbm9ybWFsaXplTGFuZ3VhZ2UgZnJvbSAnLi4vVXRpbHMvbm9ybWFsaXplTGFuZ3VhZ2UnO1xuaW1wb3J0IHVzZUxvY2FsaXplciBmcm9tICcuLi9ob29rcy91c2VMb2NhbGl6ZXInO1xuXG5sZXQgZGVwcmVjYXRpb25Ob3Rlc1Nob3duO1xuXG5mdW5jdGlvbiBsb2NhbGl6ZShpZCwgbGFuZ3VhZ2UsIC4uLmFyZ3MpIHtcbiAgaWYgKCFkZXByZWNhdGlvbk5vdGVzU2hvd24pIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IGxvY2FsaXplKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0aGUgdXNlTG9jYWxpemVyKCkgaG9va3MgaW5zdGVhZC4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgb24gb3IgYWZ0ZXIgMjAyMi0wMi0xMi4nXG4gICAgKTtcblxuICAgIGRlcHJlY2F0aW9uTm90ZXNTaG93biA9IHRydWU7XG4gIH1cblxuICBjb25zdCBhbGxTdHJpbmdzID0gZ2V0QWxsTG9jYWxpemVkU3RyaW5ncygpO1xuICBjb25zdCBub3JtYWxpemVkTGFuZ3VhZ2UgPSBub3JtYWxpemVMYW5ndWFnZShsYW5ndWFnZSk7XG4gIGNvbnN0IGxvY2FsaXplZFN0cmluZ3MgPSBhbGxTdHJpbmdzW25vcm1hbGl6ZWRMYW5ndWFnZV07XG5cbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGFyZ3MpLnJlZHVjZShcbiAgICAoc3RyLCBbaW5kZXgsIGFyZ10pID0+IHN0ci5yZXBsYWNlKGAkJHsraW5kZXggKyAxfWAsIGFyZyksXG4gICAgKGxvY2FsaXplZFN0cmluZ3MgJiYgbG9jYWxpemVkU3RyaW5nc1tpZF0pIHx8IGFsbFN0cmluZ3NbJ2VuLVVTJ11baWRdIHx8ICcnXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldExvY2FsZVN0cmluZyguLi5hcmdzKSB7XG4gIGlmICghZGVwcmVjYXRpb25Ob3Rlc1Nob3duKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBsb2NhbGl6ZSgpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdGhlIHVzZUxvY2FsaXplcigpIGhvb2tzIGluc3RlYWQuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIG9uIG9yIGFmdGVyIDIwMjItMDItMTIuJ1xuICAgICk7XG5cbiAgICBkZXByZWNhdGlvbk5vdGVzU2hvd24gPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0aW5nR2V0TG9jYWxlU3RyaW5nKC4uLmFyZ3MpO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoeyBhcmdzLCB0ZXh0IH0pID0+IHtcbiAgaWYgKCFkZXByZWNhdGlvbk5vdGVzU2hvd24pIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IDxMb2NhbGl6ZT4gaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0aGUgdXNlTG9jYWxpemVyKCkgaG9va3MgaW5zdGVhZC4gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgb24gb3IgYWZ0ZXIgMjAyMi0wMi0xMi4nXG4gICAgKTtcblxuICAgIGRlcHJlY2F0aW9uTm90ZXNTaG93biA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gdXNlTG9jYWxpemVyKCkodGV4dCwgLi4uKGFyZ3MgfHwgW10pKTtcbn07XG5cbmV4cG9ydCB7IGdldExvY2FsZVN0cmluZywgZ2V0UlRMTGlzdCwgbG9jYWxpemUgfTtcbiJdfQ==