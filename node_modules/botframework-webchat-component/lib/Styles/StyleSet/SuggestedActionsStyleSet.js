"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createSuggestedActionsStyleSet;

var _glamor = require("glamor");

var _reactFilm = require("react-film");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createSuggestedActionsStyleSet(_ref) {
  var _hoverScrolling;

  var paddingRegular = _ref.paddingRegular,
      transcriptOverlayButtonBackground = _ref.transcriptOverlayButtonBackground,
      transcriptOverlayButtonBackgroundOnDisabled = _ref.transcriptOverlayButtonBackgroundOnDisabled,
      transcriptOverlayButtonBackgroundOnFocus = _ref.transcriptOverlayButtonBackgroundOnFocus,
      transcriptOverlayButtonBackgroundOnHover = _ref.transcriptOverlayButtonBackgroundOnHover,
      transcriptOverlayButtonColor = _ref.transcriptOverlayButtonColor,
      transcriptOverlayButtonColorOnDisabled = _ref.transcriptOverlayButtonColorOnDisabled,
      transcriptOverlayButtonColorOnFocus = _ref.transcriptOverlayButtonColorOnFocus,
      transcriptOverlayButtonColorOnHover = _ref.transcriptOverlayButtonColorOnHover;
  var originalStyleSet = (0, _reactFilm.createBasicStyleSet)({
    cursor: null,
    flipperBoxWidth: 40,
    flipperSize: 20,
    scrollBarHeight: 6,
    scrollBarMargin: 2
  });
  var flipper = (0, _glamor.css)({
    '& > div.slider > div': {
      background: transcriptOverlayButtonBackground,
      color: transcriptOverlayButtonColor,
      outline: 0
    },
    '&:disabled, &[aria-disabled="true"]': {
      '& > div.slider > div': {
        backgroundColor: transcriptOverlayButtonBackgroundOnDisabled,
        color: transcriptOverlayButtonColorOnDisabled
      }
    },
    '&:focus > div.slider > div': {
      backgroundColor: transcriptOverlayButtonBackgroundOnFocus,
      color: transcriptOverlayButtonColorOnFocus || transcriptOverlayButtonColor
    },
    '&:hover > div.slider > div': {
      backgroundColor: transcriptOverlayButtonBackgroundOnHover,
      color: transcriptOverlayButtonColorOnHover || transcriptOverlayButtonColor
    }
  });
  var leftFlipper = (0, _glamor.css)(originalStyleSet.leftFlipper, flipper);
  var rightFlipper = (0, _glamor.css)(originalStyleSet.rightFlipper, flipper);
  var carousel = (0, _glamor.css)(originalStyleSet.carousel, {
    '&:hover, &.scrolling': (_hoverScrolling = {}, _defineProperty(_hoverScrolling, "& .".concat(leftFlipper + '', " > div.slider, & .").concat(rightFlipper + '', " > div.slider"), {
      transitionDelay: '0s'
    }), _defineProperty(_hoverScrolling, "& .".concat(leftFlipper + '', " > div.slider"), {
      left: 0
    }), _defineProperty(_hoverScrolling, "& .".concat(rightFlipper + '', " > div.slider"), {
      right: 0
    }), _hoverScrolling),
    '& > div': {
      scrollbarWidth: 'none',
      '& > ul > li': {
        '&:first-child': {
          paddingLeft: paddingRegular / 2
        },
        '&:last-child': {
          paddingRight: paddingRegular / 2
        }
      }
    }
  }); // This is not CSS, but options to create style set for react-film

  return _objectSpread(_objectSpread({}, originalStyleSet), {}, {
    carousel: carousel,
    leftFlipper: leftFlipper,
    rightFlipper: rightFlipper
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TdHlsZXMvU3R5bGVTZXQvU3VnZ2VzdGVkQWN0aW9uc1N0eWxlU2V0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZVN1Z2dlc3RlZEFjdGlvbnNTdHlsZVNldCIsInBhZGRpbmdSZWd1bGFyIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25EaXNhYmxlZCIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkhvdmVyIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvciIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkRpc2FibGVkIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Ib3ZlciIsIm9yaWdpbmFsU3R5bGVTZXQiLCJjdXJzb3IiLCJmbGlwcGVyQm94V2lkdGgiLCJmbGlwcGVyU2l6ZSIsInNjcm9sbEJhckhlaWdodCIsInNjcm9sbEJhck1hcmdpbiIsImZsaXBwZXIiLCJiYWNrZ3JvdW5kIiwiY29sb3IiLCJvdXRsaW5lIiwiYmFja2dyb3VuZENvbG9yIiwibGVmdEZsaXBwZXIiLCJyaWdodEZsaXBwZXIiLCJjYXJvdXNlbCIsInRyYW5zaXRpb25EZWxheSIsImxlZnQiLCJyaWdodCIsInNjcm9sbGJhcldpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7Ozs7Ozs7QUFFZSxTQUFTQSw4QkFBVCxPQVVaO0FBQUE7O0FBQUEsTUFUREMsY0FTQyxRQVREQSxjQVNDO0FBQUEsTUFSREMsaUNBUUMsUUFSREEsaUNBUUM7QUFBQSxNQVBEQywyQ0FPQyxRQVBEQSwyQ0FPQztBQUFBLE1BTkRDLHdDQU1DLFFBTkRBLHdDQU1DO0FBQUEsTUFMREMsd0NBS0MsUUFMREEsd0NBS0M7QUFBQSxNQUpEQyw0QkFJQyxRQUpEQSw0QkFJQztBQUFBLE1BSERDLHNDQUdDLFFBSERBLHNDQUdDO0FBQUEsTUFGREMsbUNBRUMsUUFGREEsbUNBRUM7QUFBQSxNQUREQyxtQ0FDQyxRQUREQSxtQ0FDQztBQUNELE1BQU1DLGdCQUFnQixHQUFHLG9DQUFvQjtBQUMzQ0MsSUFBQUEsTUFBTSxFQUFFLElBRG1DO0FBRTNDQyxJQUFBQSxlQUFlLEVBQUUsRUFGMEI7QUFHM0NDLElBQUFBLFdBQVcsRUFBRSxFQUg4QjtBQUkzQ0MsSUFBQUEsZUFBZSxFQUFFLENBSjBCO0FBSzNDQyxJQUFBQSxlQUFlLEVBQUU7QUFMMEIsR0FBcEIsQ0FBekI7QUFRQSxNQUFNQyxPQUFPLEdBQUcsaUJBQUk7QUFDbEIsNEJBQXdCO0FBQ3RCQyxNQUFBQSxVQUFVLEVBQUVmLGlDQURVO0FBRXRCZ0IsTUFBQUEsS0FBSyxFQUFFWiw0QkFGZTtBQUd0QmEsTUFBQUEsT0FBTyxFQUFFO0FBSGEsS0FETjtBQU9sQiwyQ0FBdUM7QUFDckMsOEJBQXdCO0FBQ3RCQyxRQUFBQSxlQUFlLEVBQUVqQiwyQ0FESztBQUV0QmUsUUFBQUEsS0FBSyxFQUFFWDtBQUZlO0FBRGEsS0FQckI7QUFjbEIsa0NBQThCO0FBQzVCYSxNQUFBQSxlQUFlLEVBQUVoQix3Q0FEVztBQUU1QmMsTUFBQUEsS0FBSyxFQUFFVixtQ0FBbUMsSUFBSUY7QUFGbEIsS0FkWjtBQW1CbEIsa0NBQThCO0FBQzVCYyxNQUFBQSxlQUFlLEVBQUVmLHdDQURXO0FBRTVCYSxNQUFBQSxLQUFLLEVBQUVULG1DQUFtQyxJQUFJSDtBQUZsQjtBQW5CWixHQUFKLENBQWhCO0FBeUJBLE1BQU1lLFdBQVcsR0FBRyxpQkFBSVgsZ0JBQWdCLENBQUNXLFdBQXJCLEVBQWtDTCxPQUFsQyxDQUFwQjtBQUNBLE1BQU1NLFlBQVksR0FBRyxpQkFBSVosZ0JBQWdCLENBQUNZLFlBQXJCLEVBQW1DTixPQUFuQyxDQUFyQjtBQUNBLE1BQU1PLFFBQVEsR0FBRyxpQkFBSWIsZ0JBQWdCLENBQUNhLFFBQXJCLEVBQStCO0FBQzlDLGlHQUNTRixXQUFXLEdBQUcsRUFEdkIsK0JBQzhDQyxZQUFZLEdBQUcsRUFEN0Qsb0JBQ2lGO0FBQzdFRSxNQUFBQSxlQUFlLEVBQUU7QUFENEQsS0FEakYsaURBSVNILFdBQVcsR0FBRyxFQUp2QixvQkFJMkM7QUFBRUksTUFBQUEsSUFBSSxFQUFFO0FBQVIsS0FKM0MsaURBS1NILFlBQVksR0FBRyxFQUx4QixvQkFLNEM7QUFBRUksTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FMNUMsbUJBRDhDO0FBUzlDLGVBQVc7QUFDVEMsTUFBQUEsY0FBYyxFQUFFLE1BRFA7QUFHVCxxQkFBZTtBQUNiLHlCQUFpQjtBQUNmQyxVQUFBQSxXQUFXLEVBQUUzQixjQUFjLEdBQUc7QUFEZixTQURKO0FBS2Isd0JBQWdCO0FBQ2Q0QixVQUFBQSxZQUFZLEVBQUU1QixjQUFjLEdBQUc7QUFEakI7QUFMSDtBQUhOO0FBVG1DLEdBQS9CLENBQWpCLENBcENDLENBNEREOztBQUNBLHlDQUNLUyxnQkFETDtBQUdFYSxJQUFBQSxRQUFRLEVBQVJBLFFBSEY7QUFJRUYsSUFBQUEsV0FBVyxFQUFYQSxXQUpGO0FBS0VDLElBQUFBLFlBQVksRUFBWkE7QUFMRjtBQU9EIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogXCJvZmZcIiAqL1xuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IHsgY3JlYXRlQmFzaWNTdHlsZVNldCB9IGZyb20gJ3JlYWN0LWZpbG0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdWdnZXN0ZWRBY3Rpb25zU3R5bGVTZXQoe1xuICBwYWRkaW5nUmVndWxhcixcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkRpc2FibGVkLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkZvY3VzLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkhvdmVyLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25EaXNhYmxlZCxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMsXG4gIHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkhvdmVyXG59KSB7XG4gIGNvbnN0IG9yaWdpbmFsU3R5bGVTZXQgPSBjcmVhdGVCYXNpY1N0eWxlU2V0KHtcbiAgICBjdXJzb3I6IG51bGwsXG4gICAgZmxpcHBlckJveFdpZHRoOiA0MCxcbiAgICBmbGlwcGVyU2l6ZTogMjAsXG4gICAgc2Nyb2xsQmFySGVpZ2h0OiA2LFxuICAgIHNjcm9sbEJhck1hcmdpbjogMlxuICB9KTtcblxuICBjb25zdCBmbGlwcGVyID0gY3NzKHtcbiAgICAnJiA+IGRpdi5zbGlkZXIgPiBkaXYnOiB7XG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmQsXG4gICAgICBjb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvcixcbiAgICAgIG91dGxpbmU6IDBcbiAgICB9LFxuXG4gICAgJyY6ZGlzYWJsZWQsICZbYXJpYS1kaXNhYmxlZD1cInRydWVcIl0nOiB7XG4gICAgICAnJiA+IGRpdi5zbGlkZXIgPiBkaXYnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25EaXNhYmxlZCxcbiAgICAgICAgY29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQ29sb3JPbkRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgICcmOmZvY3VzID4gZGl2LnNsaWRlciA+IGRpdic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyxcbiAgICAgIGNvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Gb2N1cyB8fCB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yXG4gICAgfSxcblxuICAgICcmOmhvdmVyID4gZGl2LnNsaWRlciA+IGRpdic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Ib3ZlcixcbiAgICAgIGNvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Ib3ZlciB8fCB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yXG4gICAgfVxuICB9KTtcblxuICBjb25zdCBsZWZ0RmxpcHBlciA9IGNzcyhvcmlnaW5hbFN0eWxlU2V0LmxlZnRGbGlwcGVyLCBmbGlwcGVyKTtcbiAgY29uc3QgcmlnaHRGbGlwcGVyID0gY3NzKG9yaWdpbmFsU3R5bGVTZXQucmlnaHRGbGlwcGVyLCBmbGlwcGVyKTtcbiAgY29uc3QgY2Fyb3VzZWwgPSBjc3Mob3JpZ2luYWxTdHlsZVNldC5jYXJvdXNlbCwge1xuICAgICcmOmhvdmVyLCAmLnNjcm9sbGluZyc6IHtcbiAgICAgIFtgJiAuJHtsZWZ0RmxpcHBlciArICcnfSA+IGRpdi5zbGlkZXIsICYgLiR7cmlnaHRGbGlwcGVyICsgJyd9ID4gZGl2LnNsaWRlcmBdOiB7XG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogJzBzJ1xuICAgICAgfSxcbiAgICAgIFtgJiAuJHtsZWZ0RmxpcHBlciArICcnfSA+IGRpdi5zbGlkZXJgXTogeyBsZWZ0OiAwIH0sXG4gICAgICBbYCYgLiR7cmlnaHRGbGlwcGVyICsgJyd9ID4gZGl2LnNsaWRlcmBdOiB7IHJpZ2h0OiAwIH1cbiAgICB9LFxuXG4gICAgJyYgPiBkaXYnOiB7XG4gICAgICBzY3JvbGxiYXJXaWR0aDogJ25vbmUnLFxuXG4gICAgICAnJiA+IHVsID4gbGknOiB7XG4gICAgICAgICcmOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0OiBwYWRkaW5nUmVndWxhciAvIDJcbiAgICAgICAgfSxcblxuICAgICAgICAnJjpsYXN0LWNoaWxkJzoge1xuICAgICAgICAgIHBhZGRpbmdSaWdodDogcGFkZGluZ1JlZ3VsYXIgLyAyXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIFRoaXMgaXMgbm90IENTUywgYnV0IG9wdGlvbnMgdG8gY3JlYXRlIHN0eWxlIHNldCBmb3IgcmVhY3QtZmlsbVxuICByZXR1cm4ge1xuICAgIC4uLm9yaWdpbmFsU3R5bGVTZXQsXG5cbiAgICBjYXJvdXNlbCxcbiAgICBsZWZ0RmxpcHBlcixcbiAgICByaWdodEZsaXBwZXJcbiAgfTtcbn1cbiJdfQ==