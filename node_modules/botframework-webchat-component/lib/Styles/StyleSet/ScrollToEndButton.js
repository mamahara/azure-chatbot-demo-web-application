"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createScrollToEndButtonStyle;

function createScrollToEndButtonStyle(_ref) {
  var newMessagesButtonFontSize = _ref.newMessagesButtonFontSize,
      paddingRegular = _ref.paddingRegular,
      primaryFont = _ref.primaryFont,
      transcriptOverlayButtonBackground = _ref.transcriptOverlayButtonBackground,
      transcriptOverlayButtonBackgroundOnFocus = _ref.transcriptOverlayButtonBackgroundOnFocus,
      transcriptOverlayButtonBackgroundOnHover = _ref.transcriptOverlayButtonBackgroundOnHover,
      transcriptOverlayButtonColor = _ref.transcriptOverlayButtonColor,
      transcriptOverlayButtonColorOnFocus = _ref.transcriptOverlayButtonColorOnFocus,
      transcriptOverlayButtonColorOnHover = _ref.transcriptOverlayButtonColorOnHover;
  return {
    // TODO: [P3] Can we not to unset borderWidth and outline earlier?
    '@media screen and (-ms-high-contrast: active)': {
      borderWidth: 'initial',
      outline: 'initial'
    },
    backgroundColor: transcriptOverlayButtonBackground,
    borderRadius: paddingRegular,
    borderWidth: 0,
    bottom: 5,
    color: transcriptOverlayButtonColor,
    fontFamily: primaryFont,
    fontSize: newMessagesButtonFontSize,
    outline: 0,
    padding: paddingRegular,
    position: 'absolute',
    zIndex: 1,
    // We formed a stacking context in the parent container, so we can use "z-index" here.
    '&:hover': {
      backgroundColor: transcriptOverlayButtonBackgroundOnHover,
      color: transcriptOverlayButtonColorOnHover || transcriptOverlayButtonColor
    },
    '&:focus': {
      backgroundColor: transcriptOverlayButtonBackgroundOnFocus,
      color: transcriptOverlayButtonColorOnFocus || transcriptOverlayButtonColor
    },
    ':not(.webchat__overlay--rtl)': {
      right: 20
    },
    '&.webchat__overlay--rtl': {
      left: 20
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TdHlsZXMvU3R5bGVTZXQvU2Nyb2xsVG9FbmRCdXR0b24uanMiXSwibmFtZXMiOlsiY3JlYXRlU2Nyb2xsVG9FbmRCdXR0b25TdHlsZSIsIm5ld01lc3NhZ2VzQnV0dG9uRm9udFNpemUiLCJwYWRkaW5nUmVndWxhciIsInByaW1hcnlGb250IiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyIsInRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uSG92ZXIiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yIiwidHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uRm9jdXMiLCJ0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Ib3ZlciIsImJvcmRlcldpZHRoIiwib3V0bGluZSIsImJhY2tncm91bmRDb2xvciIsImJvcmRlclJhZGl1cyIsImJvdHRvbSIsImNvbG9yIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwicGFkZGluZyIsInBvc2l0aW9uIiwiekluZGV4IiwicmlnaHQiLCJsZWZ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWUsU0FBU0EsNEJBQVQsT0FVWjtBQUFBLE1BVERDLHlCQVNDLFFBVERBLHlCQVNDO0FBQUEsTUFSREMsY0FRQyxRQVJEQSxjQVFDO0FBQUEsTUFQREMsV0FPQyxRQVBEQSxXQU9DO0FBQUEsTUFOREMsaUNBTUMsUUFOREEsaUNBTUM7QUFBQSxNQUxEQyx3Q0FLQyxRQUxEQSx3Q0FLQztBQUFBLE1BSkRDLHdDQUlDLFFBSkRBLHdDQUlDO0FBQUEsTUFIREMsNEJBR0MsUUFIREEsNEJBR0M7QUFBQSxNQUZEQyxtQ0FFQyxRQUZEQSxtQ0FFQztBQUFBLE1BRERDLG1DQUNDLFFBRERBLG1DQUNDO0FBQ0QsU0FBTztBQUNMO0FBQ0EscURBQWlEO0FBQy9DQyxNQUFBQSxXQUFXLEVBQUUsU0FEa0M7QUFFL0NDLE1BQUFBLE9BQU8sRUFBRTtBQUZzQyxLQUY1QztBQU9MQyxJQUFBQSxlQUFlLEVBQUVSLGlDQVBaO0FBUUxTLElBQUFBLFlBQVksRUFBRVgsY0FSVDtBQVNMUSxJQUFBQSxXQUFXLEVBQUUsQ0FUUjtBQVVMSSxJQUFBQSxNQUFNLEVBQUUsQ0FWSDtBQVdMQyxJQUFBQSxLQUFLLEVBQUVSLDRCQVhGO0FBWUxTLElBQUFBLFVBQVUsRUFBRWIsV0FaUDtBQWFMYyxJQUFBQSxRQUFRLEVBQUVoQix5QkFiTDtBQWNMVSxJQUFBQSxPQUFPLEVBQUUsQ0FkSjtBQWVMTyxJQUFBQSxPQUFPLEVBQUVoQixjQWZKO0FBZ0JMaUIsSUFBQUEsUUFBUSxFQUFFLFVBaEJMO0FBaUJMQyxJQUFBQSxNQUFNLEVBQUUsQ0FqQkg7QUFpQk07QUFFWCxlQUFXO0FBQ1RSLE1BQUFBLGVBQWUsRUFBRU4sd0NBRFI7QUFFVFMsTUFBQUEsS0FBSyxFQUFFTixtQ0FBbUMsSUFBSUY7QUFGckMsS0FuQk47QUF3QkwsZUFBVztBQUNUSyxNQUFBQSxlQUFlLEVBQUVQLHdDQURSO0FBRVRVLE1BQUFBLEtBQUssRUFBRVAsbUNBQW1DLElBQUlEO0FBRnJDLEtBeEJOO0FBNkJMLG9DQUFnQztBQUM5QmMsTUFBQUEsS0FBSyxFQUFFO0FBRHVCLEtBN0IzQjtBQWlDTCwrQkFBMkI7QUFDekJDLE1BQUFBLElBQUksRUFBRTtBQURtQjtBQWpDdEIsR0FBUDtBQXFDRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2Nyb2xsVG9FbmRCdXR0b25TdHlsZSh7XG4gIG5ld01lc3NhZ2VzQnV0dG9uRm9udFNpemUsXG4gIHBhZGRpbmdSZWd1bGFyLFxuICBwcmltYXJ5Rm9udCxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkZvY3VzLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkJhY2tncm91bmRPbkhvdmVyLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yLFxuICB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Gb2N1cyxcbiAgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uSG92ZXJcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICAvLyBUT0RPOiBbUDNdIENhbiB3ZSBub3QgdG8gdW5zZXQgYm9yZGVyV2lkdGggYW5kIG91dGxpbmUgZWFybGllcj9cbiAgICAnQG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpJzoge1xuICAgICAgYm9yZGVyV2lkdGg6ICdpbml0aWFsJyxcbiAgICAgIG91dGxpbmU6ICdpbml0aWFsJ1xuICAgIH0sXG5cbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZCxcbiAgICBib3JkZXJSYWRpdXM6IHBhZGRpbmdSZWd1bGFyLFxuICAgIGJvcmRlcldpZHRoOiAwLFxuICAgIGJvdHRvbTogNSxcbiAgICBjb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvcixcbiAgICBmb250RmFtaWx5OiBwcmltYXJ5Rm9udCxcbiAgICBmb250U2l6ZTogbmV3TWVzc2FnZXNCdXR0b25Gb250U2l6ZSxcbiAgICBvdXRsaW5lOiAwLFxuICAgIHBhZGRpbmc6IHBhZGRpbmdSZWd1bGFyLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMSwgLy8gV2UgZm9ybWVkIGEgc3RhY2tpbmcgY29udGV4dCBpbiB0aGUgcGFyZW50IGNvbnRhaW5lciwgc28gd2UgY2FuIHVzZSBcInotaW5kZXhcIiBoZXJlLlxuXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRyYW5zY3JpcHRPdmVybGF5QnV0dG9uQmFja2dyb3VuZE9uSG92ZXIsXG4gICAgICBjb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvck9uSG92ZXIgfHwgdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25Db2xvclxuICAgIH0sXG5cbiAgICAnJjpmb2N1cyc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJhbnNjcmlwdE92ZXJsYXlCdXR0b25CYWNrZ3JvdW5kT25Gb2N1cyxcbiAgICAgIGNvbG9yOiB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yT25Gb2N1cyB8fCB0cmFuc2NyaXB0T3ZlcmxheUJ1dHRvbkNvbG9yXG4gICAgfSxcblxuICAgICc6bm90KC53ZWJjaGF0X19vdmVybGF5LS1ydGwpJzoge1xuICAgICAgcmlnaHQ6IDIwXG4gICAgfSxcblxuICAgICcmLndlYmNoYXRfX292ZXJsYXktLXJ0bCc6IHtcbiAgICAgIGxlZnQ6IDIwXG4gICAgfVxuICB9O1xufVxuIl19