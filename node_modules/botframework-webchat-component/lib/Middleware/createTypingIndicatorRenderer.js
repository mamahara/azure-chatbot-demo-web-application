"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTypingIndicatorRenderer;

var _react = _interopRequireDefault(require("react"));

var _concatMiddleware = _interopRequireDefault(require("./concatMiddleware"));

var _createCoreMiddleware = _interopRequireDefault(require("./TypingIndicator/createCoreMiddleware"));

var _ErrorBox = _interopRequireDefault(require("../ErrorBox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-magic-numbers: ["error", { "ignore": [2] }] */
function createTypingIndicatorRenderer(additionalMiddleware) {
  var typingIndicatorMiddleware = (0, _concatMiddleware.default)(additionalMiddleware, (0, _createCoreMiddleware.default)())({});
  return function () {
    try {
      return typingIndicatorMiddleware(function (_ref) {
        var activeTyping = _ref.activeTyping,
            typing = _ref.typing,
            visible = _ref.visible;
        return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
          message: "No renderer for typing indicator"
        }, /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify({
          activeTyping: activeTyping,
          typing: typing,
          visible: visible
        }, null, 2)));
      }).apply(void 0, arguments);
    } catch (err) {
      var message = err.message,
          stack = err.stack;
      console.error({
        message: message,
        stack: stack
      });
      return /*#__PURE__*/_react.default.createElement(_ErrorBox.default, {
        error: err,
        message: "Failed to render typing indicator"
      }, /*#__PURE__*/_react.default.createElement("pre", null, JSON.stringify({
        message: message,
        stack: stack
      }, null, 2)));
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NaWRkbGV3YXJlL2NyZWF0ZVR5cGluZ0luZGljYXRvclJlbmRlcmVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVR5cGluZ0luZGljYXRvclJlbmRlcmVyIiwiYWRkaXRpb25hbE1pZGRsZXdhcmUiLCJ0eXBpbmdJbmRpY2F0b3JNaWRkbGV3YXJlIiwiYWN0aXZlVHlwaW5nIiwidHlwaW5nIiwidmlzaWJsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlcnIiLCJtZXNzYWdlIiwic3RhY2siLCJjb25zb2xlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUxBO0FBT2UsU0FBU0EsNkJBQVQsQ0FBdUNDLG9CQUF2QyxFQUE2RDtBQUMxRSxNQUFNQyx5QkFBeUIsR0FBRywrQkFBaUJELG9CQUFqQixFQUF1QyxvQ0FBdkMsRUFBOEUsRUFBOUUsQ0FBbEM7QUFFQSxTQUFPLFlBQWE7QUFDbEIsUUFBSTtBQUNGLGFBQU9DLHlCQUF5QixDQUFDO0FBQUEsWUFBR0MsWUFBSCxRQUFHQSxZQUFIO0FBQUEsWUFBaUJDLE1BQWpCLFFBQWlCQSxNQUFqQjtBQUFBLFlBQXlCQyxPQUF6QixRQUF5QkEsT0FBekI7QUFBQSw0QkFDL0IsNkJBQUMsaUJBQUQ7QUFBVSxVQUFBLE9BQU8sRUFBQztBQUFsQix3QkFDRSwwQ0FBTUMsSUFBSSxDQUFDQyxTQUFMLENBQWU7QUFBRUosVUFBQUEsWUFBWSxFQUFaQSxZQUFGO0FBQWdCQyxVQUFBQSxNQUFNLEVBQU5BLE1BQWhCO0FBQXdCQyxVQUFBQSxPQUFPLEVBQVBBO0FBQXhCLFNBQWYsRUFBa0QsSUFBbEQsRUFBd0QsQ0FBeEQsQ0FBTixDQURGLENBRCtCO0FBQUEsT0FBRCxDQUF6Qix5QkFBUDtBQUtELEtBTkQsQ0FNRSxPQUFPRyxHQUFQLEVBQVk7QUFBQSxVQUNKQyxPQURJLEdBQ2VELEdBRGYsQ0FDSkMsT0FESTtBQUFBLFVBQ0tDLEtBREwsR0FDZUYsR0FEZixDQUNLRSxLQURMO0FBR1pDLE1BQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjO0FBQUVILFFBQUFBLE9BQU8sRUFBUEEsT0FBRjtBQUFXQyxRQUFBQSxLQUFLLEVBQUxBO0FBQVgsT0FBZDtBQUVBLDBCQUNFLDZCQUFDLGlCQUFEO0FBQVUsUUFBQSxLQUFLLEVBQUVGLEdBQWpCO0FBQXNCLFFBQUEsT0FBTyxFQUFDO0FBQTlCLHNCQUNFLDBDQUFNRixJQUFJLENBQUNDLFNBQUwsQ0FBZTtBQUFFRSxRQUFBQSxPQUFPLEVBQVBBLE9BQUY7QUFBV0MsUUFBQUEsS0FBSyxFQUFMQTtBQUFYLE9BQWYsRUFBbUMsSUFBbkMsRUFBeUMsQ0FBekMsQ0FBTixDQURGLENBREY7QUFLRDtBQUNGLEdBbEJEO0FBbUJEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwgeyBcImlnbm9yZVwiOiBbMl0gfV0gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb25jYXRNaWRkbGV3YXJlIGZyb20gJy4vY29uY2F0TWlkZGxld2FyZSc7XG5pbXBvcnQgY3JlYXRlQ29yZVR5cGluZ0luZGljYXRvck1pZGRsZXdhcmUgZnJvbSAnLi9UeXBpbmdJbmRpY2F0b3IvY3JlYXRlQ29yZU1pZGRsZXdhcmUnO1xuaW1wb3J0IEVycm9yQm94IGZyb20gJy4uL0Vycm9yQm94JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwaW5nSW5kaWNhdG9yUmVuZGVyZXIoYWRkaXRpb25hbE1pZGRsZXdhcmUpIHtcbiAgY29uc3QgdHlwaW5nSW5kaWNhdG9yTWlkZGxld2FyZSA9IGNvbmNhdE1pZGRsZXdhcmUoYWRkaXRpb25hbE1pZGRsZXdhcmUsIGNyZWF0ZUNvcmVUeXBpbmdJbmRpY2F0b3JNaWRkbGV3YXJlKCkpKHt9KTtcblxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHR5cGluZ0luZGljYXRvck1pZGRsZXdhcmUoKHsgYWN0aXZlVHlwaW5nLCB0eXBpbmcsIHZpc2libGUgfSkgPT4gKFxuICAgICAgICA8RXJyb3JCb3ggbWVzc2FnZT1cIk5vIHJlbmRlcmVyIGZvciB0eXBpbmcgaW5kaWNhdG9yXCI+XG4gICAgICAgICAgPHByZT57SlNPTi5zdHJpbmdpZnkoeyBhY3RpdmVUeXBpbmcsIHR5cGluZywgdmlzaWJsZSB9LCBudWxsLCAyKX08L3ByZT5cbiAgICAgICAgPC9FcnJvckJveD5cbiAgICAgICkpKC4uLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgeyBtZXNzYWdlLCBzdGFjayB9ID0gZXJyO1xuXG4gICAgICBjb25zb2xlLmVycm9yKHsgbWVzc2FnZSwgc3RhY2sgfSk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxFcnJvckJveCBlcnJvcj17ZXJyfSBtZXNzYWdlPVwiRmFpbGVkIHRvIHJlbmRlciB0eXBpbmcgaW5kaWNhdG9yXCI+XG4gICAgICAgICAgPHByZT57SlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlLCBzdGFjayB9LCBudWxsLCAyKX08L3ByZT5cbiAgICAgICAgPC9FcnJvckJveD5cbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIl19