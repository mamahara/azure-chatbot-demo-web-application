"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = concatMiddleware;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function concatMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (options) {
    var setup = middlewares.reduce(function (setup, middleware) {
      return middleware ? [].concat(_toConsumableArray(setup), [middleware(options)]) : setup;
    }, []);
    return function (last) {
      var stack = setup.slice();

      var work = function work(index) {
        return function () {
          var next = stack[index];
          return (next ? next(work(index + 1)) : last).apply(void 0, arguments);
        };
      };

      return work(0);
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NaWRkbGV3YXJlL2NvbmNhdE1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiY29uY2F0TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwib3B0aW9ucyIsInNldHVwIiwicmVkdWNlIiwibWlkZGxld2FyZSIsImxhc3QiLCJzdGFjayIsInNsaWNlIiwid29yayIsImluZGV4IiwibmV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFlLFNBQVNBLGdCQUFULEdBQTBDO0FBQUEsb0NBQWJDLFdBQWE7QUFBYkEsSUFBQUEsV0FBYTtBQUFBOztBQUN2RCxTQUFPLFVBQUFDLE9BQU8sRUFBSTtBQUNoQixRQUFNQyxLQUFLLEdBQUdGLFdBQVcsQ0FBQ0csTUFBWixDQUFtQixVQUFDRCxLQUFELEVBQVFFLFVBQVI7QUFBQSxhQUF3QkEsVUFBVSxnQ0FBT0YsS0FBUCxJQUFjRSxVQUFVLENBQUNILE9BQUQsQ0FBeEIsS0FBcUNDLEtBQXZFO0FBQUEsS0FBbkIsRUFBa0csRUFBbEcsQ0FBZDtBQUVBLFdBQU8sVUFBQUcsSUFBSSxFQUFJO0FBQ2IsVUFBTUMsS0FBSyxHQUFHSixLQUFLLENBQUNLLEtBQU4sRUFBZDs7QUFDQSxVQUFNQyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFBQyxLQUFLO0FBQUEsZUFBSSxZQUFhO0FBQ2pDLGNBQU1DLElBQUksR0FBR0osS0FBSyxDQUFDRyxLQUFELENBQWxCO0FBRUEsaUJBQU8sQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJLENBQUNGLElBQUksQ0FBQ0MsS0FBSyxHQUFHLENBQVQsQ0FBTCxDQUFQLEdBQTJCSixJQUFoQywwQkFBUDtBQUNELFNBSmlCO0FBQUEsT0FBbEI7O0FBTUEsYUFBT0csSUFBSSxDQUFDLENBQUQsQ0FBWDtBQUNELEtBVEQ7QUFVRCxHQWJEO0FBY0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmNhdE1pZGRsZXdhcmUoLi4ubWlkZGxld2FyZXMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4ge1xuICAgIGNvbnN0IHNldHVwID0gbWlkZGxld2FyZXMucmVkdWNlKChzZXR1cCwgbWlkZGxld2FyZSkgPT4gKG1pZGRsZXdhcmUgPyBbLi4uc2V0dXAsIG1pZGRsZXdhcmUob3B0aW9ucyldIDogc2V0dXApLCBbXSk7XG5cbiAgICByZXR1cm4gbGFzdCA9PiB7XG4gICAgICBjb25zdCBzdGFjayA9IHNldHVwLnNsaWNlKCk7XG4gICAgICBjb25zdCB3b3JrID0gaW5kZXggPT4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHN0YWNrW2luZGV4XTtcblxuICAgICAgICByZXR1cm4gKG5leHQgPyBuZXh0KHdvcmsoaW5kZXggKyAxKSkgOiBsYXN0KSguLi5hcmdzKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB3b3JrKDApO1xuICAgIH07XG4gIH07XG59XG4iXX0=