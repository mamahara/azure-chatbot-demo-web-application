"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDefaultCardActionMiddleware;

var _botframeworkWebchatCore = require("botframework-webchat-core");

// This code is adopted from sanitize-html/naughtyScheme.
// sanitize-html is a dependency of Web Chat but the naughtScheme function is neither exposed nor reusable.
// https://github.com/apostrophecms/sanitize-html/blob/master/src/index.js#L526
function getScheme(href) {
  // Browsers ignore character codes of 32 (space) and below in a surprising
  // number of situations. Start reading here:
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab

  /* eslint-disable-next-line no-control-regex */
  href = href.replace(/[\0- ]+/g, ''); // Clobber any comments in URLs, which the browser might
  // interpret inside an XML data island, allowing
  // a javascript: URL to be snuck through

  href = href.replace(/<!\x2D\x2D(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\x2D\x2D>/g, ''); // Case insensitive so we don't get faked out by JAVASCRIPT #1

  var matches = href.match(/^([A-Za-z]+):/);

  if (!matches) {
    // Protocol-relative URL or no scheme
    return;
  }

  return matches[1].toLowerCase();
}

var ALLOWED_SCHEMES = ['data', 'http', 'https', 'ftp', 'mailto', 'sip', 'tel'];

function createDefaultCardActionMiddleware() {
  return function (_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function (_ref2) {
        var cardAction = _ref2.cardAction,
            getSignInUrl = _ref2.getSignInUrl;
        var displayText = cardAction.displayText,
            text = cardAction.text,
            type = cardAction.type,
            value = cardAction.value;

        switch (type) {
          case 'imBack':
            if (typeof value === 'string') {
              // TODO: [P4] Instead of calling dispatch, we should move to dispatchers instead for completeness
              dispatch((0, _botframeworkWebchatCore.sendMessage)(value, 'imBack'));
            } else {
              throw new Error('cannot send "imBack" with a non-string value');
            }

            break;

          case 'messageBack':
            dispatch((0, _botframeworkWebchatCore.sendMessageBack)(value, text, displayText));
            break;

          case 'postBack':
            dispatch((0, _botframeworkWebchatCore.sendPostBack)(value));
            break;

          case 'call':
          case 'downloadFile':
          case 'openUrl':
          case 'playAudio':
          case 'playVideo':
          case 'showImage':
            if (ALLOWED_SCHEMES.includes(getScheme(value))) {
              window.open(value, '_blank', 'noopener noreferrer');
            } else {
              console.warn('botframework-webchat: Cannot open URL with disallowed schemes.', value);
            }

            break;

          case 'signin':
            {
              // TODO: [P3] We should prime the URL into the OAuthCard directly, instead of calling getSessionId on-demand
              //       This is to eliminate the delay between window.open() and location.href call
              var popup = window.open();
              getSignInUrl().then(function (url) {
                popup.location.href = url;
              });
              break;
            }

          default:
            return next({
              cardAction: cardAction,
              getSignInUrl: getSignInUrl
            });
        }
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0NhcmRBY3Rpb24vY3JlYXRlQ29yZU1pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiZ2V0U2NoZW1lIiwiaHJlZiIsInJlcGxhY2UiLCJtYXRjaGVzIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsIkFMTE9XRURfU0NIRU1FUyIsImNyZWF0ZURlZmF1bHRDYXJkQWN0aW9uTWlkZGxld2FyZSIsImRpc3BhdGNoIiwibmV4dCIsImNhcmRBY3Rpb24iLCJnZXRTaWduSW5VcmwiLCJkaXNwbGF5VGV4dCIsInRleHQiLCJ0eXBlIiwidmFsdWUiLCJFcnJvciIsImluY2x1ZGVzIiwid2luZG93Iiwib3BlbiIsImNvbnNvbGUiLCJ3YXJuIiwicG9wdXAiLCJ0aGVuIiwidXJsIiwibG9jYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQUEsRUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNDLE9BQUwsQ0FBYSxVQUFiLEVBQStCLEVBQS9CLENBQVAsQ0FOdUIsQ0FRdkI7QUFDQTtBQUNBOztBQUNBRCxFQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsT0FBTCxDQUFhLHNMQUFiLEVBQTZCLEVBQTdCLENBQVAsQ0FYdUIsQ0FhdkI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRixJQUFJLENBQUNHLEtBQUwsQ0FBVyxlQUFYLENBQWhCOztBQUVBLE1BQUksQ0FBQ0QsT0FBTCxFQUFjO0FBQ1o7QUFDQTtBQUNEOztBQUVELFNBQU9BLE9BQU8sQ0FBQyxDQUFELENBQVAsQ0FBV0UsV0FBWCxFQUFQO0FBQ0Q7O0FBRUQsSUFBTUMsZUFBZSxHQUFHLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsS0FBM0MsRUFBa0QsS0FBbEQsQ0FBeEI7O0FBRWUsU0FBU0MsaUNBQVQsR0FBNkM7QUFDMUQsU0FBTztBQUFBLFFBQUdDLFFBQUgsUUFBR0EsUUFBSDtBQUFBLFdBQWtCLFVBQUFDLElBQUk7QUFBQSxhQUFJLGlCQUFrQztBQUFBLFlBQS9CQyxVQUErQixTQUEvQkEsVUFBK0I7QUFBQSxZQUFuQkMsWUFBbUIsU0FBbkJBLFlBQW1CO0FBQUEsWUFDekRDLFdBRHlELEdBQ3RCRixVQURzQixDQUN6REUsV0FEeUQ7QUFBQSxZQUM1Q0MsSUFENEMsR0FDdEJILFVBRHNCLENBQzVDRyxJQUQ0QztBQUFBLFlBQ3RDQyxJQURzQyxHQUN0QkosVUFEc0IsQ0FDdENJLElBRHNDO0FBQUEsWUFDaENDLEtBRGdDLEdBQ3RCTCxVQURzQixDQUNoQ0ssS0FEZ0M7O0FBR2pFLGdCQUFRRCxJQUFSO0FBQ0UsZUFBSyxRQUFMO0FBQ0UsZ0JBQUksT0FBT0MsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QjtBQUNBUCxjQUFBQSxRQUFRLENBQUMsMENBQVlPLEtBQVosRUFBbUIsUUFBbkIsQ0FBRCxDQUFSO0FBQ0QsYUFIRCxNQUdPO0FBQ0wsb0JBQU0sSUFBSUMsS0FBSixDQUFVLDhDQUFWLENBQU47QUFDRDs7QUFFRDs7QUFFRixlQUFLLGFBQUw7QUFDRVIsWUFBQUEsUUFBUSxDQUFDLDhDQUFnQk8sS0FBaEIsRUFBdUJGLElBQXZCLEVBQTZCRCxXQUE3QixDQUFELENBQVI7QUFFQTs7QUFFRixlQUFLLFVBQUw7QUFDRUosWUFBQUEsUUFBUSxDQUFDLDJDQUFhTyxLQUFiLENBQUQsQ0FBUjtBQUVBOztBQUVGLGVBQUssTUFBTDtBQUNBLGVBQUssY0FBTDtBQUNBLGVBQUssU0FBTDtBQUNBLGVBQUssV0FBTDtBQUNBLGVBQUssV0FBTDtBQUNBLGVBQUssV0FBTDtBQUNFLGdCQUFJVCxlQUFlLENBQUNXLFFBQWhCLENBQXlCakIsU0FBUyxDQUFDZSxLQUFELENBQWxDLENBQUosRUFBZ0Q7QUFDOUNHLGNBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixLQUFaLEVBQW1CLFFBQW5CLEVBQTZCLHFCQUE3QjtBQUNELGFBRkQsTUFFTztBQUNMSyxjQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxnRUFBYixFQUErRU4sS0FBL0U7QUFDRDs7QUFFRDs7QUFFRixlQUFLLFFBQUw7QUFBZTtBQUNiO0FBQ0E7QUFFQSxrQkFBTU8sS0FBSyxHQUFHSixNQUFNLENBQUNDLElBQVAsRUFBZDtBQUVBUixjQUFBQSxZQUFZLEdBQUdZLElBQWYsQ0FBb0IsVUFBQUMsR0FBRyxFQUFJO0FBQ3pCRixnQkFBQUEsS0FBSyxDQUFDRyxRQUFOLENBQWV4QixJQUFmLEdBQXNCdUIsR0FBdEI7QUFDRCxlQUZEO0FBSUE7QUFDRDs7QUFFRDtBQUNFLG1CQUFPZixJQUFJLENBQUM7QUFBRUMsY0FBQUEsVUFBVSxFQUFWQSxVQUFGO0FBQWNDLGNBQUFBLFlBQVksRUFBWkE7QUFBZCxhQUFELENBQVg7QUFqREo7QUFtREQsT0F0RDRCO0FBQUEsS0FBdEI7QUFBQSxHQUFQO0FBdUREIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZW5kTWVzc2FnZSwgc2VuZE1lc3NhZ2VCYWNrLCBzZW5kUG9zdEJhY2sgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuLy8gVGhpcyBjb2RlIGlzIGFkb3B0ZWQgZnJvbSBzYW5pdGl6ZS1odG1sL25hdWdodHlTY2hlbWUuXG4vLyBzYW5pdGl6ZS1odG1sIGlzIGEgZGVwZW5kZW5jeSBvZiBXZWIgQ2hhdCBidXQgdGhlIG5hdWdodFNjaGVtZSBmdW5jdGlvbiBpcyBuZWl0aGVyIGV4cG9zZWQgbm9yIHJldXNhYmxlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Fwb3N0cm9waGVjbXMvc2FuaXRpemUtaHRtbC9ibG9iL21hc3Rlci9zcmMvaW5kZXguanMjTDUyNlxuZnVuY3Rpb24gZ2V0U2NoZW1lKGhyZWYpIHtcbiAgLy8gQnJvd3NlcnMgaWdub3JlIGNoYXJhY3RlciBjb2RlcyBvZiAzMiAoc3BhY2UpIGFuZCBiZWxvdyBpbiBhIHN1cnByaXNpbmdcbiAgLy8gbnVtYmVyIG9mIHNpdHVhdGlvbnMuIFN0YXJ0IHJlYWRpbmcgaGVyZTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXQjRW1iZWRkZWRfdGFiXG5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXggKi9cbiAgaHJlZiA9IGhyZWYucmVwbGFjZSgvW1xceDAwLVxceDIwXSsvZ3UsICcnKTtcblxuICAvLyBDbG9iYmVyIGFueSBjb21tZW50cyBpbiBVUkxzLCB3aGljaCB0aGUgYnJvd3NlciBtaWdodFxuICAvLyBpbnRlcnByZXQgaW5zaWRlIGFuIFhNTCBkYXRhIGlzbGFuZCwgYWxsb3dpbmdcbiAgLy8gYSBqYXZhc2NyaXB0OiBVUkwgdG8gYmUgc251Y2sgdGhyb3VnaFxuICBocmVmID0gaHJlZi5yZXBsYWNlKC88IS0tLio/LS0+L2d1LCAnJyk7XG5cbiAgLy8gQ2FzZSBpbnNlbnNpdGl2ZSBzbyB3ZSBkb24ndCBnZXQgZmFrZWQgb3V0IGJ5IEpBVkFTQ1JJUFQgIzFcbiAgY29uc3QgbWF0Y2hlcyA9IGhyZWYubWF0Y2goL14oW2EtekEtWl0rKTovdSk7XG5cbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgLy8gUHJvdG9jb2wtcmVsYXRpdmUgVVJMIG9yIG5vIHNjaGVtZVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbmNvbnN0IEFMTE9XRURfU0NIRU1FUyA9IFsnZGF0YScsICdodHRwJywgJ2h0dHBzJywgJ2Z0cCcsICdtYWlsdG8nLCAnc2lwJywgJ3RlbCddO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0Q2FyZEFjdGlvbk1pZGRsZXdhcmUoKSB7XG4gIHJldHVybiAoeyBkaXNwYXRjaCB9KSA9PiBuZXh0ID0+ICh7IGNhcmRBY3Rpb24sIGdldFNpZ25JblVybCB9KSA9PiB7XG4gICAgY29uc3QgeyBkaXNwbGF5VGV4dCwgdGV4dCwgdHlwZSwgdmFsdWUgfSA9IGNhcmRBY3Rpb247XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2ltQmFjayc6XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gVE9ETzogW1A0XSBJbnN0ZWFkIG9mIGNhbGxpbmcgZGlzcGF0Y2gsIHdlIHNob3VsZCBtb3ZlIHRvIGRpc3BhdGNoZXJzIGluc3RlYWQgZm9yIGNvbXBsZXRlbmVzc1xuICAgICAgICAgIGRpc3BhdGNoKHNlbmRNZXNzYWdlKHZhbHVlLCAnaW1CYWNrJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IHNlbmQgXCJpbUJhY2tcIiB3aXRoIGEgbm9uLXN0cmluZyB2YWx1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ21lc3NhZ2VCYWNrJzpcbiAgICAgICAgZGlzcGF0Y2goc2VuZE1lc3NhZ2VCYWNrKHZhbHVlLCB0ZXh0LCBkaXNwbGF5VGV4dCkpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb3N0QmFjayc6XG4gICAgICAgIGRpc3BhdGNoKHNlbmRQb3N0QmFjayh2YWx1ZSkpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdjYWxsJzpcbiAgICAgIGNhc2UgJ2Rvd25sb2FkRmlsZSc6XG4gICAgICBjYXNlICdvcGVuVXJsJzpcbiAgICAgIGNhc2UgJ3BsYXlBdWRpbyc6XG4gICAgICBjYXNlICdwbGF5VmlkZW8nOlxuICAgICAgY2FzZSAnc2hvd0ltYWdlJzpcbiAgICAgICAgaWYgKEFMTE9XRURfU0NIRU1FUy5pbmNsdWRlcyhnZXRTY2hlbWUodmFsdWUpKSkge1xuICAgICAgICAgIHdpbmRvdy5vcGVuKHZhbHVlLCAnX2JsYW5rJywgJ25vb3BlbmVyIG5vcmVmZXJyZXInKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBDYW5ub3Qgb3BlbiBVUkwgd2l0aCBkaXNhbGxvd2VkIHNjaGVtZXMuJywgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NpZ25pbic6IHtcbiAgICAgICAgLy8gVE9ETzogW1AzXSBXZSBzaG91bGQgcHJpbWUgdGhlIFVSTCBpbnRvIHRoZSBPQXV0aENhcmQgZGlyZWN0bHksIGluc3RlYWQgb2YgY2FsbGluZyBnZXRTZXNzaW9uSWQgb24tZGVtYW5kXG4gICAgICAgIC8vICAgICAgIFRoaXMgaXMgdG8gZWxpbWluYXRlIHRoZSBkZWxheSBiZXR3ZWVuIHdpbmRvdy5vcGVuKCkgYW5kIGxvY2F0aW9uLmhyZWYgY2FsbFxuXG4gICAgICAgIGNvbnN0IHBvcHVwID0gd2luZG93Lm9wZW4oKTtcblxuICAgICAgICBnZXRTaWduSW5VcmwoKS50aGVuKHVybCA9PiB7XG4gICAgICAgICAgcG9wdXAubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBuZXh0KHsgY2FyZEFjdGlvbiwgZ2V0U2lnbkluVXJsIH0pO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==