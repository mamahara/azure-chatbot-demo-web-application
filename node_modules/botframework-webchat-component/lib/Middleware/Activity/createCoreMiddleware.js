"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCoreMiddleware;

var _react = _interopRequireDefault(require("react"));

var _CarouselLayout = _interopRequireDefault(require("../../Activity/CarouselLayout"));

var _StackedLayout = _interopRequireDefault(require("../../Activity/StackedLayout"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function createCoreMiddleware() {
  return function () {
    return function (next) {
      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var activity = args[0].activity; // TODO: [P4] Can we simplify these if-statement to something more readable?

        var type = activity.type; // Filter out activities that should not be visible

        if (type === 'conversationUpdate' || type === 'event' || type === 'invoke') {
          return false;
        } else if (type === 'message') {
          var _activity$attachments = activity.attachments,
              attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
              channelData = activity.channelData,
              text = activity.text;

          if ( // Do not show postback
          channelData && channelData.postBack || // Do not show messageBack if displayText is undefined
          channelData && channelData.messageBack && !channelData.messageBack.displayText || // Do not show empty bubbles (no text and attachments, and not "typing")
          !(text || attachments.length)) {
            return false;
          }
        } else if (type === 'typing' && activity.from.role === 'user') {
          // Do not show typing by oneself
          return false;
        }

        if (type === 'message' || type === 'typing') {
          if (type === 'message' && (activity.attachments || []).length > 1 && activity.attachmentLayout === 'carousel') {
            // The following line is not a React functional component, it's a render function called by useCreateActivityRenderer() hook.
            // The function signature need to be compatible with older version of activity middleware, which was:
            //
            // renderActivity(
            //   renderAttachment: ({ activity, attachment }) => React.Element
            // ) => React.Element
            return function renderCarouselLayout(renderAttachment, props) {
              typeof props === 'undefined' && console.warn('botframework-webchat: One or more arguments were missing after passing through the activity middleware. Please check your custom activity middleware to make sure it passthrough all arguments.');
              return /*#__PURE__*/_react.default.createElement(_CarouselLayout.default, _extends({
                activity: activity,
                renderAttachment: renderAttachment
              }, props));
            };
          } // The following line is not a React functional component, it's a render function called by useCreateActivityRenderer() hook.


          return function renderStackedLayout(renderAttachment, props) {
            typeof props === 'undefined' && console.warn('botframework-webchat: One or more arguments were missing after passing through the activity middleware. Please check your custom activity middleware to make sure it passthrough all arguments.');
            return /*#__PURE__*/_react.default.createElement(_StackedLayout.default, _extends({
              activity: activity,
              renderAttachment: renderAttachment
            }, props));
          };
        }

        return next.apply(void 0, args);
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NaWRkbGV3YXJlL0FjdGl2aXR5L2NyZWF0ZUNvcmVNaWRkbGV3YXJlLmpzIl0sIm5hbWVzIjpbImNyZWF0ZUNvcmVNaWRkbGV3YXJlIiwibmV4dCIsImFyZ3MiLCJhY3Rpdml0eSIsInR5cGUiLCJhdHRhY2htZW50cyIsImNoYW5uZWxEYXRhIiwidGV4dCIsInBvc3RCYWNrIiwibWVzc2FnZUJhY2siLCJkaXNwbGF5VGV4dCIsImxlbmd0aCIsImZyb20iLCJyb2xlIiwiYXR0YWNobWVudExheW91dCIsInJlbmRlckNhcm91c2VsTGF5b3V0IiwicmVuZGVyQXR0YWNobWVudCIsInByb3BzIiwiY29uc29sZSIsIndhcm4iLCJyZW5kZXJTdGFja2VkTGF5b3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7OztBQUVlLFNBQVNBLG9CQUFULEdBQWdDO0FBQzdDLFNBQU87QUFBQSxXQUFNLFVBQUFDLElBQUk7QUFBQSxhQUFJLFlBQWE7QUFBQSwwQ0FBVEMsSUFBUztBQUFUQSxVQUFBQSxJQUFTO0FBQUE7O0FBQUEsWUFDdkJDLFFBRHVCLEdBQ1RELElBRFMsSUFDdkJDLFFBRHVCLEVBR2hDOztBQUhnQyxZQUt4QkMsSUFMd0IsR0FLZkQsUUFMZSxDQUt4QkMsSUFMd0IsRUFPaEM7O0FBQ0EsWUFBSUEsSUFBSSxLQUFLLG9CQUFULElBQWlDQSxJQUFJLEtBQUssT0FBMUMsSUFBcURBLElBQUksS0FBSyxRQUFsRSxFQUE0RTtBQUMxRSxpQkFBTyxLQUFQO0FBQ0QsU0FGRCxNQUVPLElBQUlBLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQUEsc0NBQ21CRCxRQURuQixDQUNyQkUsV0FEcUI7QUFBQSxjQUNyQkEsV0FEcUIsc0NBQ1AsRUFETztBQUFBLGNBQ0hDLFdBREcsR0FDbUJILFFBRG5CLENBQ0hHLFdBREc7QUFBQSxjQUNVQyxJQURWLEdBQ21CSixRQURuQixDQUNVSSxJQURWOztBQUc3QixlQUNFO0FBQ0NELFVBQUFBLFdBQVcsSUFBSUEsV0FBVyxDQUFDRSxRQUE1QixJQUNBO0FBQ0NGLFVBQUFBLFdBQVcsSUFBSUEsV0FBVyxDQUFDRyxXQUEzQixJQUEwQyxDQUFDSCxXQUFXLENBQUNHLFdBQVosQ0FBd0JDLFdBRnBFLElBR0E7QUFDQSxZQUFFSCxJQUFJLElBQUlGLFdBQVcsQ0FBQ00sTUFBdEIsQ0FORixFQU9FO0FBQ0EsbUJBQU8sS0FBUDtBQUNEO0FBQ0YsU0FiTSxNQWFBLElBQUlQLElBQUksS0FBSyxRQUFULElBQXFCRCxRQUFRLENBQUNTLElBQVQsQ0FBY0MsSUFBZCxLQUF1QixNQUFoRCxFQUF3RDtBQUM3RDtBQUNBLGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJVCxJQUFJLEtBQUssU0FBVCxJQUFzQkEsSUFBSSxLQUFLLFFBQW5DLEVBQTZDO0FBQzNDLGNBQUlBLElBQUksS0FBSyxTQUFULElBQXNCLENBQUNELFFBQVEsQ0FBQ0UsV0FBVCxJQUF3QixFQUF6QixFQUE2Qk0sTUFBN0IsR0FBc0MsQ0FBNUQsSUFBaUVSLFFBQVEsQ0FBQ1csZ0JBQVQsS0FBOEIsVUFBbkcsRUFBK0c7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsbUJBQU8sU0FBU0Msb0JBQVQsQ0FBOEJDLGdCQUE5QixFQUFnREMsS0FBaEQsRUFBdUQ7QUFDNUQscUJBQU9BLEtBQVAsS0FBaUIsV0FBakIsSUFDRUMsT0FBTyxDQUFDQyxJQUFSLENBQ0UsaU1BREYsQ0FERjtBQUtBLGtDQUFPLDZCQUFDLHVCQUFEO0FBQWdCLGdCQUFBLFFBQVEsRUFBRWhCLFFBQTFCO0FBQW9DLGdCQUFBLGdCQUFnQixFQUFFYTtBQUF0RCxpQkFBNEVDLEtBQTVFLEVBQVA7QUFDRCxhQVBEO0FBUUQsV0FqQjBDLENBbUIzQzs7O0FBQ0EsaUJBQU8sU0FBU0csbUJBQVQsQ0FBNkJKLGdCQUE3QixFQUErQ0MsS0FBL0MsRUFBc0Q7QUFDM0QsbUJBQU9BLEtBQVAsS0FBaUIsV0FBakIsSUFDRUMsT0FBTyxDQUFDQyxJQUFSLENBQ0UsaU1BREYsQ0FERjtBQUtBLGdDQUFPLDZCQUFDLHNCQUFEO0FBQWUsY0FBQSxRQUFRLEVBQUVoQixRQUF6QjtBQUFtQyxjQUFBLGdCQUFnQixFQUFFYTtBQUFyRCxlQUEyRUMsS0FBM0UsRUFBUDtBQUNELFdBUEQ7QUFRRDs7QUFFRCxlQUFPaEIsSUFBSSxNQUFKLFNBQVFDLElBQVIsQ0FBUDtBQUNELE9BM0RnQjtBQUFBLEtBQVY7QUFBQSxHQUFQO0FBNEREIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ2Fyb3VzZWxMYXlvdXQgZnJvbSAnLi4vLi4vQWN0aXZpdHkvQ2Fyb3VzZWxMYXlvdXQnO1xuaW1wb3J0IFN0YWNrZWRMYXlvdXQgZnJvbSAnLi4vLi4vQWN0aXZpdHkvU3RhY2tlZExheW91dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNvcmVNaWRkbGV3YXJlKCkge1xuICByZXR1cm4gKCkgPT4gbmV4dCA9PiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IFt7IGFjdGl2aXR5IH1dID0gYXJncztcblxuICAgIC8vIFRPRE86IFtQNF0gQ2FuIHdlIHNpbXBsaWZ5IHRoZXNlIGlmLXN0YXRlbWVudCB0byBzb21ldGhpbmcgbW9yZSByZWFkYWJsZT9cblxuICAgIGNvbnN0IHsgdHlwZSB9ID0gYWN0aXZpdHk7XG5cbiAgICAvLyBGaWx0ZXIgb3V0IGFjdGl2aXRpZXMgdGhhdCBzaG91bGQgbm90IGJlIHZpc2libGVcbiAgICBpZiAodHlwZSA9PT0gJ2NvbnZlcnNhdGlvblVwZGF0ZScgfHwgdHlwZSA9PT0gJ2V2ZW50JyB8fCB0eXBlID09PSAnaW52b2tlJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICBjb25zdCB7IGF0dGFjaG1lbnRzID0gW10sIGNoYW5uZWxEYXRhLCB0ZXh0IH0gPSBhY3Rpdml0eTtcblxuICAgICAgaWYgKFxuICAgICAgICAvLyBEbyBub3Qgc2hvdyBwb3N0YmFja1xuICAgICAgICAoY2hhbm5lbERhdGEgJiYgY2hhbm5lbERhdGEucG9zdEJhY2spIHx8XG4gICAgICAgIC8vIERvIG5vdCBzaG93IG1lc3NhZ2VCYWNrIGlmIGRpc3BsYXlUZXh0IGlzIHVuZGVmaW5lZFxuICAgICAgICAoY2hhbm5lbERhdGEgJiYgY2hhbm5lbERhdGEubWVzc2FnZUJhY2sgJiYgIWNoYW5uZWxEYXRhLm1lc3NhZ2VCYWNrLmRpc3BsYXlUZXh0KSB8fFxuICAgICAgICAvLyBEbyBub3Qgc2hvdyBlbXB0eSBidWJibGVzIChubyB0ZXh0IGFuZCBhdHRhY2htZW50cywgYW5kIG5vdCBcInR5cGluZ1wiKVxuICAgICAgICAhKHRleHQgfHwgYXR0YWNobWVudHMubGVuZ3RoKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0eXBpbmcnICYmIGFjdGl2aXR5LmZyb20ucm9sZSA9PT0gJ3VzZXInKSB7XG4gICAgICAvLyBEbyBub3Qgc2hvdyB0eXBpbmcgYnkgb25lc2VsZlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnbWVzc2FnZScgfHwgdHlwZSA9PT0gJ3R5cGluZycpIHtcbiAgICAgIGlmICh0eXBlID09PSAnbWVzc2FnZScgJiYgKGFjdGl2aXR5LmF0dGFjaG1lbnRzIHx8IFtdKS5sZW5ndGggPiAxICYmIGFjdGl2aXR5LmF0dGFjaG1lbnRMYXlvdXQgPT09ICdjYXJvdXNlbCcpIHtcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBsaW5lIGlzIG5vdCBhIFJlYWN0IGZ1bmN0aW9uYWwgY29tcG9uZW50LCBpdCdzIGEgcmVuZGVyIGZ1bmN0aW9uIGNhbGxlZCBieSB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVyKCkgaG9vay5cbiAgICAgICAgLy8gVGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBuZWVkIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBvbGRlciB2ZXJzaW9uIG9mIGFjdGl2aXR5IG1pZGRsZXdhcmUsIHdoaWNoIHdhczpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gcmVuZGVyQWN0aXZpdHkoXG4gICAgICAgIC8vICAgcmVuZGVyQXR0YWNobWVudDogKHsgYWN0aXZpdHksIGF0dGFjaG1lbnQgfSkgPT4gUmVhY3QuRWxlbWVudFxuICAgICAgICAvLyApID0+IFJlYWN0LkVsZW1lbnRcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVuZGVyQ2Fyb3VzZWxMYXlvdXQocmVuZGVyQXR0YWNobWVudCwgcHJvcHMpIHtcbiAgICAgICAgICB0eXBlb2YgcHJvcHMgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogT25lIG9yIG1vcmUgYXJndW1lbnRzIHdlcmUgbWlzc2luZyBhZnRlciBwYXNzaW5nIHRocm91Z2ggdGhlIGFjdGl2aXR5IG1pZGRsZXdhcmUuIFBsZWFzZSBjaGVjayB5b3VyIGN1c3RvbSBhY3Rpdml0eSBtaWRkbGV3YXJlIHRvIG1ha2Ugc3VyZSBpdCBwYXNzdGhyb3VnaCBhbGwgYXJndW1lbnRzLidcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICByZXR1cm4gPENhcm91c2VsTGF5b3V0IGFjdGl2aXR5PXthY3Rpdml0eX0gcmVuZGVyQXR0YWNobWVudD17cmVuZGVyQXR0YWNobWVudH0gey4uLnByb3BzfSAvPjtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGZvbGxvd2luZyBsaW5lIGlzIG5vdCBhIFJlYWN0IGZ1bmN0aW9uYWwgY29tcG9uZW50LCBpdCdzIGEgcmVuZGVyIGZ1bmN0aW9uIGNhbGxlZCBieSB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVyKCkgaG9vay5cbiAgICAgIHJldHVybiBmdW5jdGlvbiByZW5kZXJTdGFja2VkTGF5b3V0KHJlbmRlckF0dGFjaG1lbnQsIHByb3BzKSB7XG4gICAgICAgIHR5cGVvZiBwcm9wcyA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IE9uZSBvciBtb3JlIGFyZ3VtZW50cyB3ZXJlIG1pc3NpbmcgYWZ0ZXIgcGFzc2luZyB0aHJvdWdoIHRoZSBhY3Rpdml0eSBtaWRkbGV3YXJlLiBQbGVhc2UgY2hlY2sgeW91ciBjdXN0b20gYWN0aXZpdHkgbWlkZGxld2FyZSB0byBtYWtlIHN1cmUgaXQgcGFzc3Rocm91Z2ggYWxsIGFyZ3VtZW50cy4nXG4gICAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gPFN0YWNrZWRMYXlvdXQgYWN0aXZpdHk9e2FjdGl2aXR5fSByZW5kZXJBdHRhY2htZW50PXtyZW5kZXJBdHRhY2htZW50fSB7Li4ucHJvcHN9IC8+O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dCguLi5hcmdzKTtcbiAgfTtcbn1cbiJdfQ==