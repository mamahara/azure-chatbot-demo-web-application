"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useTrackEvent;

var _react = require("react");

var _createCustomEvent = _interopRequireDefault(require("../Utils/createCustomEvent"));

var _useReadTelemetryDimensions = _interopRequireDefault(require("./internal/useReadTelemetryDimensions"));

var _useWebChatUIContext2 = _interopRequireDefault(require("./internal/useWebChatUIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isNonNegativeFiniteNumberOrString(value) {
  return typeof value === 'number' && isFinite(value) && value >= 0 || typeof value === 'string';
}

function isObject(value) {
  return Object.prototype.toString.call(value) === '[object Object]';
}

function useTrackEvent() {
  var _useWebChatUIContext = (0, _useWebChatUIContext2.default)(),
      onTelemetry = _useWebChatUIContext.onTelemetry;

  var readTelemetryDimensions = (0, _useReadTelemetryDimensions.default)();
  var trackEvent = (0, _react.useCallback)(function (level, name, data) {
    if (!name || typeof name !== 'string') {
      return console.warn('botframework-webchat: "name" passed to "useTrackEvent" hook must be a string.');
    }

    if (typeof data !== 'undefined') {
      if (isObject(data)) {
        if (!Object.values(data).every(function (value) {
          return isNonNegativeFiniteNumberOrString(value);
        })) {
          return console.warn('botframework-webchat: Every value in "data" map passed to "useTrackEvent" hook must be a non-negative finite number or string.');
        }
      } else if (!isNonNegativeFiniteNumberOrString(data)) {
        return console.warn('botframework-webchat: "data" passed to "useTrackEvent" hook must be a non-negative finite number or string.');
      }
    }

    onTelemetry && onTelemetry((0, _createCustomEvent.default)('event', {
      data: data,
      dimensions: readTelemetryDimensions(),
      level: level,
      name: name
    }));
  }, [onTelemetry, readTelemetryDimensions]);
  return (0, _react.useMemo)(function () {
    var info = trackEvent.bind(null, 'info');
    info.debug = trackEvent.bind(null, 'debug');
    info.error = trackEvent.bind(null, 'error');
    info.info = info;
    info.warn = trackEvent.bind(null, 'warn');
    return info;
  }, [trackEvent]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VUcmFja0V2ZW50LmpzIl0sIm5hbWVzIjpbImlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyIsInZhbHVlIiwiaXNGaW5pdGUiLCJpc09iamVjdCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInVzZVRyYWNrRXZlbnQiLCJvblRlbGVtZXRyeSIsInJlYWRUZWxlbWV0cnlEaW1lbnNpb25zIiwidHJhY2tFdmVudCIsImxldmVsIiwibmFtZSIsImRhdGEiLCJjb25zb2xlIiwid2FybiIsInZhbHVlcyIsImV2ZXJ5IiwiZGltZW5zaW9ucyIsImluZm8iLCJiaW5kIiwiZGVidWciLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsU0FBU0EsaUNBQVQsQ0FBMkNDLEtBQTNDLEVBQWtEO0FBQ2hELFNBQVEsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QkMsUUFBUSxDQUFDRCxLQUFELENBQXJDLElBQWdEQSxLQUFLLElBQUksQ0FBMUQsSUFBZ0UsT0FBT0EsS0FBUCxLQUFpQixRQUF4RjtBQUNEOztBQUVELFNBQVNFLFFBQVQsQ0FBa0JGLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU9HLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTixLQUEvQixNQUEwQyxpQkFBakQ7QUFDRDs7QUFFYyxTQUFTTyxhQUFULEdBQXlCO0FBQUEsNkJBQ2Qsb0NBRGM7QUFBQSxNQUM5QkMsV0FEOEIsd0JBQzlCQSxXQUQ4Qjs7QUFFdEMsTUFBTUMsdUJBQXVCLEdBQUcsMENBQWhDO0FBRUEsTUFBTUMsVUFBVSxHQUFHLHdCQUNqQixVQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsSUFBZCxFQUF1QjtBQUNyQixRQUFJLENBQUNELElBQUQsSUFBUyxPQUFPQSxJQUFQLEtBQWdCLFFBQTdCLEVBQXVDO0FBQ3JDLGFBQU9FLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLCtFQUFiLENBQVA7QUFDRDs7QUFFRCxRQUFJLE9BQU9GLElBQVAsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDL0IsVUFBSVgsUUFBUSxDQUFDVyxJQUFELENBQVosRUFBb0I7QUFDbEIsWUFBSSxDQUFDVixNQUFNLENBQUNhLE1BQVAsQ0FBY0gsSUFBZCxFQUFvQkksS0FBcEIsQ0FBMEIsVUFBQWpCLEtBQUs7QUFBQSxpQkFBSUQsaUNBQWlDLENBQUNDLEtBQUQsQ0FBckM7QUFBQSxTQUEvQixDQUFMLEVBQW1GO0FBQ2pGLGlCQUFPYyxPQUFPLENBQUNDLElBQVIsQ0FDTCxnSUFESyxDQUFQO0FBR0Q7QUFDRixPQU5ELE1BTU8sSUFBSSxDQUFDaEIsaUNBQWlDLENBQUNjLElBQUQsQ0FBdEMsRUFBOEM7QUFDbkQsZUFBT0MsT0FBTyxDQUFDQyxJQUFSLENBQ0wsNkdBREssQ0FBUDtBQUdEO0FBQ0Y7O0FBRURQLElBQUFBLFdBQVcsSUFDVEEsV0FBVyxDQUFDLGdDQUFrQixPQUFsQixFQUEyQjtBQUFFSyxNQUFBQSxJQUFJLEVBQUpBLElBQUY7QUFBUUssTUFBQUEsVUFBVSxFQUFFVCx1QkFBdUIsRUFBM0M7QUFBK0NFLE1BQUFBLEtBQUssRUFBTEEsS0FBL0M7QUFBc0RDLE1BQUFBLElBQUksRUFBSkE7QUFBdEQsS0FBM0IsQ0FBRCxDQURiO0FBRUQsR0F0QmdCLEVBdUJqQixDQUFDSixXQUFELEVBQWNDLHVCQUFkLENBdkJpQixDQUFuQjtBQTBCQSxTQUFPLG9CQUFRLFlBQU07QUFDbkIsUUFBTVUsSUFBSSxHQUFHVCxVQUFVLENBQUNVLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsTUFBdEIsQ0FBYjtBQUVBRCxJQUFBQSxJQUFJLENBQUNFLEtBQUwsR0FBYVgsVUFBVSxDQUFDVSxJQUFYLENBQWdCLElBQWhCLEVBQXNCLE9BQXRCLENBQWI7QUFDQUQsSUFBQUEsSUFBSSxDQUFDRyxLQUFMLEdBQWFaLFVBQVUsQ0FBQ1UsSUFBWCxDQUFnQixJQUFoQixFQUFzQixPQUF0QixDQUFiO0FBQ0FELElBQUFBLElBQUksQ0FBQ0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0FBLElBQUFBLElBQUksQ0FBQ0osSUFBTCxHQUFZTCxVQUFVLENBQUNVLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0IsTUFBdEIsQ0FBWjtBQUVBLFdBQU9ELElBQVA7QUFDRCxHQVRNLEVBU0osQ0FBQ1QsVUFBRCxDQVRJLENBQVA7QUFVRCIsInNvdXJjZVJvb3QiOiJjb21wb25lbnQ6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjcmVhdGVDdXN0b21FdmVudCBmcm9tICcuLi9VdGlscy9jcmVhdGVDdXN0b21FdmVudCc7XG5pbXBvcnQgdXNlUmVhZFRlbGVtZXRyeURpbWVuc2lvbnMgZnJvbSAnLi9pbnRlcm5hbC91c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucyc7XG5pbXBvcnQgdXNlV2ViQ2hhdFVJQ29udGV4dCBmcm9tICcuL2ludGVybmFsL3VzZVdlYkNoYXRVSUNvbnRleHQnO1xuXG5mdW5jdGlvbiBpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyT3JTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSAmJiB2YWx1ZSA+PSAwKSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRyYWNrRXZlbnQoKSB7XG4gIGNvbnN0IHsgb25UZWxlbWV0cnkgfSA9IHVzZVdlYkNoYXRVSUNvbnRleHQoKTtcbiAgY29uc3QgcmVhZFRlbGVtZXRyeURpbWVuc2lvbnMgPSB1c2VSZWFkVGVsZW1ldHJ5RGltZW5zaW9ucygpO1xuXG4gIGNvbnN0IHRyYWNrRXZlbnQgPSB1c2VDYWxsYmFjayhcbiAgICAobGV2ZWwsIG5hbWUsIGRhdGEpID0+IHtcbiAgICAgIGlmICghbmFtZSB8fCB0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybignYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwibmFtZVwiIHBhc3NlZCB0byBcInVzZVRyYWNrRXZlbnRcIiBob29rIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgaWYgKCFPYmplY3QudmFsdWVzKGRhdGEpLmV2ZXJ5KHZhbHVlID0+IGlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXJPclN0cmluZyh2YWx1ZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IEV2ZXJ5IHZhbHVlIGluIFwiZGF0YVwiIG1hcCBwYXNzZWQgdG8gXCJ1c2VUcmFja0V2ZW50XCIgaG9vayBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGZpbml0ZSBudW1iZXIgb3Igc3RyaW5nLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyT3JTdHJpbmcoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKFxuICAgICAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBcImRhdGFcIiBwYXNzZWQgdG8gXCJ1c2VUcmFja0V2ZW50XCIgaG9vayBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGZpbml0ZSBudW1iZXIgb3Igc3RyaW5nLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uVGVsZW1ldHJ5ICYmXG4gICAgICAgIG9uVGVsZW1ldHJ5KGNyZWF0ZUN1c3RvbUV2ZW50KCdldmVudCcsIHsgZGF0YSwgZGltZW5zaW9uczogcmVhZFRlbGVtZXRyeURpbWVuc2lvbnMoKSwgbGV2ZWwsIG5hbWUgfSkpO1xuICAgIH0sXG4gICAgW29uVGVsZW1ldHJ5LCByZWFkVGVsZW1ldHJ5RGltZW5zaW9uc11cbiAgKTtcblxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgaW5mbyA9IHRyYWNrRXZlbnQuYmluZChudWxsLCAnaW5mbycpO1xuXG4gICAgaW5mby5kZWJ1ZyA9IHRyYWNrRXZlbnQuYmluZChudWxsLCAnZGVidWcnKTtcbiAgICBpbmZvLmVycm9yID0gdHJhY2tFdmVudC5iaW5kKG51bGwsICdlcnJvcicpO1xuICAgIGluZm8uaW5mbyA9IGluZm87XG4gICAgaW5mby53YXJuID0gdHJhY2tFdmVudC5iaW5kKG51bGwsICd3YXJuJyk7XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfSwgW3RyYWNrRXZlbnRdKTtcbn1cbiJdfQ==