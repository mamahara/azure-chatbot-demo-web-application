"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLocalizer;

var _react = require("react");

var _getAllLocalizedStrings = _interopRequireDefault(require("../Localization/getAllLocalizedStrings"));

var _useLocalizedGlobalize = _interopRequireDefault(require("./internal/useLocalizedGlobalize"));

var _useLocalizedStrings = _interopRequireDefault(require("./internal/useLocalizedStrings"));

var _isObject = _interopRequireDefault(require("../Utils/isObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DEFAULT_STRINGS = (0, _getAllLocalizedStrings.default)()['en-US'];

function useLocalizer() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      plural = _ref.plural;

  var _useLocalizedGlobaliz = (0, _useLocalizedGlobalize.default)(),
      _useLocalizedGlobaliz2 = _slicedToArray(_useLocalizedGlobaliz, 1),
      globalize = _useLocalizedGlobaliz2[0];

  var localizedStrings = (0, _useLocalizedStrings.default)();
  return (0, _react.useCallback)(function (id) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (plural) {
      if (!(0, _isObject.default)(id)) {
        throw new Error('useLocalizer: Plural string must pass "id" as a map instead of string.');
      } else if (typeof id.other !== 'string') {
        throw new Error('useLocalizer: Plural string must have "id.other" of string.');
      } else if (typeof args[0] !== 'number') {
        throw new Error('useLocalizer: Plural string must have first argument as a number.');
      }

      for (var _i2 = 0, _arr2 = ['zero', 'one', 'two', 'few', 'many']; _i2 < _arr2.length; _i2++) {
        var pluralForm = _arr2[_i2];

        var type = _typeof(id[pluralForm]);

        if (type !== 'string' && type !== 'undefined') {
          throw new Error("useLocalizer: Plural string must have \"id.".concat(pluralForm, "\" of string or undefined."));
        }
      }

      var unsupportedPluralForms = Object.keys(id).filter(function (pluralForm) {
        return !['zero', 'one', 'two', 'few', 'many', 'other'].includes(pluralForm);
      });

      if (unsupportedPluralForms.length) {
        throw new Error("useLocalizer: Plural string \"id\" must be either \"zero\", \"one\", \"two\", \"few\", \"many\", \"other\". But not ".concat(unsupportedPluralForms.map(function (pluralForm) {
          return "\"".concat(pluralForm, "\"");
        }).join(', '), "."));
      }

      id = id[globalize.plural(args[0])] || id.other;
    } else if (typeof id !== 'string') {
      throw new Error('useLocalizer: "id" must be a string.');
    }

    return Object.entries(args).reduce(function (str, _ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          index = _ref3[0],
          arg = _ref3[1];

      return str.replace("$".concat(+index + 1), arg);
    }, localizedStrings[id] || DEFAULT_STRINGS[id] || '');
  }, [globalize, localizedStrings, plural]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VMb2NhbGl6ZXIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9TVFJJTkdTIiwidXNlTG9jYWxpemVyIiwicGx1cmFsIiwiZ2xvYmFsaXplIiwibG9jYWxpemVkU3RyaW5ncyIsImlkIiwiYXJncyIsIkVycm9yIiwib3RoZXIiLCJwbHVyYWxGb3JtIiwidHlwZSIsInVuc3VwcG9ydGVkUGx1cmFsRm9ybXMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJsZW5ndGgiLCJtYXAiLCJqb2luIiwiZW50cmllcyIsInJlZHVjZSIsInN0ciIsImluZGV4IiwiYXJnIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxlQUFlLEdBQUcsdUNBQXlCLE9BQXpCLENBQXhCOztBQUVlLFNBQVNDLFlBQVQsR0FBdUM7QUFBQSxpRkFBSixFQUFJO0FBQUEsTUFBZkMsTUFBZSxRQUFmQSxNQUFlOztBQUFBLDhCQUNoQyxxQ0FEZ0M7QUFBQTtBQUFBLE1BQzdDQyxTQUQ2Qzs7QUFFcEQsTUFBTUMsZ0JBQWdCLEdBQUcsbUNBQXpCO0FBRUEsU0FBTyx3QkFDTCxVQUFDQyxFQUFELEVBQWlCO0FBQUEsc0NBQVRDLElBQVM7QUFBVEEsTUFBQUEsSUFBUztBQUFBOztBQUNmLFFBQUlKLE1BQUosRUFBWTtBQUNWLFVBQUksQ0FBQyx1QkFBU0csRUFBVCxDQUFMLEVBQW1CO0FBQ2pCLGNBQU0sSUFBSUUsS0FBSixDQUFVLHdFQUFWLENBQU47QUFDRCxPQUZELE1BRU8sSUFBSSxPQUFPRixFQUFFLENBQUNHLEtBQVYsS0FBb0IsUUFBeEIsRUFBa0M7QUFDdkMsY0FBTSxJQUFJRCxLQUFKLENBQVUsNkRBQVYsQ0FBTjtBQUNELE9BRk0sTUFFQSxJQUFJLE9BQU9ELElBQUksQ0FBQyxDQUFELENBQVgsS0FBbUIsUUFBdkIsRUFBaUM7QUFDdEMsY0FBTSxJQUFJQyxLQUFKLENBQVUsbUVBQVYsQ0FBTjtBQUNEOztBQUVELGdDQUF5QixDQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLEtBQWhCLEVBQXVCLEtBQXZCLEVBQThCLE1BQTlCLENBQXpCLDZCQUFnRTtBQUEzRCxZQUFNRSxVQUFVLGFBQWhCOztBQUNILFlBQU1DLElBQUksV0FBVUwsRUFBRSxDQUFDSSxVQUFELENBQVosQ0FBVjs7QUFFQSxZQUFJQyxJQUFJLEtBQUssUUFBVCxJQUFxQkEsSUFBSSxLQUFLLFdBQWxDLEVBQStDO0FBQzdDLGdCQUFNLElBQUlILEtBQUosc0RBQXVERSxVQUF2RCxnQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsVUFBTUUsc0JBQXNCLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUixFQUFaLEVBQWdCUyxNQUFoQixDQUM3QixVQUFBTCxVQUFVO0FBQUEsZUFBSSxDQUFDLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsS0FBaEIsRUFBdUIsS0FBdkIsRUFBOEIsTUFBOUIsRUFBc0MsT0FBdEMsRUFBK0NNLFFBQS9DLENBQXdETixVQUF4RCxDQUFMO0FBQUEsT0FEbUIsQ0FBL0I7O0FBSUEsVUFBSUUsc0JBQXNCLENBQUNLLE1BQTNCLEVBQW1DO0FBQ2pDLGNBQU0sSUFBSVQsS0FBSiwrSEFDcUdJLHNCQUFzQixDQUM1SE0sR0FEc0csQ0FDbEcsVUFBQVIsVUFBVTtBQUFBLDZCQUFRQSxVQUFSO0FBQUEsU0FEd0YsRUFFdEdTLElBRnNHLENBRWpHLElBRmlHLENBRHJHLE9BQU47QUFLRDs7QUFFRGIsTUFBQUEsRUFBRSxHQUFHQSxFQUFFLENBQUNGLFNBQVMsQ0FBQ0QsTUFBVixDQUFpQkksSUFBSSxDQUFDLENBQUQsQ0FBckIsQ0FBRCxDQUFGLElBQWlDRCxFQUFFLENBQUNHLEtBQXpDO0FBQ0QsS0E5QkQsTUE4Qk8sSUFBSSxPQUFPSCxFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDakMsWUFBTSxJQUFJRSxLQUFKLENBQVUsc0NBQVYsQ0FBTjtBQUNEOztBQUVELFdBQU9LLE1BQU0sQ0FBQ08sT0FBUCxDQUFlYixJQUFmLEVBQXFCYyxNQUFyQixDQUNMLFVBQUNDLEdBQUQ7QUFBQTtBQUFBLFVBQU9DLEtBQVA7QUFBQSxVQUFjQyxHQUFkOztBQUFBLGFBQXVCRixHQUFHLENBQUNHLE9BQUosWUFBZ0IsQ0FBQ0YsS0FBRCxHQUFTLENBQXpCLEdBQThCQyxHQUE5QixDQUF2QjtBQUFBLEtBREssRUFFTG5CLGdCQUFnQixDQUFDQyxFQUFELENBQWhCLElBQXdCTCxlQUFlLENBQUNLLEVBQUQsQ0FBdkMsSUFBK0MsRUFGMUMsQ0FBUDtBQUlELEdBeENJLEVBeUNMLENBQUNGLFNBQUQsRUFBWUMsZ0JBQVosRUFBOEJGLE1BQTlCLENBekNLLENBQVA7QUEyQ0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgZ2V0QWxsTG9jYWxpemVkU3RyaW5ncyBmcm9tICcuLi9Mb2NhbGl6YXRpb24vZ2V0QWxsTG9jYWxpemVkU3RyaW5ncyc7XG5pbXBvcnQgdXNlTG9jYWxpemVkR2xvYmFsaXplIGZyb20gJy4vaW50ZXJuYWwvdXNlTG9jYWxpemVkR2xvYmFsaXplJztcbmltcG9ydCB1c2VMb2NhbGl6ZWRTdHJpbmdzIGZyb20gJy4vaW50ZXJuYWwvdXNlTG9jYWxpemVkU3RyaW5ncyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi4vVXRpbHMvaXNPYmplY3QnO1xuXG5jb25zdCBERUZBVUxUX1NUUklOR1MgPSBnZXRBbGxMb2NhbGl6ZWRTdHJpbmdzKClbJ2VuLVVTJ107XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxvY2FsaXplcih7IHBsdXJhbCB9ID0ge30pIHtcbiAgY29uc3QgW2dsb2JhbGl6ZV0gPSB1c2VMb2NhbGl6ZWRHbG9iYWxpemUoKTtcbiAgY29uc3QgbG9jYWxpemVkU3RyaW5ncyA9IHVzZUxvY2FsaXplZFN0cmluZ3MoKTtcblxuICByZXR1cm4gdXNlQ2FsbGJhY2soXG4gICAgKGlkLCAuLi5hcmdzKSA9PiB7XG4gICAgICBpZiAocGx1cmFsKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QoaWQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VMb2NhbGl6ZXI6IFBsdXJhbCBzdHJpbmcgbXVzdCBwYXNzIFwiaWRcIiBhcyBhIG1hcCBpbnN0ZWFkIG9mIHN0cmluZy4nKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWQub3RoZXIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VMb2NhbGl6ZXI6IFBsdXJhbCBzdHJpbmcgbXVzdCBoYXZlIFwiaWQub3RoZXJcIiBvZiBzdHJpbmcuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VMb2NhbGl6ZXI6IFBsdXJhbCBzdHJpbmcgbXVzdCBoYXZlIGZpcnN0IGFyZ3VtZW50IGFzIGEgbnVtYmVyLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBwbHVyYWxGb3JtIG9mIFsnemVybycsICdvbmUnLCAndHdvJywgJ2ZldycsICdtYW55J10pIHtcbiAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGlkW3BsdXJhbEZvcm1dO1xuXG4gICAgICAgICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnICYmIHR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVzZUxvY2FsaXplcjogUGx1cmFsIHN0cmluZyBtdXN0IGhhdmUgXCJpZC4ke3BsdXJhbEZvcm19XCIgb2Ygc3RyaW5nIG9yIHVuZGVmaW5lZC5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bnN1cHBvcnRlZFBsdXJhbEZvcm1zID0gT2JqZWN0LmtleXMoaWQpLmZpbHRlcihcbiAgICAgICAgICBwbHVyYWxGb3JtID0+ICFbJ3plcm8nLCAnb25lJywgJ3R3bycsICdmZXcnLCAnbWFueScsICdvdGhlciddLmluY2x1ZGVzKHBsdXJhbEZvcm0pXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVuc3VwcG9ydGVkUGx1cmFsRm9ybXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHVzZUxvY2FsaXplcjogUGx1cmFsIHN0cmluZyBcImlkXCIgbXVzdCBiZSBlaXRoZXIgXCJ6ZXJvXCIsIFwib25lXCIsIFwidHdvXCIsIFwiZmV3XCIsIFwibWFueVwiLCBcIm90aGVyXCIuIEJ1dCBub3QgJHt1bnN1cHBvcnRlZFBsdXJhbEZvcm1zXG4gICAgICAgICAgICAgIC5tYXAocGx1cmFsRm9ybSA9PiBgXCIke3BsdXJhbEZvcm19XCJgKVxuICAgICAgICAgICAgICAuam9pbignLCAnKX0uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZCA9IGlkW2dsb2JhbGl6ZS5wbHVyYWwoYXJnc1swXSldIHx8IGlkLm90aGVyO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndXNlTG9jYWxpemVyOiBcImlkXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGFyZ3MpLnJlZHVjZShcbiAgICAgICAgKHN0ciwgW2luZGV4LCBhcmddKSA9PiBzdHIucmVwbGFjZShgJCR7K2luZGV4ICsgMX1gLCBhcmcpLFxuICAgICAgICBsb2NhbGl6ZWRTdHJpbmdzW2lkXSB8fCBERUZBVUxUX1NUUklOR1NbaWRdIHx8ICcnXG4gICAgICApO1xuICAgIH0sXG4gICAgW2dsb2JhbGl6ZSwgbG9jYWxpemVkU3RyaW5ncywgcGx1cmFsXVxuICApO1xufVxuIl19