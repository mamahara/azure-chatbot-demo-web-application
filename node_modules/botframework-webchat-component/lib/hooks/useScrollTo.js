"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useScrollTo;

var _react = require("react");

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _useGetTranscriptScrollableElement = _interopRequireDefault(require("./internal/useGetTranscriptScrollableElement"));

var _useGetTranscriptActivityElementByID = _interopRequireDefault(require("./internal/useGetTranscriptActivityElementByID"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useScrollTo() {
  var getActivityElementByID = (0, _useGetTranscriptActivityElementByID.default)();
  var getScrollableElement = (0, _useGetTranscriptScrollableElement.default)();
  var scrollTo = (0, _reactScrollToBottom.useScrollTo)();
  return (0, _react.useCallback)(function (position) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$behavior = _ref.behavior,
        behavior = _ref$behavior === void 0 ? 'auto' : _ref$behavior;

    if (!position) {
      throw new Error('botframework-webchat: First argument passed to "useScrollTo" must be a ScrollPosition object.');
    }

    var activityID = position.activityID,
        scrollTop = position.scrollTop;

    if (typeof scrollTop !== 'undefined') {
      scrollTo(scrollTop, {
        behavior: behavior
      });
    } else if (typeof activityID !== 'undefined') {
      var activityElement = getActivityElementByID(activityID);

      if (activityElement) {
        var scrollableElement = getScrollableElement();

        var _activityElement$getC = activityElement.getClientRects(),
            _activityElement$getC2 = _slicedToArray(_activityElement$getC, 1),
            _activityElement$getC3 = _activityElement$getC2[0],
            activityElementHeight = _activityElement$getC3.height,
            activityElementY = _activityElement$getC3.y;

        var _scrollableElement$ge = scrollableElement.getClientRects(),
            _scrollableElement$ge2 = _slicedToArray(_scrollableElement$ge, 1),
            scrollableHeight = _scrollableElement$ge2[0].height;

        var activityElementOffsetTop = activityElementY + scrollableElement.scrollTop;

        var _scrollTop = Math.min(activityElementOffsetTop, activityElementOffsetTop - scrollableHeight + activityElementHeight);

        scrollTo(_scrollTop, {
          behavior: behavior
        });
      }
    }
  }, [getActivityElementByID, getScrollableElement, scrollTo]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VTY3JvbGxUby5qcyJdLCJuYW1lcyI6WyJ1c2VTY3JvbGxUbyIsImdldEFjdGl2aXR5RWxlbWVudEJ5SUQiLCJnZXRTY3JvbGxhYmxlRWxlbWVudCIsInNjcm9sbFRvIiwicG9zaXRpb24iLCJiZWhhdmlvciIsIkVycm9yIiwiYWN0aXZpdHlJRCIsInNjcm9sbFRvcCIsImFjdGl2aXR5RWxlbWVudCIsInNjcm9sbGFibGVFbGVtZW50IiwiZ2V0Q2xpZW50UmVjdHMiLCJhY3Rpdml0eUVsZW1lbnRIZWlnaHQiLCJoZWlnaHQiLCJhY3Rpdml0eUVsZW1lbnRZIiwieSIsInNjcm9sbGFibGVIZWlnaHQiLCJhY3Rpdml0eUVsZW1lbnRPZmZzZXRUb3AiLCJNYXRoIiwibWluIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFZSxTQUFTQSxXQUFULEdBQXVCO0FBQ3BDLE1BQU1DLHNCQUFzQixHQUFHLG1EQUEvQjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLGlEQUE3QjtBQUNBLE1BQU1DLFFBQVEsR0FBRyx1Q0FBakI7QUFFQSxTQUFPLHdCQUNMLFVBQUNDLFFBQUQsRUFBMEM7QUFBQSxtRkFBUCxFQUFPO0FBQUEsNkJBQTdCQyxRQUE2QjtBQUFBLFFBQTdCQSxRQUE2Qiw4QkFBbEIsTUFBa0I7O0FBQ3hDLFFBQUksQ0FBQ0QsUUFBTCxFQUFlO0FBQ2IsWUFBTSxJQUFJRSxLQUFKLENBQ0osK0ZBREksQ0FBTjtBQUdEOztBQUx1QyxRQU9oQ0MsVUFQZ0MsR0FPTkgsUUFQTSxDQU9oQ0csVUFQZ0M7QUFBQSxRQU9wQkMsU0FQb0IsR0FPTkosUUFQTSxDQU9wQkksU0FQb0I7O0FBU3hDLFFBQUksT0FBT0EsU0FBUCxLQUFxQixXQUF6QixFQUFzQztBQUNwQ0wsTUFBQUEsUUFBUSxDQUFDSyxTQUFELEVBQVk7QUFBRUgsUUFBQUEsUUFBUSxFQUFSQTtBQUFGLE9BQVosQ0FBUjtBQUNELEtBRkQsTUFFTyxJQUFJLE9BQU9FLFVBQVAsS0FBc0IsV0FBMUIsRUFBdUM7QUFDNUMsVUFBTUUsZUFBZSxHQUFHUixzQkFBc0IsQ0FBQ00sVUFBRCxDQUE5Qzs7QUFFQSxVQUFJRSxlQUFKLEVBQXFCO0FBQ25CLFlBQU1DLGlCQUFpQixHQUFHUixvQkFBb0IsRUFBOUM7O0FBRG1CLG9DQUU4Q08sZUFBZSxDQUFDRSxjQUFoQixFQUY5QztBQUFBO0FBQUE7QUFBQSxZQUVGQyxxQkFGRSwwQkFFVkMsTUFGVTtBQUFBLFlBRXdCQyxnQkFGeEIsMEJBRXFCQyxDQUZyQjs7QUFBQSxvQ0FHb0JMLGlCQUFpQixDQUFDQyxjQUFsQixFQUhwQjtBQUFBO0FBQUEsWUFHRkssZ0JBSEUsNkJBR1ZILE1BSFU7O0FBS25CLFlBQU1JLHdCQUF3QixHQUFHSCxnQkFBZ0IsR0FBR0osaUJBQWlCLENBQUNGLFNBQXRFOztBQUVBLFlBQU1BLFVBQVMsR0FBR1UsSUFBSSxDQUFDQyxHQUFMLENBQ2hCRix3QkFEZ0IsRUFFaEJBLHdCQUF3QixHQUFHRCxnQkFBM0IsR0FBOENKLHFCQUY5QixDQUFsQjs7QUFLQVQsUUFBQUEsUUFBUSxDQUFDSyxVQUFELEVBQVk7QUFBRUgsVUFBQUEsUUFBUSxFQUFSQTtBQUFGLFNBQVosQ0FBUjtBQUNEO0FBQ0Y7QUFDRixHQTlCSSxFQStCTCxDQUFDSixzQkFBRCxFQUF5QkMsb0JBQXpCLEVBQStDQyxRQUEvQyxDQS9CSyxDQUFQO0FBaUNEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNjcm9sbFRvIGFzIHVzZVNjcm9sbFRvQm90dG9tU2Nyb2xsVG8gfSBmcm9tICdyZWFjdC1zY3JvbGwtdG8tYm90dG9tJztcblxuaW1wb3J0IHVzZUdldFRyYW5zY3JpcHRTY3JvbGxhYmxlRWxlbWVudCBmcm9tICcuL2ludGVybmFsL3VzZUdldFRyYW5zY3JpcHRTY3JvbGxhYmxlRWxlbWVudCc7XG5pbXBvcnQgdXNlR2V0VHJhbnNjcmlwdEFjdGl2aXR5RWxlbWVudEJ5SUQgZnJvbSAnLi9pbnRlcm5hbC91c2VHZXRUcmFuc2NyaXB0QWN0aXZpdHlFbGVtZW50QnlJRCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVNjcm9sbFRvKCkge1xuICBjb25zdCBnZXRBY3Rpdml0eUVsZW1lbnRCeUlEID0gdXNlR2V0VHJhbnNjcmlwdEFjdGl2aXR5RWxlbWVudEJ5SUQoKTtcbiAgY29uc3QgZ2V0U2Nyb2xsYWJsZUVsZW1lbnQgPSB1c2VHZXRUcmFuc2NyaXB0U2Nyb2xsYWJsZUVsZW1lbnQoKTtcbiAgY29uc3Qgc2Nyb2xsVG8gPSB1c2VTY3JvbGxUb0JvdHRvbVNjcm9sbFRvKCk7XG5cbiAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgIChwb3NpdGlvbiwgeyBiZWhhdmlvciA9ICdhdXRvJyB9ID0ge30pID0+IHtcbiAgICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdib3RmcmFtZXdvcmstd2ViY2hhdDogRmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIFwidXNlU2Nyb2xsVG9cIiBtdXN0IGJlIGEgU2Nyb2xsUG9zaXRpb24gb2JqZWN0LidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBhY3Rpdml0eUlELCBzY3JvbGxUb3AgfSA9IHBvc2l0aW9uO1xuXG4gICAgICBpZiAodHlwZW9mIHNjcm9sbFRvcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2Nyb2xsVG8oc2Nyb2xsVG9wLCB7IGJlaGF2aW9yIH0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aXZpdHlJRCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgYWN0aXZpdHlFbGVtZW50ID0gZ2V0QWN0aXZpdHlFbGVtZW50QnlJRChhY3Rpdml0eUlEKTtcblxuICAgICAgICBpZiAoYWN0aXZpdHlFbGVtZW50KSB7XG4gICAgICAgICAgY29uc3Qgc2Nyb2xsYWJsZUVsZW1lbnQgPSBnZXRTY3JvbGxhYmxlRWxlbWVudCgpO1xuICAgICAgICAgIGNvbnN0IFt7IGhlaWdodDogYWN0aXZpdHlFbGVtZW50SGVpZ2h0LCB5OiBhY3Rpdml0eUVsZW1lbnRZIH1dID0gYWN0aXZpdHlFbGVtZW50LmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgICAgY29uc3QgW3sgaGVpZ2h0OiBzY3JvbGxhYmxlSGVpZ2h0IH1dID0gc2Nyb2xsYWJsZUVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKTtcblxuICAgICAgICAgIGNvbnN0IGFjdGl2aXR5RWxlbWVudE9mZnNldFRvcCA9IGFjdGl2aXR5RWxlbWVudFkgKyBzY3JvbGxhYmxlRWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIGFjdGl2aXR5RWxlbWVudE9mZnNldFRvcCxcbiAgICAgICAgICAgIGFjdGl2aXR5RWxlbWVudE9mZnNldFRvcCAtIHNjcm9sbGFibGVIZWlnaHQgKyBhY3Rpdml0eUVsZW1lbnRIZWlnaHRcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgc2Nyb2xsVG8oc2Nyb2xsVG9wLCB7IGJlaGF2aW9yIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbZ2V0QWN0aXZpdHlFbGVtZW50QnlJRCwgZ2V0U2Nyb2xsYWJsZUVsZW1lbnQsIHNjcm9sbFRvXVxuICApO1xufVxuIl19