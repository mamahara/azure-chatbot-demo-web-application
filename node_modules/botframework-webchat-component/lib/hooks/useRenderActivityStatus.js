"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useRenderActivityStatus;

var _react = require("react");

var _useCreateActivityStatusRenderer = _interopRequireDefault(require("./useCreateActivityStatusRenderer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// In the old days, the useRenderActivity() will be called like this:
//
// const element = useRenderActivityStatus({ activity, nextVisibleActivity });
// In the new days, the useCreateActivityRenderer() is a 3-pass function:
//
// const createActivityStatusRenderer = useCreateActivityStatusRenderer();
// const renderActivityStatus = createActivityStatusRenderer({ activity, hideTimestamp });
// const element = renderActivityStatus && renderActivityStatus(undefined);
// Despite deprecation, useRenderActivityStatus() can be retrofitted using useCreateActivityStatusRenderer().
var RETURN_FALSE = function RETURN_FALSE() {
  return false;
};

var showDeprecationNotes = true;

function useRenderActivityStatus(_ref) {
  var activity = _ref.activity,
      nextVisibleActivity = _ref.nextVisibleActivity;

  if (showDeprecationNotes) {
    console.warn('botframework-webchat: "useRenderActivityStatus" is deprecated and will be removed on or after 2022-07-22. Please use "useCreateActivityStatusRenderer()" instead.');
    showDeprecationNotes = false;
  }

  var createActivityStatusRenderer = (0, _useCreateActivityStatusRenderer.default)();
  return (0, _react.useMemo)(function () {
    var renderActivityStatus = createActivityStatusRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
    return renderActivityStatus || RETURN_FALSE;
  }, [activity, createActivityStatusRenderer, nextVisibleActivity]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VSZW5kZXJBY3Rpdml0eVN0YXR1cy5qcyJdLCJuYW1lcyI6WyJSRVRVUk5fRkFMU0UiLCJzaG93RGVwcmVjYXRpb25Ob3RlcyIsInVzZVJlbmRlckFjdGl2aXR5U3RhdHVzIiwiYWN0aXZpdHkiLCJuZXh0VmlzaWJsZUFjdGl2aXR5IiwiY29uc29sZSIsIndhcm4iLCJjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIiwicmVuZGVyQWN0aXZpdHlTdGF0dXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBLElBQU1BLFlBQVksR0FBRyxTQUFmQSxZQUFlO0FBQUEsU0FBTSxLQUFOO0FBQUEsQ0FBckI7O0FBRUEsSUFBSUMsb0JBQW9CLEdBQUcsSUFBM0I7O0FBRWUsU0FBU0MsdUJBQVQsT0FBb0U7QUFBQSxNQUFqQ0MsUUFBaUMsUUFBakNBLFFBQWlDO0FBQUEsTUFBdkJDLG1CQUF1QixRQUF2QkEsbUJBQXVCOztBQUNqRixNQUFJSCxvQkFBSixFQUEwQjtBQUN4QkksSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0UsbUtBREY7QUFJQUwsSUFBQUEsb0JBQW9CLEdBQUcsS0FBdkI7QUFDRDs7QUFFRCxNQUFNTSw0QkFBNEIsR0FBRywrQ0FBckM7QUFFQSxTQUFPLG9CQUFRLFlBQU07QUFDbkIsUUFBTUMsb0JBQW9CLEdBQUdELDRCQUE0QixDQUFDO0FBQUVKLE1BQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZQyxNQUFBQSxtQkFBbUIsRUFBbkJBO0FBQVosS0FBRCxDQUF6RDtBQUVBLFdBQU9JLG9CQUFvQixJQUFJUixZQUEvQjtBQUNELEdBSk0sRUFJSixDQUFDRyxRQUFELEVBQVdJLDRCQUFYLEVBQXlDSCxtQkFBekMsQ0FKSSxDQUFQO0FBS0QiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIGZyb20gJy4vdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcic7XG5cbi8vIEluIHRoZSBvbGQgZGF5cywgdGhlIHVzZVJlbmRlckFjdGl2aXR5KCkgd2lsbCBiZSBjYWxsZWQgbGlrZSB0aGlzOlxuLy9cbi8vIGNvbnN0IGVsZW1lbnQgPSB1c2VSZW5kZXJBY3Rpdml0eVN0YXR1cyh7IGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pO1xuXG4vLyBJbiB0aGUgbmV3IGRheXMsIHRoZSB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVyKCkgaXMgYSAzLXBhc3MgZnVuY3Rpb246XG4vL1xuLy8gY29uc3QgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciA9IHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKTtcbi8vIGNvbnN0IHJlbmRlckFjdGl2aXR5U3RhdHVzID0gY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcih7IGFjdGl2aXR5LCBoaWRlVGltZXN0YW1wIH0pO1xuLy8gY29uc3QgZWxlbWVudCA9IHJlbmRlckFjdGl2aXR5U3RhdHVzICYmIHJlbmRlckFjdGl2aXR5U3RhdHVzKHVuZGVmaW5lZCk7XG5cbi8vIERlc3BpdGUgZGVwcmVjYXRpb24sIHVzZVJlbmRlckFjdGl2aXR5U3RhdHVzKCkgY2FuIGJlIHJldHJvZml0dGVkIHVzaW5nIHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKS5cblxuY29uc3QgUkVUVVJOX0ZBTFNFID0gKCkgPT4gZmFsc2U7XG5cbmxldCBzaG93RGVwcmVjYXRpb25Ob3RlcyA9IHRydWU7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVJlbmRlckFjdGl2aXR5U3RhdHVzKHsgYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkgfSkge1xuICBpZiAoc2hvd0RlcHJlY2F0aW9uTm90ZXMpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFwidXNlUmVuZGVyQWN0aXZpdHlTdGF0dXNcIiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgb24gb3IgYWZ0ZXIgMjAyMi0wNy0yMi4gUGxlYXNlIHVzZSBcInVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKVwiIGluc3RlYWQuJ1xuICAgICk7XG5cbiAgICBzaG93RGVwcmVjYXRpb25Ob3RlcyA9IGZhbHNlO1xuICB9XG5cbiAgY29uc3QgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciA9IHVzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoKTtcblxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgcmVuZGVyQWN0aXZpdHlTdGF0dXMgPSBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyKHsgYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkgfSk7XG5cbiAgICByZXR1cm4gcmVuZGVyQWN0aXZpdHlTdGF0dXMgfHwgUkVUVVJOX0ZBTFNFO1xuICB9LCBbYWN0aXZpdHksIGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIsIG5leHRWaXNpYmxlQWN0aXZpdHldKTtcbn1cbiJdfQ==