"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityStatusRenderer;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _react = _interopRequireWildcard(require("react"));

var _useGetSendTimeoutForActivity = _interopRequireDefault(require("./useGetSendTimeoutForActivity"));

var _useTimePassed = _interopRequireDefault(require("./internal/useTimePassed"));

var _useWebChatUIContext2 = _interopRequireDefault(require("./internal/useWebChatUIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,
    SENDING = _Constants$ActivityCl.SENDING,
    SENT = _Constants$ActivityCl.SENT;

var ActivityStatusContainer = function ActivityStatusContainer(_ref) {
  var activity = _ref.activity,
      hideTimestamp = _ref.hideTimestamp,
      nextVisibleActivity = _ref.nextVisibleActivity;

  var _useWebChatUIContext = (0, _useWebChatUIContext2.default)(),
      createActivityStatusRenderer = _useWebChatUIContext.activityStatusRenderer;

  var getSendTimeoutForActivity = (0, _useGetSendTimeoutForActivity.default)(); // SEND_FAILED from the activity is ignored, and is instead based on styleOptions.sendTimeout.
  // Note that the derived state is time-sensitive. The useTimePassed() hook is used to make sure it changes over time.

  var _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.clientTimestamp,
      clientTimestamp = _activity$channelData2 === void 0 ? 0 : _activity$channelData2,
      state = _activity$channelData.state,
      role = activity.from.role;
  var activitySent = state !== SENDING && state !== SEND_FAILED;
  var fromUser = role === 'user';
  var sendTimeout = getSendTimeoutForActivity({
    activity: activity
  });
  var pastTimeout = (0, _useTimePassed.default)(fromUser && !activitySent ? new Date(clientTimestamp).getTime() + sendTimeout : 0);
  var sendState = activitySent || !fromUser ? SENT : pastTimeout ? SEND_FAILED : SENDING;
  return (0, _react.useMemo)(function () {
    return createActivityStatusRenderer({
      activity: activity,
      hideTimestamp: hideTimestamp,
      nextVisibleActivity: nextVisibleActivity,
      // "nextVisibleActivity" is for backward compatibility, please remove this line on or after 2022-07-22.
      sameTimestampGroup: hideTimestamp,
      // "sameTimestampGroup" is for backward compatibility, please remove this line on or after 2022-07-22.
      sendState: sendState
    });
  }, [activity, createActivityStatusRenderer, hideTimestamp, nextVisibleActivity, sendState]);
};

function useCreateActivityStatusRenderer() {
  return (0, _react.useMemo)(function () {
    return function (_ref2) {
      var activity = _ref2.activity,
          nextVisibleActivity = _ref2.nextVisibleActivity;
      return function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            hideTimestamp = _ref3.hideTimestamp;

        return /*#__PURE__*/_react.default.createElement(ActivityStatusContainer, {
          activity: activity,
          hideTimestamp: hideTimestamp,
          nextVisibleActivity: nextVisibleActivity
        });
      };
    };
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rcy91c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyLmpzIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIkFjdGl2aXR5Q2xpZW50U3RhdGUiLCJTRU5EX0ZBSUxFRCIsIlNFTkRJTkciLCJTRU5UIiwiQWN0aXZpdHlTdGF0dXNDb250YWluZXIiLCJhY3Rpdml0eSIsImhpZGVUaW1lc3RhbXAiLCJuZXh0VmlzaWJsZUFjdGl2aXR5IiwiY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciIsImFjdGl2aXR5U3RhdHVzUmVuZGVyZXIiLCJnZXRTZW5kVGltZW91dEZvckFjdGl2aXR5IiwiY2hhbm5lbERhdGEiLCJjbGllbnRUaW1lc3RhbXAiLCJzdGF0ZSIsInJvbGUiLCJmcm9tIiwiYWN0aXZpdHlTZW50IiwiZnJvbVVzZXIiLCJzZW5kVGltZW91dCIsInBhc3RUaW1lb3V0IiwiRGF0ZSIsImdldFRpbWUiLCJzZW5kU3RhdGUiLCJzYW1lVGltZXN0YW1wR3JvdXAiLCJ1c2VDcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7NEJBSUlBLGtDLENBREZDLG1CO0lBQXVCQyxXLHlCQUFBQSxXO0lBQWFDLE8seUJBQUFBLE87SUFBU0MsSSx5QkFBQUEsSTs7QUFHL0MsSUFBTUMsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixPQUFzRDtBQUFBLE1BQW5EQyxRQUFtRCxRQUFuREEsUUFBbUQ7QUFBQSxNQUF6Q0MsYUFBeUMsUUFBekNBLGFBQXlDO0FBQUEsTUFBMUJDLG1CQUEwQixRQUExQkEsbUJBQTBCOztBQUFBLDZCQUNuQixvQ0FEbUI7QUFBQSxNQUNwREMsNEJBRG9ELHdCQUM1RUMsc0JBRDRFOztBQUVwRixNQUFNQyx5QkFBeUIsR0FBRyw0Q0FBbEMsQ0FGb0YsQ0FJcEY7QUFDQTs7QUFMb0YsOEJBU2hGTCxRQVRnRixDQU9sRk0sV0FQa0Y7QUFBQSw2REFPcEMsRUFQb0M7QUFBQSxxREFPbkVDLGVBUG1FO0FBQUEsTUFPbkVBLGVBUG1FLHVDQU9qRCxDQVBpRDtBQUFBLE1BTzlDQyxLQVA4Qyx5QkFPOUNBLEtBUDhDO0FBQUEsTUFRMUVDLElBUjBFLEdBU2hGVCxRQVRnRixDQVFsRlUsSUFSa0YsQ0FRMUVELElBUjBFO0FBV3BGLE1BQU1FLFlBQVksR0FBR0gsS0FBSyxLQUFLWCxPQUFWLElBQXFCVyxLQUFLLEtBQUtaLFdBQXBEO0FBQ0EsTUFBTWdCLFFBQVEsR0FBR0gsSUFBSSxLQUFLLE1BQTFCO0FBQ0EsTUFBTUksV0FBVyxHQUFHUix5QkFBeUIsQ0FBQztBQUFFTCxJQUFBQSxRQUFRLEVBQVJBO0FBQUYsR0FBRCxDQUE3QztBQUVBLE1BQU1jLFdBQVcsR0FBRyw0QkFBY0YsUUFBUSxJQUFJLENBQUNELFlBQWIsR0FBNEIsSUFBSUksSUFBSixDQUFTUixlQUFULEVBQTBCUyxPQUExQixLQUFzQ0gsV0FBbEUsR0FBZ0YsQ0FBOUYsQ0FBcEI7QUFFQSxNQUFNSSxTQUFTLEdBQUdOLFlBQVksSUFBSSxDQUFDQyxRQUFqQixHQUE0QmQsSUFBNUIsR0FBbUNnQixXQUFXLEdBQUdsQixXQUFILEdBQWlCQyxPQUFqRjtBQUVBLFNBQU8sb0JBQ0w7QUFBQSxXQUNFTSw0QkFBNEIsQ0FBQztBQUMzQkgsTUFBQUEsUUFBUSxFQUFSQSxRQUQyQjtBQUUzQkMsTUFBQUEsYUFBYSxFQUFiQSxhQUYyQjtBQUczQkMsTUFBQUEsbUJBQW1CLEVBQW5CQSxtQkFIMkI7QUFHTjtBQUNyQmdCLE1BQUFBLGtCQUFrQixFQUFFakIsYUFKTztBQUlRO0FBQ25DZ0IsTUFBQUEsU0FBUyxFQUFUQTtBQUwyQixLQUFELENBRDlCO0FBQUEsR0FESyxFQVNMLENBQUNqQixRQUFELEVBQVdHLDRCQUFYLEVBQXlDRixhQUF6QyxFQUF3REMsbUJBQXhELEVBQTZFZSxTQUE3RSxDQVRLLENBQVA7QUFXRCxDQTlCRDs7QUFnQ2UsU0FBU0UsK0JBQVQsR0FBMkM7QUFDeEQsU0FBTyxvQkFDTDtBQUFBLFdBQU07QUFBQSxVQUFHbkIsUUFBSCxTQUFHQSxRQUFIO0FBQUEsVUFBYUUsbUJBQWIsU0FBYUEsbUJBQWI7QUFBQSxhQUF1QztBQUFBLHdGQUFxQixFQUFyQjtBQUFBLFlBQUdELGFBQUgsU0FBR0EsYUFBSDs7QUFBQSw0QkFDM0MsNkJBQUMsdUJBQUQ7QUFDRSxVQUFBLFFBQVEsRUFBRUQsUUFEWjtBQUVFLFVBQUEsYUFBYSxFQUFFQyxhQUZqQjtBQUdFLFVBQUEsbUJBQW1CLEVBQUVDO0FBSHZCLFVBRDJDO0FBQUEsT0FBdkM7QUFBQSxLQUFOO0FBQUEsR0FESyxFQVFMLEVBUkssQ0FBUDtBQVVEIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcbmltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlR2V0U2VuZFRpbWVvdXRGb3JBY3Rpdml0eSBmcm9tICcuL3VzZUdldFNlbmRUaW1lb3V0Rm9yQWN0aXZpdHknO1xuaW1wb3J0IHVzZVRpbWVQYXNzZWQgZnJvbSAnLi9pbnRlcm5hbC91c2VUaW1lUGFzc2VkJztcbmltcG9ydCB1c2VXZWJDaGF0VUlDb250ZXh0IGZyb20gJy4vaW50ZXJuYWwvdXNlV2ViQ2hhdFVJQ29udGV4dCc7XG5cbmNvbnN0IHtcbiAgQWN0aXZpdHlDbGllbnRTdGF0ZTogeyBTRU5EX0ZBSUxFRCwgU0VORElORywgU0VOVCB9XG59ID0gQ29uc3RhbnRzO1xuXG5jb25zdCBBY3Rpdml0eVN0YXR1c0NvbnRhaW5lciA9ICh7IGFjdGl2aXR5LCBoaWRlVGltZXN0YW1wLCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pID0+IHtcbiAgY29uc3QgeyBhY3Rpdml0eVN0YXR1c1JlbmRlcmVyOiBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyIH0gPSB1c2VXZWJDaGF0VUlDb250ZXh0KCk7XG4gIGNvbnN0IGdldFNlbmRUaW1lb3V0Rm9yQWN0aXZpdHkgPSB1c2VHZXRTZW5kVGltZW91dEZvckFjdGl2aXR5KCk7XG5cbiAgLy8gU0VORF9GQUlMRUQgZnJvbSB0aGUgYWN0aXZpdHkgaXMgaWdub3JlZCwgYW5kIGlzIGluc3RlYWQgYmFzZWQgb24gc3R5bGVPcHRpb25zLnNlbmRUaW1lb3V0LlxuICAvLyBOb3RlIHRoYXQgdGhlIGRlcml2ZWQgc3RhdGUgaXMgdGltZS1zZW5zaXRpdmUuIFRoZSB1c2VUaW1lUGFzc2VkKCkgaG9vayBpcyB1c2VkIHRvIG1ha2Ugc3VyZSBpdCBjaGFuZ2VzIG92ZXIgdGltZS5cbiAgY29uc3Qge1xuICAgIGNoYW5uZWxEYXRhOiB7IGNsaWVudFRpbWVzdGFtcCA9IDAsIHN0YXRlIH0gPSB7fSxcbiAgICBmcm9tOiB7IHJvbGUgfVxuICB9ID0gYWN0aXZpdHk7XG5cbiAgY29uc3QgYWN0aXZpdHlTZW50ID0gc3RhdGUgIT09IFNFTkRJTkcgJiYgc3RhdGUgIT09IFNFTkRfRkFJTEVEO1xuICBjb25zdCBmcm9tVXNlciA9IHJvbGUgPT09ICd1c2VyJztcbiAgY29uc3Qgc2VuZFRpbWVvdXQgPSBnZXRTZW5kVGltZW91dEZvckFjdGl2aXR5KHsgYWN0aXZpdHkgfSk7XG5cbiAgY29uc3QgcGFzdFRpbWVvdXQgPSB1c2VUaW1lUGFzc2VkKGZyb21Vc2VyICYmICFhY3Rpdml0eVNlbnQgPyBuZXcgRGF0ZShjbGllbnRUaW1lc3RhbXApLmdldFRpbWUoKSArIHNlbmRUaW1lb3V0IDogMCk7XG5cbiAgY29uc3Qgc2VuZFN0YXRlID0gYWN0aXZpdHlTZW50IHx8ICFmcm9tVXNlciA/IFNFTlQgOiBwYXN0VGltZW91dCA/IFNFTkRfRkFJTEVEIDogU0VORElORztcblxuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcih7XG4gICAgICAgIGFjdGl2aXR5LFxuICAgICAgICBoaWRlVGltZXN0YW1wLFxuICAgICAgICBuZXh0VmlzaWJsZUFjdGl2aXR5LCAvLyBcIm5leHRWaXNpYmxlQWN0aXZpdHlcIiBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgcGxlYXNlIHJlbW92ZSB0aGlzIGxpbmUgb24gb3IgYWZ0ZXIgMjAyMi0wNy0yMi5cbiAgICAgICAgc2FtZVRpbWVzdGFtcEdyb3VwOiBoaWRlVGltZXN0YW1wLCAvLyBcInNhbWVUaW1lc3RhbXBHcm91cFwiIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBwbGVhc2UgcmVtb3ZlIHRoaXMgbGluZSBvbiBvciBhZnRlciAyMDIyLTA3LTIyLlxuICAgICAgICBzZW5kU3RhdGVcbiAgICAgIH0pLFxuICAgIFthY3Rpdml0eSwgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciwgaGlkZVRpbWVzdGFtcCwgbmV4dFZpc2libGVBY3Rpdml0eSwgc2VuZFN0YXRlXVxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpIHtcbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT4gKHsgYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkgfSkgPT4gKHsgaGlkZVRpbWVzdGFtcCB9ID0ge30pID0+IChcbiAgICAgIDxBY3Rpdml0eVN0YXR1c0NvbnRhaW5lclxuICAgICAgICBhY3Rpdml0eT17YWN0aXZpdHl9XG4gICAgICAgIGhpZGVUaW1lc3RhbXA9e2hpZGVUaW1lc3RhbXB9XG4gICAgICAgIG5leHRWaXNpYmxlQWN0aXZpdHk9e25leHRWaXNpYmxlQWN0aXZpdHl9XG4gICAgICAvPlxuICAgICksXG4gICAgW11cbiAgKTtcbn1cbiJdfQ==