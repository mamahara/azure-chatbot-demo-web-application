"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useCreateActivityRendererInternal;

var _react = require("react");

var _useRenderAttachment = _interopRequireDefault(require("../useRenderAttachment"));

var _useWebChatUIContext2 = _interopRequireDefault(require("./useWebChatUIContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useCreateActivityRendererInternal(renderAttachmentOverride) {
  var _useWebChatUIContext = (0, _useWebChatUIContext2.default)(),
      createActivityRenderer = _useWebChatUIContext.activityRenderer;

  var defaultRenderAttachment = (0, _useRenderAttachment.default)();
  var renderAttachment = renderAttachmentOverride || defaultRenderAttachment;
  return (0, _react.useMemo)(function () {
    return function () {
      var renderActivity = createActivityRenderer.apply(void 0, arguments);

      if (!renderActivity) {
        return false;
      }

      return function (renderActivityOptions) {
        var activityElement = renderActivity(renderAttachment, renderActivityOptions); // "activityElement" cannot be false. If the middleware want to hide the "activityElement", it should return "false" when we call createActivityRenderer().

        activityElement || console.warn('botframework-webchat: To hide an activity, the activity renderer should return false. It should not return a function that will return false when called.');
        return activityElement;
      };
    };
  }, [createActivityRenderer, renderAttachment]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy9pbnRlcm5hbC91c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVySW50ZXJuYWwuanMiXSwibmFtZXMiOlsidXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlckludGVybmFsIiwicmVuZGVyQXR0YWNobWVudE92ZXJyaWRlIiwiY3JlYXRlQWN0aXZpdHlSZW5kZXJlciIsImFjdGl2aXR5UmVuZGVyZXIiLCJkZWZhdWx0UmVuZGVyQXR0YWNobWVudCIsInJlbmRlckF0dGFjaG1lbnQiLCJyZW5kZXJBY3Rpdml0eSIsInJlbmRlckFjdGl2aXR5T3B0aW9ucyIsImFjdGl2aXR5RWxlbWVudCIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7QUFFZSxTQUFTQSxpQ0FBVCxDQUEyQ0Msd0JBQTNDLEVBQXFFO0FBQUEsNkJBQzdCLG9DQUQ2QjtBQUFBLE1BQ3hEQyxzQkFEd0Qsd0JBQzFFQyxnQkFEMEU7O0FBRWxGLE1BQU1DLHVCQUF1QixHQUFHLG1DQUFoQztBQUVBLE1BQU1DLGdCQUFnQixHQUFHSix3QkFBd0IsSUFBSUcsdUJBQXJEO0FBRUEsU0FBTyxvQkFDTDtBQUFBLFdBQU0sWUFBc0M7QUFDMUMsVUFBTUUsY0FBYyxHQUFHSixzQkFBc0IsTUFBdEIsbUJBQXZCOztBQUVBLFVBQUksQ0FBQ0ksY0FBTCxFQUFxQjtBQUNuQixlQUFPLEtBQVA7QUFDRDs7QUFFRCxhQUFPLFVBQUFDLHFCQUFxQixFQUFJO0FBQzlCLFlBQU1DLGVBQWUsR0FBR0YsY0FBYyxDQUFDRCxnQkFBRCxFQUFtQkUscUJBQW5CLENBQXRDLENBRDhCLENBRzlCOztBQUNBQyxRQUFBQSxlQUFlLElBQ2JDLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLDJKQURGLENBREY7QUFLQSxlQUFPRixlQUFQO0FBQ0QsT0FWRDtBQVdELEtBbEJEO0FBQUEsR0FESyxFQW9CTCxDQUFDTixzQkFBRCxFQUF5QkcsZ0JBQXpCLENBcEJLLENBQVA7QUFzQkQiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB1c2VSZW5kZXJBdHRhY2htZW50IGZyb20gJy4uL3VzZVJlbmRlckF0dGFjaG1lbnQnO1xuaW1wb3J0IHVzZVdlYkNoYXRVSUNvbnRleHQgZnJvbSAnLi91c2VXZWJDaGF0VUlDb250ZXh0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlckludGVybmFsKHJlbmRlckF0dGFjaG1lbnRPdmVycmlkZSkge1xuICBjb25zdCB7IGFjdGl2aXR5UmVuZGVyZXI6IGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIgfSA9IHVzZVdlYkNoYXRVSUNvbnRleHQoKTtcbiAgY29uc3QgZGVmYXVsdFJlbmRlckF0dGFjaG1lbnQgPSB1c2VSZW5kZXJBdHRhY2htZW50KCk7XG5cbiAgY29uc3QgcmVuZGVyQXR0YWNobWVudCA9IHJlbmRlckF0dGFjaG1lbnRPdmVycmlkZSB8fCBkZWZhdWx0UmVuZGVyQXR0YWNobWVudDtcblxuICByZXR1cm4gdXNlTWVtbyhcbiAgICAoKSA9PiAoLi4uY3JlYXRlQWN0aXZpdHlSZW5kZXJlck9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHJlbmRlckFjdGl2aXR5ID0gY3JlYXRlQWN0aXZpdHlSZW5kZXJlciguLi5jcmVhdGVBY3Rpdml0eVJlbmRlcmVyT3B0aW9ucyk7XG5cbiAgICAgIGlmICghcmVuZGVyQWN0aXZpdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyQWN0aXZpdHlPcHRpb25zID0+IHtcbiAgICAgICAgY29uc3QgYWN0aXZpdHlFbGVtZW50ID0gcmVuZGVyQWN0aXZpdHkocmVuZGVyQXR0YWNobWVudCwgcmVuZGVyQWN0aXZpdHlPcHRpb25zKTtcblxuICAgICAgICAvLyBcImFjdGl2aXR5RWxlbWVudFwiIGNhbm5vdCBiZSBmYWxzZS4gSWYgdGhlIG1pZGRsZXdhcmUgd2FudCB0byBoaWRlIHRoZSBcImFjdGl2aXR5RWxlbWVudFwiLCBpdCBzaG91bGQgcmV0dXJuIFwiZmFsc2VcIiB3aGVuIHdlIGNhbGwgY3JlYXRlQWN0aXZpdHlSZW5kZXJlcigpLlxuICAgICAgICBhY3Rpdml0eUVsZW1lbnQgfHxcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAnYm90ZnJhbWV3b3JrLXdlYmNoYXQ6IFRvIGhpZGUgYW4gYWN0aXZpdHksIHRoZSBhY3Rpdml0eSByZW5kZXJlciBzaG91bGQgcmV0dXJuIGZhbHNlLiBJdCBzaG91bGQgbm90IHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gZmFsc2Ugd2hlbiBjYWxsZWQuJ1xuICAgICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGFjdGl2aXR5RWxlbWVudDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBbY3JlYXRlQWN0aXZpdHlSZW5kZXJlciwgcmVuZGVyQXR0YWNobWVudF1cbiAgKTtcbn1cbiJdfQ==