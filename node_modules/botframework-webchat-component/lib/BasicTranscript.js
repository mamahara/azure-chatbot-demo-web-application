"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glamor = require("glamor");

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _BasicTypingIndicator = _interopRequireDefault(require("./BasicTypingIndicator"));

var _Fade = _interopRequireDefault(require("./Utils/Fade"));

var _firstTabbableDescendant = _interopRequireDefault(require("./Utils/firstTabbableDescendant"));

var _getActivityUniqueId = _interopRequireDefault(require("./Utils/getActivityUniqueId"));

var _intersectionOf = _interopRequireDefault(require("./Utils/intersectionOf"));

var _isZeroOrPositive = _interopRequireDefault(require("./Utils/isZeroOrPositive"));

var _removeInline = _interopRequireDefault(require("./Utils/removeInline"));

var _ScreenReaderActivity = _interopRequireDefault(require("./ScreenReaderActivity"));

var _ScrollToEndButton = _interopRequireDefault(require("./Activity/ScrollToEndButton"));

var _Speak = _interopRequireDefault(require("./Activity/Speak"));

var _useActivities3 = _interopRequireDefault(require("./hooks/useActivities"));

var _useCreateActivityRenderer = _interopRequireDefault(require("./hooks/useCreateActivityRenderer"));

var _useCreateActivityStatusRenderer = _interopRequireDefault(require("./hooks/useCreateActivityStatusRenderer"));

var _useCreateAvatarRenderer = _interopRequireDefault(require("./hooks/useCreateAvatarRenderer"));

var _useDirection3 = _interopRequireDefault(require("./hooks/useDirection"));

var _useFocus = _interopRequireDefault(require("./hooks/useFocus"));

var _useGroupActivities = _interopRequireDefault(require("./hooks/useGroupActivities"));

var _useLocalizer = _interopRequireDefault(require("./hooks/useLocalizer"));

var _useMemoize = _interopRequireDefault(require("./hooks/internal/useMemoize"));

var _useStyleOptions5 = _interopRequireDefault(require("./hooks/useStyleOptions"));

var _useStyleSet5 = _interopRequireDefault(require("./hooks/useStyleSet"));

var _useTranscriptActivityElementsRef = _interopRequireDefault(require("./hooks/internal/useTranscriptActivityElementsRef"));

var _useTranscriptRootElementRef = _interopRequireDefault(require("./hooks/internal/useTranscriptRootElementRef"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ROOT_CSS = (0, _glamor.css)({
  '&.webchat__basic-transcript': {
    overflow: 'hidden',
    // Make sure to set "position: relative" here to form another stacking context for the scroll-to-end button.
    // Stacking context help isolating elements that use "z-index" from global pollution.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
    position: 'relative',
    '& .webchat__basic-transcript__filler': {
      flex: 1
    },
    '& .webchat__basic-transcript__scrollable': {
      display: 'flex',
      flexDirection: 'column',
      overflowX: 'hidden',
      WebkitOverflowScrolling: 'touch'
    },
    '& .webchat__basic-transcript__transcript': {
      listStyleType: 'none'
    }
  }
});

function nextSiblingAll(element) {
  var children = element.parentNode.children;
  var elementIndex = [].indexOf.call(children, element);
  return [].slice.call(children, elementIndex + 1);
}

function validateAllActivitiesTagged(activities, bins) {
  return activities.every(function (activity) {
    return bins.some(function (bin) {
      return bin.includes(activity);
    });
  });
}

var BasicTranscript2 = function BasicTranscript2(_ref) {
  var className = _ref.className;

  var _useStyleSet = (0, _useStyleSet5.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      activityStyleSet = _useStyleSet2[0].activity;

  var _useStyleOptions = (0, _useStyleOptions5.default)(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      bubbleFromUserNubOffset = _useStyleOptions2$.bubbleFromUserNubOffset,
      bubbleNubOffset = _useStyleOptions2$.bubbleNubOffset,
      groupTimestamp = _useStyleOptions2$.groupTimestamp,
      showAvatarInGroup = _useStyleOptions2$.showAvatarInGroup;

  var _useActivities = (0, _useActivities3.default)(),
      _useActivities2 = _slicedToArray(_useActivities, 1),
      activities = _useActivities2[0];

  var _useTranscriptActivit = (0, _useTranscriptActivityElementsRef.default)(),
      _useTranscriptActivit2 = _slicedToArray(_useTranscriptActivit, 1),
      activityElementsRef = _useTranscriptActivit2[0];

  var _useDirection = (0, _useDirection3.default)(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var _useTranscriptRootEle = (0, _useTranscriptRootElementRef.default)(),
      _useTranscriptRootEle2 = _slicedToArray(_useTranscriptRootEle, 1),
      rootElementRef = _useTranscriptRootEle2[0];

  var createActivityRenderer = (0, _useCreateActivityRenderer.default)();
  var createActivityStatusRenderer = (0, _useCreateActivityStatusRenderer.default)();
  var createAvatarRenderer = (0, _useCreateAvatarRenderer.default)();
  var groupActivities = (0, _useGroupActivities.default)();
  var hideAllTimestamps = groupTimestamp === false;
  var localize = (0, _useLocalizer.default)();
  var activityAriaLabel = localize('ACTIVITY_ARIA_LABEL_ALT');
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT'); // Gets renderer for every activities.
  // Some activities that are not visible, will return a falsy renderer.
  // Converting from createActivityRenderer({ activity, nextVisibleActivity }) to createActivityRenderer(activity, nextVisibleActivity).
  // This is for the memoization function to cache the arguments. Memoizer can only cache literal arguments.

  var createActivityRendererWithLiteralArgs = (0, _react.useCallback)(function (activity, nextVisibleActivity) {
    return createActivityRenderer({
      activity: activity,
      nextVisibleActivity: nextVisibleActivity
    });
  }, [createActivityRenderer]); // Create a memoized context of the createActivityRenderer function.

  var activitiesWithRenderer = (0, _useMemoize.default)(createActivityRendererWithLiteralArgs, function (createActivityRendererWithLiteralArgsMemoized) {
    // All calls to createActivityRendererWithLiteralArgsMemoized() in this function will be memoized (LRU = 1).
    // In next render cycle, calls to createActivityRendererWithLiteralArgsMemoized() might return memoized result instead.
    // This is an improvement to React useMemo(), because it only allows 1 memoization.
    // useMemoize() allows any number of memoization.
    var activitiesWithRenderer = [];
    var nextVisibleActivity;

    for (var index = activities.length - 1; index >= 0; index--) {
      var activity = activities[index];
      var renderActivity = createActivityRendererWithLiteralArgsMemoized(activity, nextVisibleActivity);

      if (renderActivity) {
        activitiesWithRenderer.splice(0, 0, {
          activity: activity,
          renderActivity: renderActivity
        });
        nextVisibleActivity = activity;
      }
    }

    return activitiesWithRenderer;
  }, [activities]);
  var visibleActivities = (0, _react.useMemo)(function () {
    return activitiesWithRenderer.map(function (_ref2) {
      var activity = _ref2.activity;
      return activity;
    });
  }, [activitiesWithRenderer]); // Tag activities based on types.
  // The default implementation tag into 2 types: sender and status.

  var _useMemo = (0, _react.useMemo)(function () {
    var _groupActivities = groupActivities({
      activities: visibleActivities
    }),
        activitiesGroupBySender = _groupActivities.sender,
        activitiesGroupByStatus = _groupActivities.status;

    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupBySender)) {
      console.warn('botframework-webchat: Not every activities are grouped in the "sender" property. Please fix "groupActivitiesMiddleware" and group every activities.');
    }

    if (!validateAllActivitiesTagged(visibleActivities, activitiesGroupByStatus)) {
      console.warn('botframework-webchat: Not every activities are grouped in the "status" property. Please fix "groupActivitiesMiddleware" and group every activities.');
    }

    return {
      activitiesGroupBySender: activitiesGroupBySender,
      activitiesGroupByStatus: activitiesGroupByStatus
    };
  }, [groupActivities, visibleActivities]),
      activitiesGroupBySender = _useMemo.activitiesGroupBySender,
      activitiesGroupByStatus = _useMemo.activitiesGroupByStatus; // Create a tree of activities with 2 dimensions: sender, followed by status.


  var activityTree = (0, _react.useMemo)(function () {
    var visibleActivitiesPendingGrouping = _toConsumableArray(visibleActivities);

    var activityTree = [];

    var _loop = function _loop() {
      var _visibleActivitiesPen = _slicedToArray(visibleActivitiesPendingGrouping, 1),
          activity = _visibleActivitiesPen[0];

      var senderTree = [];
      var activitiesWithSameSender = activitiesGroupBySender.find(function (activities) {
        return activities.includes(activity);
      });
      activityTree.push(senderTree);
      activitiesWithSameSender.forEach(function (activity) {
        var activitiesWithSameStatus = activitiesGroupByStatus.find(function (activities) {
          return activities.includes(activity);
        });
        var activitiesWithSameSenderAndStatus = (0, _intersectionOf.default)(visibleActivitiesPendingGrouping, activitiesWithSameSender, activitiesWithSameStatus);

        if (activitiesWithSameSenderAndStatus.length) {
          senderTree.push(activitiesWithSameSenderAndStatus);

          _removeInline.default.apply(void 0, [visibleActivitiesPendingGrouping].concat(_toConsumableArray(activitiesWithSameSenderAndStatus)));
        }
      });
    };

    while (visibleActivitiesPendingGrouping.length) {
      _loop();
    } // Assertion: All activities in visibleActivities, must be assigned to the activityTree


    if (!visibleActivities.every(function (activity) {
      return activityTree.some(function (activitiesWithSameSender) {
        return activitiesWithSameSender.some(function (activitiesWithSameSenderAndStatus) {
          return activitiesWithSameSenderAndStatus.includes(activity);
        });
      });
    })) {
      console.warn('botframework-webchat internal: Not all visible activities are grouped in the activityTree.', {
        visibleActivities: visibleActivities,
        activityTree: activityTree
      });
    }

    return activityTree;
  }, [activitiesGroupBySender, activitiesGroupByStatus, visibleActivities]); // Flatten the tree back into an array with information related to rendering.

  var renderingElements = (0, _react.useMemo)(function () {
    var renderingElements = [];
    var topSideBotNub = (0, _isZeroOrPositive.default)(bubbleNubOffset);
    var topSideUserNub = (0, _isZeroOrPositive.default)(bubbleFromUserNubOffset);
    activityTree.forEach(function (activitiesWithSameSender) {
      var _activitiesWithSameSe = _slicedToArray(activitiesWithSameSender, 1),
          _activitiesWithSameSe2 = _slicedToArray(_activitiesWithSameSe[0], 1),
          firstActivity = _activitiesWithSameSe2[0];

      var renderAvatar = createAvatarRenderer({
        activity: firstActivity
      });
      activitiesWithSameSender.forEach(function (activitiesWithSameSenderAndStatus, indexWithinSenderGroup) {
        var firstInSenderGroup = !indexWithinSenderGroup;
        var lastInSenderGroup = indexWithinSenderGroup === activitiesWithSameSender.length - 1;
        activitiesWithSameSenderAndStatus.forEach(function (activity, indexWithinSenderAndStatusGroup) {
          // We only show the timestamp at the end of the sender group. But we always show the "Send failed, retry" prompt.
          var renderActivityStatus = createActivityStatusRenderer({
            activity: activity
          });
          var firstInSenderAndStatusGroup = !indexWithinSenderAndStatusGroup;
          var lastInSenderAndStatusGroup = indexWithinSenderAndStatusGroup === activitiesWithSameSenderAndStatus.length - 1;

          var _activitiesWithRender = activitiesWithRenderer.find(function (entry) {
            return entry.activity === activity;
          }),
              renderActivity = _activitiesWithRender.renderActivity;

          var key = (0, _getActivityUniqueId.default)(activity) || renderingElements.length;
          var _activity$channelData = activity.channelData;
          _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
          var _activity$channelData2 = _activity$channelData.messageBack;
          _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
          var messageBackDisplayText = _activity$channelData2.displayText,
              role = activity.from.role,
              text = activity.text;
          var topSideNub = role === 'user' ? topSideUserNub : topSideBotNub;
          var showCallout; // Depends on different "showAvatarInGroup" setting, we will show the avatar in different positions.

          if (showAvatarInGroup === 'sender') {
            if (topSideNub) {
              showCallout = firstInSenderGroup && firstInSenderAndStatusGroup;
            } else {
              showCallout = lastInSenderGroup && lastInSenderAndStatusGroup;
            }
          } else if (showAvatarInGroup === 'status') {
            if (topSideNub) {
              showCallout = firstInSenderAndStatusGroup;
            } else {
              showCallout = lastInSenderAndStatusGroup;
            }
          } else {
            showCallout = true;
          }

          renderingElements.push({
            activity: activity,
            // After the element is mounted, set it to activityElementsRef.
            callbackRef: function callbackRef(activityElement) {
              var entry = activityElementsRef.current.find(function (_ref3) {
                var activityID = _ref3.activityID;
                return activityID === activity.id;
              });

              if (entry) {
                entry.element = activityElement;
              }
            },
            // "hideTimestamp" is a render-time parameter for renderActivityStatus().
            // If set, it will hide if timestamp is being shown, but it will continue to show
            // retry prompt. And show the screen reader version of the timestamp.
            hideTimestamp: hideAllTimestamps || indexWithinSenderAndStatusGroup !== activitiesWithSameSenderAndStatus.length - 1,
            key: key,
            // When "liveRegionKey" change, it was show up in the live region momentarily.
            liveRegionKey: key + '|' + (messageBackDisplayText || text),
            renderActivity: renderActivity,
            renderActivityStatus: renderActivityStatus,
            renderAvatar: renderAvatar,
            // TODO: [P2] #2858 We should use core/definitions/speakingActivity for this predicate instead
            shouldSpeak: activity.channelData && activity.channelData.speak,
            showCallout: showCallout
          });
        });
      });
    });
    var activityElements = activityElementsRef.current; // Update activityElementRef with new sets of activity, while retaining the existing referencing element if exists.

    activityElementsRef.current = renderingElements.map(function (_ref4) {
      var id = _ref4.activity.id,
          key = _ref4.key;
      var existingEntry = activityElements.find(function (entry) {
        return entry.key === key;
      });
      return {
        activityID: id,
        element: existingEntry && existingEntry.element,
        key: key
      };
    });
    return renderingElements;
  }, [activitiesWithRenderer, activityElementsRef, activityTree, bubbleFromUserNubOffset, bubbleNubOffset, createActivityStatusRenderer, createAvatarRenderer, hideAllTimestamps, showAvatarInGroup]);
  var renderingActivities = (0, _react.useMemo)(function () {
    return renderingElements.map(function (_ref5) {
      var activity = _ref5.activity;
      return activity;
    });
  }, [renderingElements]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', 'webchat__basic-transcript', className + ''),
    dir: direction,
    ref: rootElementRef
  }, /*#__PURE__*/_react.default.createElement("section", {
    "aria-atomic": false,
    "aria-live": "polite",
    "aria-relevant": "additions",
    "aria-roledescription": transcriptRoleDescription,
    role: "log"
  }, renderingElements.map(function (_ref6) {
    var activity = _ref6.activity,
        liveRegionKey = _ref6.liveRegionKey;
    return /*#__PURE__*/_react.default.createElement(_Fade.default, {
      key: liveRegionKey
    }, function () {
      return /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {
        activity: activity
      });
    });
  })), /*#__PURE__*/_react.default.createElement(InternalTranscriptScrollable, {
    activities: renderingActivities
  }, renderingElements.map(function (_ref7) {
    var activity = _ref7.activity,
        callbackRef = _ref7.callbackRef,
        key = _ref7.key,
        hideTimestamp = _ref7.hideTimestamp,
        renderActivity = _ref7.renderActivity,
        renderActivityStatus = _ref7.renderActivityStatus,
        renderAvatar = _ref7.renderAvatar,
        shouldSpeak = _ref7.shouldSpeak,
        showCallout = _ref7.showCallout;
    return /*#__PURE__*/_react.default.createElement("li", {
      "aria-label": activityAriaLabel // This will be read when pressing CAPSLOCK + arrow with screen reader
      ,
      className: (0, _classnames.default)(activityStyleSet + '', 'webchat__basic-transcript__activity'),
      key: key,
      ref: callbackRef
    }, renderActivity({
      hideTimestamp: hideTimestamp,
      renderActivityStatus: renderActivityStatus,
      renderAvatar: renderAvatar,
      showCallout: showCallout
    }), shouldSpeak && /*#__PURE__*/_react.default.createElement(_Speak.default, {
      activity: activity
    }));
  })));
};

BasicTranscript2.defaultProps = {
  className: ''
};
BasicTranscript2.propTypes = {
  className: _propTypes.default.string
};

var InternalScreenReaderTranscript = function InternalScreenReaderTranscript(_ref8) {
  var renderingElements = _ref8.renderingElements;
  var localize = (0, _useLocalizer.default)();
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  return /*#__PURE__*/_react.default.createElement("section", {
    "aria-atomic": false,
    "aria-live": "polite",
    "aria-relevant": "additions",
    "aria-roledescription": transcriptRoleDescription,
    role: "log"
  }, renderingElements.map(function (_ref9) {
    var activity = _ref9.activity,
        liveRegionKey = _ref9.liveRegionKey;
    return /*#__PURE__*/_react.default.createElement(_Fade.default, {
      key: liveRegionKey
    }, function () {
      return /*#__PURE__*/_react.default.createElement(_ScreenReaderActivity.default, {
        activity: activity
      });
    });
  }));
};

InternalScreenReaderTranscript.propTypes = {
  renderingElements: _propTypes.default.arrayOf(_propTypes.default.shape({
    activity: _propTypes.default.any,
    liveRegionKey: _propTypes.default.string
  })).isRequired
}; // Separating high-frequency hooks to improve performance.

var InternalTranscriptScrollable = function InternalTranscriptScrollable(_ref10) {
  var activities = _ref10.activities,
      children = _ref10.children;

  var _useStyleSet3 = (0, _useStyleSet5.default)(),
      _useStyleSet4 = _slicedToArray(_useStyleSet3, 1),
      activitiesStyleSet = _useStyleSet4[0].activities;

  var _useStyleOptions3 = (0, _useStyleOptions5.default)(),
      _useStyleOptions4 = _slicedToArray(_useStyleOptions3, 1),
      hideScrollToEndButton = _useStyleOptions4[0].hideScrollToEndButton;

  var _useAnimatingToEnd = (0, _reactScrollToBottom.useAnimatingToEnd)(),
      _useAnimatingToEnd2 = _slicedToArray(_useAnimatingToEnd, 1),
      animatingToEnd = _useAnimatingToEnd2[0];

  var _useSticky = (0, _reactScrollToBottom.useSticky)(),
      _useSticky2 = _slicedToArray(_useSticky, 1),
      sticky = _useSticky2[0];

  var focus = (0, _useFocus.default)();
  var lastVisibleActivityId = (0, _getActivityUniqueId.default)(activities[activities.length - 1] || {}); // Activity ID of the last visible activity in the list.

  var localize = (0, _useLocalizer.default)();
  var scrollToEndButtonRef = (0, _react.useRef)();
  var lastReadActivityIdRef = (0, _react.useRef)(lastVisibleActivityId);
  var transcriptRoleDescription = localize('TRANSCRIPT_ARIA_ROLE_ALT');
  var allActivitiesRead = lastVisibleActivityId === lastReadActivityIdRef.current;
  var handleScrollToEndButtonClick = (0, _react.useCallback)(function () {
    var current = scrollToEndButtonRef.current; // After clicking on the "New messages" button, we should focus on the first unread element.
    // This is for resolving the bug https://github.com/microsoft/BotFramework-WebChat/issues/3135.

    if (current) {
      var nextSiblings = nextSiblingAll(current);
      var firstUnreadTabbable = nextSiblings.reduce(function (result, unreadActivityElement) {
        return result || (0, _firstTabbableDescendant.default)(unreadActivityElement);
      }, 0);
      firstUnreadTabbable ? firstUnreadTabbable.focus() : focus('sendBoxWithoutKeyboard');
    }
  }, [focus, scrollToEndButtonRef]);

  if (sticky) {
    // If it is sticky, the user is at the bottom of the transcript, everything is read.
    // So mark the activity ID as read.
    lastReadActivityIdRef.current = lastVisibleActivityId;
  } // Finds where we should render the "New messages" button, in index. Returns -1 to hide the button.


  var renderSeparatorAfterIndex = (0, _react.useMemo)(function () {
    // Don't show the button if:
    // - All activities have been read
    // - Currently animating towards bottom
    //   - "New messages" button must not flash when: 1. Type "help", 2. Scroll to top, 3. Type "help" again, 4. Expect the "New messages" button not flashy
    // - Hidden by style options
    // - It is already at the bottom (sticky)
    // Any changes to this logic, verify:
    // - "New messages" button should persist while programmatically scrolling to mid-point of the transcript:
    //   1. Type "help"
    //   2. Type "proactive", then immediately scroll to top
    //      Expect: the "New messages" button should appear
    //   3. Run hook "useScrollTo({ scrollTop: 500 })"
    //      Expect: when the scroll is animating to 500px, the "New messages" button should kept on the screen
    // - "New messages" button must not flashy:
    //   1. Type "help"
    //   2. Scroll to top
    //      Expect: no "New messages" button is shown
    //   3. Type "help" again
    //      Expect: "New messages" button must not flash-appear
    if (allActivitiesRead || animatingToEnd || hideScrollToEndButton || sticky) {
      return -1;
    }

    return activities.findIndex(function (activity) {
      return (0, _getActivityUniqueId.default)(activity) === lastReadActivityIdRef.current;
    });
  }, [activities, allActivitiesRead, animatingToEnd, hideScrollToEndButton, lastReadActivityIdRef, sticky]);
  return /*#__PURE__*/_react.default.createElement(_reactScrollToBottom.Panel, {
    className: "webchat__basic-transcript__scrollable"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__basic-transcript__filler"
  }), /*#__PURE__*/_react.default.createElement("ul", {
    "aria-roledescription": transcriptRoleDescription,
    className: (0, _classnames.default)(activitiesStyleSet + '', 'webchat__basic-transcript__transcript')
  }, _react.default.Children.map(children, function (child, index) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, child, index === renderSeparatorAfterIndex && /*#__PURE__*/_react.default.createElement(_ScrollToEndButton.default, {
      "aria-valuemax": activities.length,
      "aria-valuenow": index + 1,
      onClick: handleScrollToEndButtonClick,
      ref: scrollToEndButtonRef
    }));
  })), /*#__PURE__*/_react.default.createElement(_BasicTypingIndicator.default, null));
};

InternalTranscriptScrollable.propTypes = {
  activities: _propTypes.default.array.isRequired,
  children: _propTypes.default.arrayOf(_propTypes.default.element).isRequired
};
var _default = BasicTranscript2;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNpY1RyYW5zY3JpcHQuanMiXSwibmFtZXMiOlsiUk9PVF9DU1MiLCJvdmVyZmxvdyIsInBvc2l0aW9uIiwiZmxleCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwib3ZlcmZsb3dYIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJsaXN0U3R5bGVUeXBlIiwibmV4dFNpYmxpbmdBbGwiLCJlbGVtZW50IiwiY2hpbGRyZW4iLCJwYXJlbnROb2RlIiwiZWxlbWVudEluZGV4IiwiaW5kZXhPZiIsImNhbGwiLCJzbGljZSIsInZhbGlkYXRlQWxsQWN0aXZpdGllc1RhZ2dlZCIsImFjdGl2aXRpZXMiLCJiaW5zIiwiZXZlcnkiLCJhY3Rpdml0eSIsInNvbWUiLCJiaW4iLCJpbmNsdWRlcyIsIkJhc2ljVHJhbnNjcmlwdDIiLCJjbGFzc05hbWUiLCJhY3Rpdml0eVN0eWxlU2V0IiwiYnViYmxlRnJvbVVzZXJOdWJPZmZzZXQiLCJidWJibGVOdWJPZmZzZXQiLCJncm91cFRpbWVzdGFtcCIsInNob3dBdmF0YXJJbkdyb3VwIiwiYWN0aXZpdHlFbGVtZW50c1JlZiIsImRpcmVjdGlvbiIsInJvb3RFbGVtZW50UmVmIiwiY3JlYXRlQWN0aXZpdHlSZW5kZXJlciIsImNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIiLCJjcmVhdGVBdmF0YXJSZW5kZXJlciIsImdyb3VwQWN0aXZpdGllcyIsImhpZGVBbGxUaW1lc3RhbXBzIiwibG9jYWxpemUiLCJhY3Rpdml0eUFyaWFMYWJlbCIsInRyYW5zY3JpcHRSb2xlRGVzY3JpcHRpb24iLCJjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzIiwibmV4dFZpc2libGVBY3Rpdml0eSIsImFjdGl2aXRpZXNXaXRoUmVuZGVyZXIiLCJjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzTWVtb2l6ZWQiLCJpbmRleCIsImxlbmd0aCIsInJlbmRlckFjdGl2aXR5Iiwic3BsaWNlIiwidmlzaWJsZUFjdGl2aXRpZXMiLCJtYXAiLCJhY3Rpdml0aWVzR3JvdXBCeVNlbmRlciIsInNlbmRlciIsImFjdGl2aXRpZXNHcm91cEJ5U3RhdHVzIiwic3RhdHVzIiwiY29uc29sZSIsIndhcm4iLCJhY3Rpdml0eVRyZWUiLCJ2aXNpYmxlQWN0aXZpdGllc1BlbmRpbmdHcm91cGluZyIsInNlbmRlclRyZWUiLCJhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXIiLCJmaW5kIiwicHVzaCIsImZvckVhY2giLCJhY3Rpdml0aWVzV2l0aFNhbWVTdGF0dXMiLCJhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMiLCJyZW1vdmVJbmxpbmUiLCJyZW5kZXJpbmdFbGVtZW50cyIsInRvcFNpZGVCb3ROdWIiLCJ0b3BTaWRlVXNlck51YiIsImZpcnN0QWN0aXZpdHkiLCJyZW5kZXJBdmF0YXIiLCJpbmRleFdpdGhpblNlbmRlckdyb3VwIiwiZmlyc3RJblNlbmRlckdyb3VwIiwibGFzdEluU2VuZGVyR3JvdXAiLCJpbmRleFdpdGhpblNlbmRlckFuZFN0YXR1c0dyb3VwIiwicmVuZGVyQWN0aXZpdHlTdGF0dXMiLCJmaXJzdEluU2VuZGVyQW5kU3RhdHVzR3JvdXAiLCJsYXN0SW5TZW5kZXJBbmRTdGF0dXNHcm91cCIsImVudHJ5Iiwia2V5IiwiY2hhbm5lbERhdGEiLCJtZXNzYWdlQmFjayIsIm1lc3NhZ2VCYWNrRGlzcGxheVRleHQiLCJkaXNwbGF5VGV4dCIsInJvbGUiLCJmcm9tIiwidGV4dCIsInRvcFNpZGVOdWIiLCJzaG93Q2FsbG91dCIsImNhbGxiYWNrUmVmIiwiYWN0aXZpdHlFbGVtZW50IiwiY3VycmVudCIsImFjdGl2aXR5SUQiLCJpZCIsImhpZGVUaW1lc3RhbXAiLCJsaXZlUmVnaW9uS2V5Iiwic2hvdWxkU3BlYWsiLCJzcGVhayIsImFjdGl2aXR5RWxlbWVudHMiLCJleGlzdGluZ0VudHJ5IiwicmVuZGVyaW5nQWN0aXZpdGllcyIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsIkludGVybmFsU2NyZWVuUmVhZGVyVHJhbnNjcmlwdCIsImFycmF5T2YiLCJzaGFwZSIsImFueSIsImlzUmVxdWlyZWQiLCJJbnRlcm5hbFRyYW5zY3JpcHRTY3JvbGxhYmxlIiwiYWN0aXZpdGllc1N0eWxlU2V0IiwiaGlkZVNjcm9sbFRvRW5kQnV0dG9uIiwiYW5pbWF0aW5nVG9FbmQiLCJzdGlja3kiLCJmb2N1cyIsImxhc3RWaXNpYmxlQWN0aXZpdHlJZCIsInNjcm9sbFRvRW5kQnV0dG9uUmVmIiwibGFzdFJlYWRBY3Rpdml0eUlkUmVmIiwiYWxsQWN0aXZpdGllc1JlYWQiLCJoYW5kbGVTY3JvbGxUb0VuZEJ1dHRvbkNsaWNrIiwibmV4dFNpYmxpbmdzIiwiZmlyc3RVbnJlYWRUYWJiYWJsZSIsInJlZHVjZSIsInJlc3VsdCIsInVucmVhZEFjdGl2aXR5RWxlbWVudCIsInJlbmRlclNlcGFyYXRvckFmdGVySW5kZXgiLCJmaW5kSW5kZXgiLCJSZWFjdCIsIkNoaWxkcmVuIiwiY2hpbGQiLCJhcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUcsaUJBQUk7QUFDbkIsaUNBQStCO0FBQzdCQyxJQUFBQSxRQUFRLEVBQUUsUUFEbUI7QUFFN0I7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLFFBQVEsRUFBRSxVQUxtQjtBQU83Qiw0Q0FBd0M7QUFDdENDLE1BQUFBLElBQUksRUFBRTtBQURnQyxLQVBYO0FBVzdCLGdEQUE0QztBQUMxQ0MsTUFBQUEsT0FBTyxFQUFFLE1BRGlDO0FBRTFD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QU8sRUFBRTRFLDRCQUhYO0FBSUUsTUFBQSxHQUFHLEVBQUVIO0FBSlAsTUFKSixDQUQ0QjtBQUFBLEdBQTdCLENBSkgsQ0FGRixlQXFCRSw2QkFBQyw2QkFBRCxPQXJCRixDQURGO0FBeUJELENBN0ZEOztBQStGQVAsNEJBQTRCLENBQUNSLFNBQTdCLEdBQXlDO0FBQ3ZDdkYsRUFBQUEsVUFBVSxFQUFFd0YsbUJBQVU0QixLQUFWLENBQWdCdEIsVUFEVztBQUV2Q3JHLEVBQUFBLFFBQVEsRUFBRStGLG1CQUFVRyxPQUFWLENBQWtCSCxtQkFBVWhHLE9BQTVCLEVBQXFDc0c7QUFGUixDQUF6QztlQUtldkYsZ0IiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFstMSwgMCwgMV0gfV0gKi9cblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCB7IFBhbmVsIGFzIFNjcm9sbFRvQm90dG9tUGFuZWwsIHVzZUFuaW1hdGluZ1RvRW5kLCB1c2VTdGlja3kgfSBmcm9tICdyZWFjdC1zY3JvbGwtdG8tYm90dG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQmFzaWNUeXBpbmdJbmRpY2F0b3IgZnJvbSAnLi9CYXNpY1R5cGluZ0luZGljYXRvcic7XG5pbXBvcnQgRmFkZSBmcm9tICcuL1V0aWxzL0ZhZGUnO1xuaW1wb3J0IGZpcnN0VGFiYmFibGVEZXNjZW5kYW50IGZyb20gJy4vVXRpbHMvZmlyc3RUYWJiYWJsZURlc2NlbmRhbnQnO1xuaW1wb3J0IGdldEFjdGl2aXR5VW5pcXVlSWQgZnJvbSAnLi9VdGlscy9nZXRBY3Rpdml0eVVuaXF1ZUlkJztcbmltcG9ydCBpbnRlcnNlY3Rpb25PZiBmcm9tICcuL1V0aWxzL2ludGVyc2VjdGlvbk9mJztcbmltcG9ydCBpc1plcm9PclBvc2l0aXZlIGZyb20gJy4vVXRpbHMvaXNaZXJvT3JQb3NpdGl2ZSc7XG5pbXBvcnQgcmVtb3ZlSW5saW5lIGZyb20gJy4vVXRpbHMvcmVtb3ZlSW5saW5lJztcbmltcG9ydCBTY3JlZW5SZWFkZXJBY3Rpdml0eSBmcm9tICcuL1NjcmVlblJlYWRlckFjdGl2aXR5JztcbmltcG9ydCBTY3JvbGxUb0VuZEJ1dHRvbiBmcm9tICcuL0FjdGl2aXR5L1Njcm9sbFRvRW5kQnV0dG9uJztcbmltcG9ydCBTcGVha0FjdGl2aXR5IGZyb20gJy4vQWN0aXZpdHkvU3BlYWsnO1xuaW1wb3J0IHVzZUFjdGl2aXRpZXMgZnJvbSAnLi9ob29rcy91c2VBY3Rpdml0aWVzJztcbmltcG9ydCB1c2VDcmVhdGVBY3Rpdml0eVJlbmRlcmVyIGZyb20gJy4vaG9va3MvdXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlcic7XG5pbXBvcnQgdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlciBmcm9tICcuL2hvb2tzL3VzZUNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXInO1xuaW1wb3J0IHVzZUNyZWF0ZUF2YXRhclJlbmRlcmVyIGZyb20gJy4vaG9va3MvdXNlQ3JlYXRlQXZhdGFyUmVuZGVyZXInO1xuaW1wb3J0IHVzZURpcmVjdGlvbiBmcm9tICcuL2hvb2tzL3VzZURpcmVjdGlvbic7XG5pbXBvcnQgdXNlRm9jdXMgZnJvbSAnLi9ob29rcy91c2VGb2N1cyc7XG5pbXBvcnQgdXNlR3JvdXBBY3Rpdml0aWVzIGZyb20gJy4vaG9va3MvdXNlR3JvdXBBY3Rpdml0aWVzJztcbmltcG9ydCB1c2VMb2NhbGl6ZXIgZnJvbSAnLi9ob29rcy91c2VMb2NhbGl6ZXInO1xuaW1wb3J0IHVzZU1lbW9pemUgZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VNZW1vaXplJztcbmltcG9ydCB1c2VTdHlsZU9wdGlvbnMgZnJvbSAnLi9ob29rcy91c2VTdHlsZU9wdGlvbnMnO1xuaW1wb3J0IHVzZVN0eWxlU2V0IGZyb20gJy4vaG9va3MvdXNlU3R5bGVTZXQnO1xuaW1wb3J0IHVzZVRyYW5zY3JpcHRBY3Rpdml0eUVsZW1lbnRzUmVmIGZyb20gJy4vaG9va3MvaW50ZXJuYWwvdXNlVHJhbnNjcmlwdEFjdGl2aXR5RWxlbWVudHNSZWYnO1xuaW1wb3J0IHVzZVRyYW5zY3JpcHRSb290RWxlbWVudFJlZiBmcm9tICcuL2hvb2tzL2ludGVybmFsL3VzZVRyYW5zY3JpcHRSb290RWxlbWVudFJlZic7XG5cbmNvbnN0IFJPT1RfQ1NTID0gY3NzKHtcbiAgJyYud2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdCc6IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgLy8gTWFrZSBzdXJlIHRvIHNldCBcInBvc2l0aW9uOiByZWxhdGl2ZVwiIGhlcmUgdG8gZm9ybSBhbm90aGVyIHN0YWNraW5nIGNvbnRleHQgZm9yIHRoZSBzY3JvbGwtdG8tZW5kIGJ1dHRvbi5cbiAgICAvLyBTdGFja2luZyBjb250ZXh0IGhlbHAgaXNvbGF0aW5nIGVsZW1lbnRzIHRoYXQgdXNlIFwiei1pbmRleFwiIGZyb20gZ2xvYmFsIHBvbGx1dGlvbi5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ1NTX1Bvc2l0aW9uaW5nL1VuZGVyc3RhbmRpbmdfel9pbmRleC9UaGVfc3RhY2tpbmdfY29udGV4dFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXG4gICAgJyYgLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX2ZpbGxlcic6IHtcbiAgICAgIGZsZXg6IDFcbiAgICB9LFxuXG4gICAgJyYgLndlYmNoYXRfX2Jhc2ljLXRyYW5zY3JpcHRfX3Njcm9sbGFibGUnOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xuICAgIH0sXG5cbiAgICAnJiAud2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fdHJhbnNjcmlwdCc6IHtcbiAgICAgIGxpc3RTdHlsZVR5cGU6ICdub25lJ1xuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nQWxsKGVsZW1lbnQpIHtcbiAgY29uc3Qge1xuICAgIHBhcmVudE5vZGU6IHsgY2hpbGRyZW4gfVxuICB9ID0gZWxlbWVudDtcblxuICBjb25zdCBlbGVtZW50SW5kZXggPSBbXS5pbmRleE9mLmNhbGwoY2hpbGRyZW4sIGVsZW1lbnQpO1xuXG4gIHJldHVybiBbXS5zbGljZS5jYWxsKGNoaWxkcmVuLCBlbGVtZW50SW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBbGxBY3Rpdml0aWVzVGFnZ2VkKGFjdGl2aXRpZXMsIGJpbnMpIHtcbiAgcmV0dXJuIGFjdGl2aXRpZXMuZXZlcnkoYWN0aXZpdHkgPT4gYmlucy5zb21lKGJpbiA9PiBiaW4uaW5jbHVkZXMoYWN0aXZpdHkpKSk7XG59XG5cbmNvbnN0IEJhc2ljVHJhbnNjcmlwdDIgPSAoeyBjbGFzc05hbWUgfSkgPT4ge1xuICBjb25zdCBbeyBhY3Rpdml0eTogYWN0aXZpdHlTdHlsZVNldCB9XSA9IHVzZVN0eWxlU2V0KCk7XG4gIGNvbnN0IFt7IGJ1YmJsZUZyb21Vc2VyTnViT2Zmc2V0LCBidWJibGVOdWJPZmZzZXQsIGdyb3VwVGltZXN0YW1wLCBzaG93QXZhdGFySW5Hcm91cCB9XSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuICBjb25zdCBbYWN0aXZpdGllc10gPSB1c2VBY3Rpdml0aWVzKCk7XG4gIGNvbnN0IFthY3Rpdml0eUVsZW1lbnRzUmVmXSA9IHVzZVRyYW5zY3JpcHRBY3Rpdml0eUVsZW1lbnRzUmVmKCk7XG4gIGNvbnN0IFtkaXJlY3Rpb25dID0gdXNlRGlyZWN0aW9uKCk7XG4gIGNvbnN0IFtyb290RWxlbWVudFJlZl0gPSB1c2VUcmFuc2NyaXB0Um9vdEVsZW1lbnRSZWYoKTtcblxuICBjb25zdCBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyID0gdXNlQ3JlYXRlQWN0aXZpdHlSZW5kZXJlcigpO1xuICBjb25zdCBjcmVhdGVBY3Rpdml0eVN0YXR1c1JlbmRlcmVyID0gdXNlQ3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcigpO1xuICBjb25zdCBjcmVhdGVBdmF0YXJSZW5kZXJlciA9IHVzZUNyZWF0ZUF2YXRhclJlbmRlcmVyKCk7XG4gIGNvbnN0IGdyb3VwQWN0aXZpdGllcyA9IHVzZUdyb3VwQWN0aXZpdGllcygpO1xuICBjb25zdCBoaWRlQWxsVGltZXN0YW1wcyA9IGdyb3VwVGltZXN0YW1wID09PSBmYWxzZTtcbiAgY29uc3QgbG9jYWxpemUgPSB1c2VMb2NhbGl6ZXIoKTtcblxuICBjb25zdCBhY3Rpdml0eUFyaWFMYWJlbCA9IGxvY2FsaXplKCdBQ1RJVklUWV9BUklBX0xBQkVMX0FMVCcpO1xuICBjb25zdCB0cmFuc2NyaXB0Um9sZURlc2NyaXB0aW9uID0gbG9jYWxpemUoJ1RSQU5TQ1JJUFRfQVJJQV9ST0xFX0FMVCcpO1xuXG4gIC8vIEdldHMgcmVuZGVyZXIgZm9yIGV2ZXJ5IGFjdGl2aXRpZXMuXG4gIC8vIFNvbWUgYWN0aXZpdGllcyB0aGF0IGFyZSBub3QgdmlzaWJsZSwgd2lsbCByZXR1cm4gYSBmYWxzeSByZW5kZXJlci5cblxuICAvLyBDb252ZXJ0aW5nIGZyb20gY3JlYXRlQWN0aXZpdHlSZW5kZXJlcih7IGFjdGl2aXR5LCBuZXh0VmlzaWJsZUFjdGl2aXR5IH0pIHRvIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkpLlxuICAvLyBUaGlzIGlzIGZvciB0aGUgbWVtb2l6YXRpb24gZnVuY3Rpb24gdG8gY2FjaGUgdGhlIGFyZ3VtZW50cy4gTWVtb2l6ZXIgY2FuIG9ubHkgY2FjaGUgbGl0ZXJhbCBhcmd1bWVudHMuXG4gIGNvbnN0IGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3MgPSB1c2VDYWxsYmFjayhcbiAgICAoYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkpID0+IGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXIoeyBhY3Rpdml0eSwgbmV4dFZpc2libGVBY3Rpdml0eSB9KSxcbiAgICBbY3JlYXRlQWN0aXZpdHlSZW5kZXJlcl1cbiAgKTtcblxuICAvLyBDcmVhdGUgYSBtZW1vaXplZCBjb250ZXh0IG9mIHRoZSBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyIGZ1bmN0aW9uLlxuICBjb25zdCBhY3Rpdml0aWVzV2l0aFJlbmRlcmVyID0gdXNlTWVtb2l6ZShcbiAgICBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzLFxuICAgIGNyZWF0ZUFjdGl2aXR5UmVuZGVyZXJXaXRoTGl0ZXJhbEFyZ3NNZW1vaXplZCA9PiB7XG4gICAgICAvLyBBbGwgY2FsbHMgdG8gY3JlYXRlQWN0aXZpdHlSZW5kZXJlcldpdGhMaXRlcmFsQXJnc01lbW9pemVkKCkgaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGJlIG1lbW9pemVkIChMUlUgPSAxKS5cbiAgICAgIC8vIEluIG5leHQgcmVuZGVyIGN5Y2xlLCBjYWxscyB0byBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzTWVtb2l6ZWQoKSBtaWdodCByZXR1cm4gbWVtb2l6ZWQgcmVzdWx0IGluc3RlYWQuXG4gICAgICAvLyBUaGlzIGlzIGFuIGltcHJvdmVtZW50IHRvIFJlYWN0IHVzZU1lbW8oKSwgYmVjYXVzZSBpdCBvbmx5IGFsbG93cyAxIG1lbW9pemF0aW9uLlxuICAgICAgLy8gdXNlTWVtb2l6ZSgpIGFsbG93cyBhbnkgbnVtYmVyIG9mIG1lbW9pemF0aW9uLlxuXG4gICAgICBjb25zdCBhY3Rpdml0aWVzV2l0aFJlbmRlcmVyID0gW107XG4gICAgICBsZXQgbmV4dFZpc2libGVBY3Rpdml0eTtcblxuICAgICAgZm9yIChsZXQgaW5kZXggPSBhY3Rpdml0aWVzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBhY3Rpdml0aWVzW2luZGV4XTtcbiAgICAgICAgY29uc3QgcmVuZGVyQWN0aXZpdHkgPSBjcmVhdGVBY3Rpdml0eVJlbmRlcmVyV2l0aExpdGVyYWxBcmdzTWVtb2l6ZWQoYWN0aXZpdHksIG5leHRWaXNpYmxlQWN0aXZpdHkpO1xuXG4gICAgICAgIGlmIChyZW5kZXJBY3Rpdml0eSkge1xuICAgICAgICAgIGFjdGl2aXRpZXNXaXRoUmVuZGVyZXIuc3BsaWNlKDAsIDAsIHtcbiAgICAgICAgICAgIGFjdGl2aXR5LFxuICAgICAgICAgICAgcmVuZGVyQWN0aXZpdHlcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG5leHRWaXNpYmxlQWN0aXZpdHkgPSBhY3Rpdml0eTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWN0aXZpdGllc1dpdGhSZW5kZXJlcjtcbiAgICB9LFxuICAgIFthY3Rpdml0aWVzXVxuICApO1xuXG4gIGNvbnN0IHZpc2libGVBY3Rpdml0aWVzID0gdXNlTWVtbygoKSA9PiBhY3Rpdml0aWVzV2l0aFJlbmRlcmVyLm1hcCgoeyBhY3Rpdml0eSB9KSA9PiBhY3Rpdml0eSksIFtcbiAgICBhY3Rpdml0aWVzV2l0aFJlbmRlcmVyXG4gIF0pO1xuXG4gIC8vIFRhZyBhY3Rpdml0aWVzIGJhc2VkIG9uIHR5cGVzLlxuICAvLyBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0YWcgaW50byAyIHR5cGVzOiBzZW5kZXIgYW5kIHN0YXR1cy5cblxuICBjb25zdCB7IGFjdGl2aXRpZXNHcm91cEJ5U2VuZGVyLCBhY3Rpdml0aWVzR3JvdXBCeVN0YXR1cyB9ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgeyBzZW5kZXI6IGFjdGl2aXRpZXNHcm91cEJ5U2VuZGVyLCBzdGF0dXM6IGFjdGl2aXRpZXNHcm91cEJ5U3RhdHVzIH0gPSBncm91cEFjdGl2aXRpZXMoe1xuICAgICAgYWN0aXZpdGllczogdmlzaWJsZUFjdGl2aXRpZXNcbiAgICB9KTtcblxuICAgIGlmICghdmFsaWRhdGVBbGxBY3Rpdml0aWVzVGFnZ2VkKHZpc2libGVBY3Rpdml0aWVzLCBhY3Rpdml0aWVzR3JvdXBCeVNlbmRlcikpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBOb3QgZXZlcnkgYWN0aXZpdGllcyBhcmUgZ3JvdXBlZCBpbiB0aGUgXCJzZW5kZXJcIiBwcm9wZXJ0eS4gUGxlYXNlIGZpeCBcImdyb3VwQWN0aXZpdGllc01pZGRsZXdhcmVcIiBhbmQgZ3JvdXAgZXZlcnkgYWN0aXZpdGllcy4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdmFsaWRhdGVBbGxBY3Rpdml0aWVzVGFnZ2VkKHZpc2libGVBY3Rpdml0aWVzLCBhY3Rpdml0aWVzR3JvdXBCeVN0YXR1cykpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ2JvdGZyYW1ld29yay13ZWJjaGF0OiBOb3QgZXZlcnkgYWN0aXZpdGllcyBhcmUgZ3JvdXBlZCBpbiB0aGUgXCJzdGF0dXNcIiBwcm9wZXJ0eS4gUGxlYXNlIGZpeCBcImdyb3VwQWN0aXZpdGllc01pZGRsZXdhcmVcIiBhbmQgZ3JvdXAgZXZlcnkgYWN0aXZpdGllcy4nXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhY3Rpdml0aWVzR3JvdXBCeVNlbmRlcixcbiAgICAgIGFjdGl2aXRpZXNHcm91cEJ5U3RhdHVzXG4gICAgfTtcbiAgfSwgW2dyb3VwQWN0aXZpdGllcywgdmlzaWJsZUFjdGl2aXRpZXNdKTtcblxuICAvLyBDcmVhdGUgYSB0cmVlIG9mIGFjdGl2aXRpZXMgd2l0aCAyIGRpbWVuc2lvbnM6IHNlbmRlciwgZm9sbG93ZWQgYnkgc3RhdHVzLlxuXG4gIGNvbnN0IGFjdGl2aXR5VHJlZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHZpc2libGVBY3Rpdml0aWVzUGVuZGluZ0dyb3VwaW5nID0gWy4uLnZpc2libGVBY3Rpdml0aWVzXTtcbiAgICBjb25zdCBhY3Rpdml0eVRyZWUgPSBbXTtcblxuICAgIHdoaWxlICh2aXNpYmxlQWN0aXZpdGllc1BlbmRpbmdHcm91cGluZy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFthY3Rpdml0eV0gPSB2aXNpYmxlQWN0aXZpdGllc1BlbmRpbmdHcm91cGluZztcbiAgICAgIGNvbnN0IHNlbmRlclRyZWUgPSBbXTtcbiAgICAgIGNvbnN0IGFjdGl2aXRpZXNXaXRoU2FtZVNlbmRlciA9IGFjdGl2aXRpZXNHcm91cEJ5U2VuZGVyLmZpbmQoYWN0aXZpdGllcyA9PiBhY3Rpdml0aWVzLmluY2x1ZGVzKGFjdGl2aXR5KSk7XG5cbiAgICAgIGFjdGl2aXR5VHJlZS5wdXNoKHNlbmRlclRyZWUpO1xuXG4gICAgICBhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXIuZm9yRWFjaChhY3Rpdml0eSA9PiB7XG4gICAgICAgIGNvbnN0IGFjdGl2aXRpZXNXaXRoU2FtZVN0YXR1cyA9IGFjdGl2aXRpZXNHcm91cEJ5U3RhdHVzLmZpbmQoYWN0aXZpdGllcyA9PiBhY3Rpdml0aWVzLmluY2x1ZGVzKGFjdGl2aXR5KSk7XG5cbiAgICAgICAgY29uc3QgYWN0aXZpdGllc1dpdGhTYW1lU2VuZGVyQW5kU3RhdHVzID0gaW50ZXJzZWN0aW9uT2YoXG4gICAgICAgICAgdmlzaWJsZUFjdGl2aXRpZXNQZW5kaW5nR3JvdXBpbmcsXG4gICAgICAgICAgYWN0aXZpdGllc1dpdGhTYW1lU2VuZGVyLFxuICAgICAgICAgIGFjdGl2aXRpZXNXaXRoU2FtZVN0YXR1c1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VuZGVyVHJlZS5wdXNoKGFjdGl2aXRpZXNXaXRoU2FtZVNlbmRlckFuZFN0YXR1cyk7XG4gICAgICAgICAgcmVtb3ZlSW5saW5lKHZpc2libGVBY3Rpdml0aWVzUGVuZGluZ0dyb3VwaW5nLCAuLi5hY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBc3NlcnRpb246IEFsbCBhY3Rpdml0aWVzIGluIHZpc2libGVBY3Rpdml0aWVzLCBtdXN0IGJlIGFzc2lnbmVkIHRvIHRoZSBhY3Rpdml0eVRyZWVcbiAgICBpZiAoXG4gICAgICAhdmlzaWJsZUFjdGl2aXRpZXMuZXZlcnkoYWN0aXZpdHkgPT5cbiAgICAgICAgYWN0aXZpdHlUcmVlLnNvbWUoYWN0aXZpdGllc1dpdGhTYW1lU2VuZGVyID0+XG4gICAgICAgICAgYWN0aXZpdGllc1dpdGhTYW1lU2VuZGVyLnNvbWUoYWN0aXZpdGllc1dpdGhTYW1lU2VuZGVyQW5kU3RhdHVzID0+XG4gICAgICAgICAgICBhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMuaW5jbHVkZXMoYWN0aXZpdHkpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2JvdGZyYW1ld29yay13ZWJjaGF0IGludGVybmFsOiBOb3QgYWxsIHZpc2libGUgYWN0aXZpdGllcyBhcmUgZ3JvdXBlZCBpbiB0aGUgYWN0aXZpdHlUcmVlLicsIHtcbiAgICAgICAgdmlzaWJsZUFjdGl2aXRpZXMsXG4gICAgICAgIGFjdGl2aXR5VHJlZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGl2aXR5VHJlZTtcbiAgfSwgW2FjdGl2aXRpZXNHcm91cEJ5U2VuZGVyLCBhY3Rpdml0aWVzR3JvdXBCeVN0YXR1cywgdmlzaWJsZUFjdGl2aXRpZXNdKTtcblxuICAvLyBGbGF0dGVuIHRoZSB0cmVlIGJhY2sgaW50byBhbiBhcnJheSB3aXRoIGluZm9ybWF0aW9uIHJlbGF0ZWQgdG8gcmVuZGVyaW5nLlxuXG4gIGNvbnN0IHJlbmRlcmluZ0VsZW1lbnRzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgcmVuZGVyaW5nRWxlbWVudHMgPSBbXTtcbiAgICBjb25zdCB0b3BTaWRlQm90TnViID0gaXNaZXJvT3JQb3NpdGl2ZShidWJibGVOdWJPZmZzZXQpO1xuICAgIGNvbnN0IHRvcFNpZGVVc2VyTnViID0gaXNaZXJvT3JQb3NpdGl2ZShidWJibGVGcm9tVXNlck51Yk9mZnNldCk7XG5cbiAgICBhY3Rpdml0eVRyZWUuZm9yRWFjaChhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXIgPT4ge1xuICAgICAgY29uc3QgW1tmaXJzdEFjdGl2aXR5XV0gPSBhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXI7XG4gICAgICBjb25zdCByZW5kZXJBdmF0YXIgPSBjcmVhdGVBdmF0YXJSZW5kZXJlcih7IGFjdGl2aXR5OiBmaXJzdEFjdGl2aXR5IH0pO1xuXG4gICAgICBhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXIuZm9yRWFjaCgoYWN0aXZpdGllc1dpdGhTYW1lU2VuZGVyQW5kU3RhdHVzLCBpbmRleFdpdGhpblNlbmRlckdyb3VwKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpcnN0SW5TZW5kZXJHcm91cCA9ICFpbmRleFdpdGhpblNlbmRlckdyb3VwO1xuICAgICAgICBjb25zdCBsYXN0SW5TZW5kZXJHcm91cCA9IGluZGV4V2l0aGluU2VuZGVyR3JvdXAgPT09IGFjdGl2aXRpZXNXaXRoU2FtZVNlbmRlci5sZW5ndGggLSAxO1xuXG4gICAgICAgIGFjdGl2aXRpZXNXaXRoU2FtZVNlbmRlckFuZFN0YXR1cy5mb3JFYWNoKChhY3Rpdml0eSwgaW5kZXhXaXRoaW5TZW5kZXJBbmRTdGF0dXNHcm91cCkgPT4ge1xuICAgICAgICAgIC8vIFdlIG9ubHkgc2hvdyB0aGUgdGltZXN0YW1wIGF0IHRoZSBlbmQgb2YgdGhlIHNlbmRlciBncm91cC4gQnV0IHdlIGFsd2F5cyBzaG93IHRoZSBcIlNlbmQgZmFpbGVkLCByZXRyeVwiIHByb21wdC5cbiAgICAgICAgICBjb25zdCByZW5kZXJBY3Rpdml0eVN0YXR1cyA9IGNyZWF0ZUFjdGl2aXR5U3RhdHVzUmVuZGVyZXIoe1xuICAgICAgICAgICAgYWN0aXZpdHlcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IGZpcnN0SW5TZW5kZXJBbmRTdGF0dXNHcm91cCA9ICFpbmRleFdpdGhpblNlbmRlckFuZFN0YXR1c0dyb3VwO1xuICAgICAgICAgIGNvbnN0IGxhc3RJblNlbmRlckFuZFN0YXR1c0dyb3VwID1cbiAgICAgICAgICAgIGluZGV4V2l0aGluU2VuZGVyQW5kU3RhdHVzR3JvdXAgPT09IGFjdGl2aXRpZXNXaXRoU2FtZVNlbmRlckFuZFN0YXR1cy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgY29uc3QgeyByZW5kZXJBY3Rpdml0eSB9ID0gYWN0aXZpdGllc1dpdGhSZW5kZXJlci5maW5kKGVudHJ5ID0+IGVudHJ5LmFjdGl2aXR5ID09PSBhY3Rpdml0eSk7XG4gICAgICAgICAgY29uc3Qga2V5ID0gZ2V0QWN0aXZpdHlVbmlxdWVJZChhY3Rpdml0eSkgfHwgcmVuZGVyaW5nRWxlbWVudHMubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNoYW5uZWxEYXRhOiB7IG1lc3NhZ2VCYWNrOiB7IGRpc3BsYXlUZXh0OiBtZXNzYWdlQmFja0Rpc3BsYXlUZXh0IH0gPSB7fSB9ID0ge30sXG4gICAgICAgICAgICBmcm9tOiB7IHJvbGUgfSxcbiAgICAgICAgICAgIHRleHRcbiAgICAgICAgICB9ID0gYWN0aXZpdHk7XG5cbiAgICAgICAgICBjb25zdCB0b3BTaWRlTnViID0gcm9sZSA9PT0gJ3VzZXInID8gdG9wU2lkZVVzZXJOdWIgOiB0b3BTaWRlQm90TnViO1xuXG4gICAgICAgICAgbGV0IHNob3dDYWxsb3V0O1xuXG4gICAgICAgICAgLy8gRGVwZW5kcyBvbiBkaWZmZXJlbnQgXCJzaG93QXZhdGFySW5Hcm91cFwiIHNldHRpbmcsIHdlIHdpbGwgc2hvdyB0aGUgYXZhdGFyIGluIGRpZmZlcmVudCBwb3NpdGlvbnMuXG4gICAgICAgICAgaWYgKHNob3dBdmF0YXJJbkdyb3VwID09PSAnc2VuZGVyJykge1xuICAgICAgICAgICAgaWYgKHRvcFNpZGVOdWIpIHtcbiAgICAgICAgICAgICAgc2hvd0NhbGxvdXQgPSBmaXJzdEluU2VuZGVyR3JvdXAgJiYgZmlyc3RJblNlbmRlckFuZFN0YXR1c0dyb3VwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2hvd0NhbGxvdXQgPSBsYXN0SW5TZW5kZXJHcm91cCAmJiBsYXN0SW5TZW5kZXJBbmRTdGF0dXNHcm91cDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHNob3dBdmF0YXJJbkdyb3VwID09PSAnc3RhdHVzJykge1xuICAgICAgICAgICAgaWYgKHRvcFNpZGVOdWIpIHtcbiAgICAgICAgICAgICAgc2hvd0NhbGxvdXQgPSBmaXJzdEluU2VuZGVyQW5kU3RhdHVzR3JvdXA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzaG93Q2FsbG91dCA9IGxhc3RJblNlbmRlckFuZFN0YXR1c0dyb3VwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93Q2FsbG91dCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVuZGVyaW5nRWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICBhY3Rpdml0eSxcblxuICAgICAgICAgICAgLy8gQWZ0ZXIgdGhlIGVsZW1lbnQgaXMgbW91bnRlZCwgc2V0IGl0IHRvIGFjdGl2aXR5RWxlbWVudHNSZWYuXG4gICAgICAgICAgICBjYWxsYmFja1JlZjogYWN0aXZpdHlFbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSBhY3Rpdml0eUVsZW1lbnRzUmVmLmN1cnJlbnQuZmluZCgoeyBhY3Rpdml0eUlEIH0pID0+IGFjdGl2aXR5SUQgPT09IGFjdGl2aXR5LmlkKTtcblxuICAgICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5lbGVtZW50ID0gYWN0aXZpdHlFbGVtZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBcImhpZGVUaW1lc3RhbXBcIiBpcyBhIHJlbmRlci10aW1lIHBhcmFtZXRlciBmb3IgcmVuZGVyQWN0aXZpdHlTdGF0dXMoKS5cbiAgICAgICAgICAgIC8vIElmIHNldCwgaXQgd2lsbCBoaWRlIGlmIHRpbWVzdGFtcCBpcyBiZWluZyBzaG93biwgYnV0IGl0IHdpbGwgY29udGludWUgdG8gc2hvd1xuICAgICAgICAgICAgLy8gcmV0cnkgcHJvbXB0LiBBbmQgc2hvdyB0aGUgc2NyZWVuIHJlYWRlciB2ZXJzaW9uIG9mIHRoZSB0aW1lc3RhbXAuXG4gICAgICAgICAgICBoaWRlVGltZXN0YW1wOlxuICAgICAgICAgICAgICBoaWRlQWxsVGltZXN0YW1wcyB8fCBpbmRleFdpdGhpblNlbmRlckFuZFN0YXR1c0dyb3VwICE9PSBhY3Rpdml0aWVzV2l0aFNhbWVTZW5kZXJBbmRTdGF0dXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIGtleSxcblxuICAgICAgICAgICAgLy8gV2hlbiBcImxpdmVSZWdpb25LZXlcIiBjaGFuZ2UsIGl0IHdhcyBzaG93IHVwIGluIHRoZSBsaXZlIHJlZ2lvbiBtb21lbnRhcmlseS5cbiAgICAgICAgICAgIGxpdmVSZWdpb25LZXk6IGtleSArICd8JyArIChtZXNzYWdlQmFja0Rpc3BsYXlUZXh0IHx8IHRleHQpLFxuICAgICAgICAgICAgcmVuZGVyQWN0aXZpdHksXG4gICAgICAgICAgICByZW5kZXJBY3Rpdml0eVN0YXR1cyxcbiAgICAgICAgICAgIHJlbmRlckF2YXRhcixcblxuICAgICAgICAgICAgLy8gVE9ETzogW1AyXSAjMjg1OCBXZSBzaG91bGQgdXNlIGNvcmUvZGVmaW5pdGlvbnMvc3BlYWtpbmdBY3Rpdml0eSBmb3IgdGhpcyBwcmVkaWNhdGUgaW5zdGVhZFxuICAgICAgICAgICAgc2hvdWxkU3BlYWs6IGFjdGl2aXR5LmNoYW5uZWxEYXRhICYmIGFjdGl2aXR5LmNoYW5uZWxEYXRhLnNwZWFrLFxuICAgICAgICAgICAgc2hvd0NhbGxvdXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgY3VycmVudDogYWN0aXZpdHlFbGVtZW50cyB9ID0gYWN0aXZpdHlFbGVtZW50c1JlZjtcblxuICAgIC8vIFVwZGF0ZSBhY3Rpdml0eUVsZW1lbnRSZWYgd2l0aCBuZXcgc2V0cyBvZiBhY3Rpdml0eSwgd2hpbGUgcmV0YWluaW5nIHRoZSBleGlzdGluZyByZWZlcmVuY2luZyBlbGVtZW50IGlmIGV4aXN0cy5cblxuICAgIGFjdGl2aXR5RWxlbWVudHNSZWYuY3VycmVudCA9IHJlbmRlcmluZ0VsZW1lbnRzLm1hcCgoeyBhY3Rpdml0eTogeyBpZCB9LCBrZXkgfSkgPT4ge1xuICAgICAgY29uc3QgZXhpc3RpbmdFbnRyeSA9IGFjdGl2aXR5RWxlbWVudHMuZmluZChlbnRyeSA9PiBlbnRyeS5rZXkgPT09IGtleSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjdGl2aXR5SUQ6IGlkLFxuICAgICAgICBlbGVtZW50OiBleGlzdGluZ0VudHJ5ICYmIGV4aXN0aW5nRW50cnkuZWxlbWVudCxcbiAgICAgICAga2V5XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlbmRlcmluZ0VsZW1lbnRzO1xuICB9LCBbXG4gICAgYWN0aXZpdGllc1dpdGhSZW5kZXJlcixcbiAgICBhY3Rpdml0eUVsZW1lbnRzUmVmLFxuICAgIGFjdGl2aXR5VHJlZSxcbiAgICBidWJibGVGcm9tVXNlck51Yk9mZnNldCxcbiAgICBidWJibGVOdWJPZmZzZXQsXG4gICAgY3JlYXRlQWN0aXZpdHlTdGF0dXNSZW5kZXJlcixcbiAgICBjcmVhdGVBdmF0YXJSZW5kZXJlcixcbiAgICBoaWRlQWxsVGltZXN0YW1wcyxcbiAgICBzaG93QXZhdGFySW5Hcm91cFxuICBdKTtcblxuICBjb25zdCByZW5kZXJpbmdBY3Rpdml0aWVzID0gdXNlTWVtbygoKSA9PiByZW5kZXJpbmdFbGVtZW50cy5tYXAoKHsgYWN0aXZpdHkgfSkgPT4gYWN0aXZpdHkpLCBbcmVuZGVyaW5nRWxlbWVudHNdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhST09UX0NTUyArICcnLCAnd2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdCcsIGNsYXNzTmFtZSArICcnKX1cbiAgICAgIGRpcj17ZGlyZWN0aW9ufVxuICAgICAgcmVmPXtyb290RWxlbWVudFJlZn1cbiAgICA+XG4gICAgICB7LyogVGhpcyA8c2VjdGlvbj4gaXMgZm9yIGxpdmUgcmVnaW9uIG9ubHkuIENvbnRlbnRzIGFyZSBtYWRlIGludmlzaWJsZSB0aHJvdWdoIENTUy4gKi99XG4gICAgICA8c2VjdGlvblxuICAgICAgICBhcmlhLWF0b21pYz17ZmFsc2V9XG4gICAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgICAgIGFyaWEtcmVsZXZhbnQ9XCJhZGRpdGlvbnNcIlxuICAgICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj17dHJhbnNjcmlwdFJvbGVEZXNjcmlwdGlvbn1cbiAgICAgICAgcm9sZT1cImxvZ1wiXG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJpbmdFbGVtZW50cy5tYXAoKHsgYWN0aXZpdHksIGxpdmVSZWdpb25LZXkgfSkgPT4gKFxuICAgICAgICAgIDxGYWRlIGtleT17bGl2ZVJlZ2lvbktleX0+eygpID0+IDxTY3JlZW5SZWFkZXJBY3Rpdml0eSBhY3Rpdml0eT17YWN0aXZpdHl9IC8+fTwvRmFkZT5cbiAgICAgICAgKSl9XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8SW50ZXJuYWxUcmFuc2NyaXB0U2Nyb2xsYWJsZSBhY3Rpdml0aWVzPXtyZW5kZXJpbmdBY3Rpdml0aWVzfT5cbiAgICAgICAge3JlbmRlcmluZ0VsZW1lbnRzLm1hcChcbiAgICAgICAgICAoe1xuICAgICAgICAgICAgYWN0aXZpdHksXG4gICAgICAgICAgICBjYWxsYmFja1JlZixcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGhpZGVUaW1lc3RhbXAsXG4gICAgICAgICAgICByZW5kZXJBY3Rpdml0eSxcbiAgICAgICAgICAgIHJlbmRlckFjdGl2aXR5U3RhdHVzLFxuICAgICAgICAgICAgcmVuZGVyQXZhdGFyLFxuICAgICAgICAgICAgc2hvdWxkU3BlYWssXG4gICAgICAgICAgICBzaG93Q2FsbG91dFxuICAgICAgICAgIH0pID0+IChcbiAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPXthY3Rpdml0eUFyaWFMYWJlbH0gLy8gVGhpcyB3aWxsIGJlIHJlYWQgd2hlbiBwcmVzc2luZyBDQVBTTE9DSyArIGFycm93IHdpdGggc2NyZWVuIHJlYWRlclxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoYWN0aXZpdHlTdHlsZVNldCArICcnLCAnd2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fYWN0aXZpdHknKX1cbiAgICAgICAgICAgICAga2V5PXtrZXl9XG4gICAgICAgICAgICAgIHJlZj17Y2FsbGJhY2tSZWZ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtyZW5kZXJBY3Rpdml0eSh7XG4gICAgICAgICAgICAgICAgaGlkZVRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICByZW5kZXJBY3Rpdml0eVN0YXR1cyxcbiAgICAgICAgICAgICAgICByZW5kZXJBdmF0YXIsXG4gICAgICAgICAgICAgICAgc2hvd0NhbGxvdXRcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIHtzaG91bGRTcGVhayAmJiA8U3BlYWtBY3Rpdml0eSBhY3Rpdml0eT17YWN0aXZpdHl9IC8+fVxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICApXG4gICAgICAgICl9XG4gICAgICA8L0ludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5CYXNpY1RyYW5zY3JpcHQyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lOiAnJ1xufTtcblxuQmFzaWNUcmFuc2NyaXB0Mi5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuY29uc3QgSW50ZXJuYWxTY3JlZW5SZWFkZXJUcmFuc2NyaXB0ID0gKHsgcmVuZGVyaW5nRWxlbWVudHMgfSkgPT4ge1xuICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuXG4gIGNvbnN0IHRyYW5zY3JpcHRSb2xlRGVzY3JpcHRpb24gPSBsb2NhbGl6ZSgnVFJBTlNDUklQVF9BUklBX1JPTEVfQUxUJyk7XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvblxuICAgICAgYXJpYS1hdG9taWM9e2ZhbHNlfVxuICAgICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICAgIGFyaWEtcmVsZXZhbnQ9XCJhZGRpdGlvbnNcIlxuICAgICAgYXJpYS1yb2xlZGVzY3JpcHRpb249e3RyYW5zY3JpcHRSb2xlRGVzY3JpcHRpb259XG4gICAgICByb2xlPVwibG9nXCJcbiAgICA+XG4gICAgICB7cmVuZGVyaW5nRWxlbWVudHMubWFwKCh7IGFjdGl2aXR5LCBsaXZlUmVnaW9uS2V5IH0pID0+IChcbiAgICAgICAgPEZhZGUga2V5PXtsaXZlUmVnaW9uS2V5fT57KCkgPT4gPFNjcmVlblJlYWRlckFjdGl2aXR5IGFjdGl2aXR5PXthY3Rpdml0eX0gLz59PC9GYWRlPlxuICAgICAgKSl9XG4gICAgPC9zZWN0aW9uPlxuICApO1xufTtcblxuSW50ZXJuYWxTY3JlZW5SZWFkZXJUcmFuc2NyaXB0LnByb3BUeXBlcyA9IHtcbiAgcmVuZGVyaW5nRWxlbWVudHM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBhY3Rpdml0eTogUHJvcFR5cGVzLmFueSxcbiAgICAgIGxpdmVSZWdpb25LZXk6IFByb3BUeXBlcy5zdHJpbmdcbiAgICB9KVxuICApLmlzUmVxdWlyZWRcbn07XG5cbi8vIFNlcGFyYXRpbmcgaGlnaC1mcmVxdWVuY3kgaG9va3MgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbmNvbnN0IEludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGUgPSAoeyBhY3Rpdml0aWVzLCBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFt7IGFjdGl2aXRpZXM6IGFjdGl2aXRpZXNTdHlsZVNldCB9XSA9IHVzZVN0eWxlU2V0KCk7XG4gIGNvbnN0IFt7IGhpZGVTY3JvbGxUb0VuZEJ1dHRvbiB9XSA9IHVzZVN0eWxlT3B0aW9ucygpO1xuICBjb25zdCBbYW5pbWF0aW5nVG9FbmRdID0gdXNlQW5pbWF0aW5nVG9FbmQoKTtcbiAgY29uc3QgW3N0aWNreV0gPSB1c2VTdGlja3koKTtcbiAgY29uc3QgZm9jdXMgPSB1c2VGb2N1cygpO1xuICBjb25zdCBsYXN0VmlzaWJsZUFjdGl2aXR5SWQgPSBnZXRBY3Rpdml0eVVuaXF1ZUlkKGFjdGl2aXRpZXNbYWN0aXZpdGllcy5sZW5ndGggLSAxXSB8fCB7fSk7IC8vIEFjdGl2aXR5IElEIG9mIHRoZSBsYXN0IHZpc2libGUgYWN0aXZpdHkgaW4gdGhlIGxpc3QuXG4gIGNvbnN0IGxvY2FsaXplID0gdXNlTG9jYWxpemVyKCk7XG4gIGNvbnN0IHNjcm9sbFRvRW5kQnV0dG9uUmVmID0gdXNlUmVmKCk7XG5cbiAgY29uc3QgbGFzdFJlYWRBY3Rpdml0eUlkUmVmID0gdXNlUmVmKGxhc3RWaXNpYmxlQWN0aXZpdHlJZCk7XG4gIGNvbnN0IHRyYW5zY3JpcHRSb2xlRGVzY3JpcHRpb24gPSBsb2NhbGl6ZSgnVFJBTlNDUklQVF9BUklBX1JPTEVfQUxUJyk7XG5cbiAgY29uc3QgYWxsQWN0aXZpdGllc1JlYWQgPSBsYXN0VmlzaWJsZUFjdGl2aXR5SWQgPT09IGxhc3RSZWFkQWN0aXZpdHlJZFJlZi5jdXJyZW50O1xuXG4gIGNvbnN0IGhhbmRsZVNjcm9sbFRvRW5kQnV0dG9uQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgeyBjdXJyZW50IH0gPSBzY3JvbGxUb0VuZEJ1dHRvblJlZjtcblxuICAgIC8vIEFmdGVyIGNsaWNraW5nIG9uIHRoZSBcIk5ldyBtZXNzYWdlc1wiIGJ1dHRvbiwgd2Ugc2hvdWxkIGZvY3VzIG9uIHRoZSBmaXJzdCB1bnJlYWQgZWxlbWVudC5cbiAgICAvLyBUaGlzIGlzIGZvciByZXNvbHZpbmcgdGhlIGJ1ZyBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L0JvdEZyYW1ld29yay1XZWJDaGF0L2lzc3Vlcy8zMTM1LlxuICAgIGlmIChjdXJyZW50KSB7XG4gICAgICBjb25zdCBuZXh0U2libGluZ3MgPSBuZXh0U2libGluZ0FsbChjdXJyZW50KTtcblxuICAgICAgY29uc3QgZmlyc3RVbnJlYWRUYWJiYWJsZSA9IG5leHRTaWJsaW5ncy5yZWR1Y2UoXG4gICAgICAgIChyZXN1bHQsIHVucmVhZEFjdGl2aXR5RWxlbWVudCkgPT4gcmVzdWx0IHx8IGZpcnN0VGFiYmFibGVEZXNjZW5kYW50KHVucmVhZEFjdGl2aXR5RWxlbWVudCksXG4gICAgICAgIDBcbiAgICAgICk7XG5cbiAgICAgIGZpcnN0VW5yZWFkVGFiYmFibGUgPyBmaXJzdFVucmVhZFRhYmJhYmxlLmZvY3VzKCkgOiBmb2N1cygnc2VuZEJveFdpdGhvdXRLZXlib2FyZCcpO1xuICAgIH1cbiAgfSwgW2ZvY3VzLCBzY3JvbGxUb0VuZEJ1dHRvblJlZl0pO1xuXG4gIGlmIChzdGlja3kpIHtcbiAgICAvLyBJZiBpdCBpcyBzdGlja3ksIHRoZSB1c2VyIGlzIGF0IHRoZSBib3R0b20gb2YgdGhlIHRyYW5zY3JpcHQsIGV2ZXJ5dGhpbmcgaXMgcmVhZC5cbiAgICAvLyBTbyBtYXJrIHRoZSBhY3Rpdml0eSBJRCBhcyByZWFkLlxuICAgIGxhc3RSZWFkQWN0aXZpdHlJZFJlZi5jdXJyZW50ID0gbGFzdFZpc2libGVBY3Rpdml0eUlkO1xuICB9XG5cbiAgLy8gRmluZHMgd2hlcmUgd2Ugc2hvdWxkIHJlbmRlciB0aGUgXCJOZXcgbWVzc2FnZXNcIiBidXR0b24sIGluIGluZGV4LiBSZXR1cm5zIC0xIHRvIGhpZGUgdGhlIGJ1dHRvbi5cbiAgY29uc3QgcmVuZGVyU2VwYXJhdG9yQWZ0ZXJJbmRleCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIC8vIERvbid0IHNob3cgdGhlIGJ1dHRvbiBpZjpcbiAgICAvLyAtIEFsbCBhY3Rpdml0aWVzIGhhdmUgYmVlbiByZWFkXG4gICAgLy8gLSBDdXJyZW50bHkgYW5pbWF0aW5nIHRvd2FyZHMgYm90dG9tXG4gICAgLy8gICAtIFwiTmV3IG1lc3NhZ2VzXCIgYnV0dG9uIG11c3Qgbm90IGZsYXNoIHdoZW46IDEuIFR5cGUgXCJoZWxwXCIsIDIuIFNjcm9sbCB0byB0b3AsIDMuIFR5cGUgXCJoZWxwXCIgYWdhaW4sIDQuIEV4cGVjdCB0aGUgXCJOZXcgbWVzc2FnZXNcIiBidXR0b24gbm90IGZsYXNoeVxuICAgIC8vIC0gSGlkZGVuIGJ5IHN0eWxlIG9wdGlvbnNcbiAgICAvLyAtIEl0IGlzIGFscmVhZHkgYXQgdGhlIGJvdHRvbSAoc3RpY2t5KVxuXG4gICAgLy8gQW55IGNoYW5nZXMgdG8gdGhpcyBsb2dpYywgdmVyaWZ5OlxuICAgIC8vIC0gXCJOZXcgbWVzc2FnZXNcIiBidXR0b24gc2hvdWxkIHBlcnNpc3Qgd2hpbGUgcHJvZ3JhbW1hdGljYWxseSBzY3JvbGxpbmcgdG8gbWlkLXBvaW50IG9mIHRoZSB0cmFuc2NyaXB0OlxuICAgIC8vICAgMS4gVHlwZSBcImhlbHBcIlxuICAgIC8vICAgMi4gVHlwZSBcInByb2FjdGl2ZVwiLCB0aGVuIGltbWVkaWF0ZWx5IHNjcm9sbCB0byB0b3BcbiAgICAvLyAgICAgIEV4cGVjdDogdGhlIFwiTmV3IG1lc3NhZ2VzXCIgYnV0dG9uIHNob3VsZCBhcHBlYXJcbiAgICAvLyAgIDMuIFJ1biBob29rIFwidXNlU2Nyb2xsVG8oeyBzY3JvbGxUb3A6IDUwMCB9KVwiXG4gICAgLy8gICAgICBFeHBlY3Q6IHdoZW4gdGhlIHNjcm9sbCBpcyBhbmltYXRpbmcgdG8gNTAwcHgsIHRoZSBcIk5ldyBtZXNzYWdlc1wiIGJ1dHRvbiBzaG91bGQga2VwdCBvbiB0aGUgc2NyZWVuXG4gICAgLy8gLSBcIk5ldyBtZXNzYWdlc1wiIGJ1dHRvbiBtdXN0IG5vdCBmbGFzaHk6XG4gICAgLy8gICAxLiBUeXBlIFwiaGVscFwiXG4gICAgLy8gICAyLiBTY3JvbGwgdG8gdG9wXG4gICAgLy8gICAgICBFeHBlY3Q6IG5vIFwiTmV3IG1lc3NhZ2VzXCIgYnV0dG9uIGlzIHNob3duXG4gICAgLy8gICAzLiBUeXBlIFwiaGVscFwiIGFnYWluXG4gICAgLy8gICAgICBFeHBlY3Q6IFwiTmV3IG1lc3NhZ2VzXCIgYnV0dG9uIG11c3Qgbm90IGZsYXNoLWFwcGVhclxuXG4gICAgaWYgKGFsbEFjdGl2aXRpZXNSZWFkIHx8IGFuaW1hdGluZ1RvRW5kIHx8IGhpZGVTY3JvbGxUb0VuZEJ1dHRvbiB8fCBzdGlja3kpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aXZpdGllcy5maW5kSW5kZXgoYWN0aXZpdHkgPT4gZ2V0QWN0aXZpdHlVbmlxdWVJZChhY3Rpdml0eSkgPT09IGxhc3RSZWFkQWN0aXZpdHlJZFJlZi5jdXJyZW50KTtcbiAgfSwgW2FjdGl2aXRpZXMsIGFsbEFjdGl2aXRpZXNSZWFkLCBhbmltYXRpbmdUb0VuZCwgaGlkZVNjcm9sbFRvRW5kQnV0dG9uLCBsYXN0UmVhZEFjdGl2aXR5SWRSZWYsIHN0aWNreV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFNjcm9sbFRvQm90dG9tUGFuZWwgY2xhc3NOYW1lPVwid2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fc2Nyb2xsYWJsZVwiPlxuICAgICAgPGRpdiBhcmlhLWhpZGRlbj17dHJ1ZX0gY2xhc3NOYW1lPVwid2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fZmlsbGVyXCIgLz5cbiAgICAgIDx1bFxuICAgICAgICBhcmlhLXJvbGVkZXNjcmlwdGlvbj17dHJhbnNjcmlwdFJvbGVEZXNjcmlwdGlvbn1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKGFjdGl2aXRpZXNTdHlsZVNldCArICcnLCAnd2ViY2hhdF9fYmFzaWMtdHJhbnNjcmlwdF9fdHJhbnNjcmlwdCcpfVxuICAgICAgPlxuICAgICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAge2NoaWxkfVxuICAgICAgICAgICAgey8qIFdlIGluc2VydCB0aGUgXCJOZXcgbWVzc2FnZXNcIiBidXR0b24gaGVyZSBmb3IgdGFiIG9yZGVyaW5nLiBVc2VycyBzaG91bGQgYmUgYWJsZSB0byBUQUIgaW50byB0aGUgYnV0dG9uLiAqL31cbiAgICAgICAgICAgIHtpbmRleCA9PT0gcmVuZGVyU2VwYXJhdG9yQWZ0ZXJJbmRleCAmJiAoXG4gICAgICAgICAgICAgIDxTY3JvbGxUb0VuZEJ1dHRvblxuICAgICAgICAgICAgICAgIGFyaWEtdmFsdWVtYXg9e2FjdGl2aXRpZXMubGVuZ3RofVxuICAgICAgICAgICAgICAgIGFyaWEtdmFsdWVub3c9e2luZGV4ICsgMX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTY3JvbGxUb0VuZEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICAgIHJlZj17c2Nyb2xsVG9FbmRCdXR0b25SZWZ9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICkpfVxuICAgICAgPC91bD5cbiAgICAgIDxCYXNpY1R5cGluZ0luZGljYXRvciAvPlxuICAgIDwvU2Nyb2xsVG9Cb3R0b21QYW5lbD5cbiAgKTtcbn07XG5cbkludGVybmFsVHJhbnNjcmlwdFNjcm9sbGFibGUucHJvcFR5cGVzID0ge1xuICBhY3Rpdml0aWVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5lbGVtZW50KS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNpY1RyYW5zY3JpcHQyO1xuIl19