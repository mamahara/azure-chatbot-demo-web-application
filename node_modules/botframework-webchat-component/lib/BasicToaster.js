"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _CollapseIcon = _interopRequireDefault(require("./Toast/CollapseIcon"));

var _ExpandIcon = _interopRequireDefault(require("./Toast/ExpandIcon"));

var _NotificationIcon = _interopRequireDefault(require("./Toast/NotificationIcon"));

var _randomId = _interopRequireDefault(require("./Utils/randomId"));

var _useDebouncedNotifications = _interopRequireDefault(require("./hooks/useDebouncedNotifications"));

var _useLocalizer = _interopRequireDefault(require("./hooks/useLocalizer"));

var _useRenderToast = _interopRequireDefault(require("./hooks/useRenderToast"));

var _useStyleSet3 = _interopRequireDefault(require("./hooks/useStyleSet"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  flexDirection: 'column',
  '& .webchat__toaster__header': {
    display: 'flex',
    flexShrink: 0
  },
  '& .webchat__toaster__expandText': {
    flex: 1
  },
  '& .webchat__toaster__list': {
    display: 'block',
    listStyleType: 'none'
  }
});
var LEVEL_AS_NUMBER = {
  error: 1,
  warn: 2,
  info: 3,
  success: 4
};

function getLevelAsNumber(level) {
  return LEVEL_AS_NUMBER[level] || 5;
}

function compareLevel(x, y) {
  return getLevelAsNumber(x) - getLevelAsNumber(y);
}

function sortNotifications(map) {
  return Object.values(map) // We want the order reversed, most recent on top.
  .sort(function (_ref, _ref2) {
    var x = _ref.timestamp;
    var y = _ref2.timestamp;
    return y - x;
  });
}

var PASSTHRU_FN = function PASSTHRU_FN(value) {
  return value;
};

var TOAST_ACCORDION_IDS = {
  two: 'TOAST_ACCORDION_TWO',
  few: 'TOAST_ACCORDION_FEW',
  many: 'TOAST_ACCORDION_MANY',
  other: 'TOAST_ACCORDION_OTHER'
};

var BasicToaster = function BasicToaster() {
  var instanceId = (0, _react.useMemo)(_randomId.default, []);

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      toasterStyleSet = _useStyleSet2[0].toaster;

  var _useDebouncedNotifica = (0, _useDebouncedNotifications.default)(),
      _useDebouncedNotifica2 = _slicedToArray(_useDebouncedNotifica, 1),
      debouncedNotifications = _useDebouncedNotifica2[0];

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var localizeWithPlural = (0, _useLocalizer.default)({
    plural: true
  });
  var renderToast = (0, _useRenderToast.default)();
  var handleToggleExpand = (0, _react.useCallback)(function () {
    return setExpanded(!expanded);
  }, [expanded, setExpanded]);
  var sortedNotifications = (0, _react.useMemo)(function () {
    return sortNotifications(debouncedNotifications);
  }, [debouncedNotifications]);
  var sortedNotificationsWithChildren = (0, _react.useMemo)(function () {
    return sortedNotifications.map(function (notification) {
      var children = renderToast({
        notification: notification
      });
      return children && {
        children: children,
        notification: notification
      };
    }).filter(PASSTHRU_FN);
  }, [renderToast, sortedNotifications]);
  var expandable = sortedNotificationsWithChildren.length > 1;

  var _sortedNotificationsW = sortedNotificationsWithChildren.map(function (_ref3) {
    var level = _ref3.notification.level;
    return level;
  }).sort(compareLevel),
      _sortedNotificationsW2 = _slicedToArray(_sortedNotificationsW, 1),
      highestLevel = _sortedNotificationsW2[0];

  var expandableElementId = (0, _react.useMemo)(function () {
    return !expandable || expanded ? "webchat__toaster__list__".concat(instanceId) : undefined;
  }, [expandable, expanded, instanceId]);
  var headerElementId = (0, _react.useMemo)(function () {
    return expandable ? "webchat__toaster__header__".concat(instanceId) : undefined;
  }, [expandable, instanceId]);
  (0, _react.useEffect)(function () {
    !expandable && setExpanded(false);
  }, [expandable]);
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-labelledby": headerElementId,
    "aria-live": "polite",
    "aria-relevant": "all",
    className: (0, _classnames.default)(ROOT_CSS + '', toasterStyleSet + '', 'webchat__toaster', {
      'webchat__toaster--expandable': expandable,
      'webchat__toaster--expanded': expanded,
      'webchat__toaster--error': highestLevel === 'error',
      'webchat__toaster--info': highestLevel === 'info',
      'webchat__toaster--success': highestLevel === 'success',
      'webchat__toaster--warn': highestLevel === 'warn'
    }),
    role: "log"
  }, expandable && /*#__PURE__*/_react.default.createElement("button", {
    "aria-controls": expandableElementId,
    "aria-expanded": expanded,
    className: "webchat__toaster__header",
    id: headerElementId,
    onClick: handleToggleExpand,
    type: "button"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__toaster__expandLevelIconBox"
  }, /*#__PURE__*/_react.default.createElement(_NotificationIcon.default, {
    className: "webchat__toaster__expandLevelIcon",
    level: highestLevel
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__toaster__expandText"
  }, localizeWithPlural(TOAST_ACCORDION_IDS, sortedNotificationsWithChildren.length)), /*#__PURE__*/_react.default.createElement("div", {
    "aria-hidden": true,
    className: "webchat__toaster__expandIcon"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__toaster__expandIconFocus"
  }, expanded ? /*#__PURE__*/_react.default.createElement(_CollapseIcon.default, null) : /*#__PURE__*/_react.default.createElement(_ExpandIcon.default, null)))), (!expandable || expanded) && /*#__PURE__*/_react.default.createElement("ul", {
    "aria-labelledby": headerElementId,
    className: "webchat__toaster__list",
    id: expandableElementId,
    role: "region"
  }, sortedNotificationsWithChildren.map(function (_ref4) {
    var children = _ref4.children,
        id = _ref4.notification.id;
    return /*#__PURE__*/_react.default.createElement("li", {
      "aria-atomic": true,
      className: "webchat__toaster__listItem",
      key: id,
      role: "none"
    }, children);
  })));
};

var _default = BasicToaster;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,