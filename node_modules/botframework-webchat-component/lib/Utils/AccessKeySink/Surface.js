"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _firstTabbableDescendant = require("../firstTabbableDescendant");

var _Context = _interopRequireDefault(require("./internal/Context"));

var _useNavigatorPlatform3 = _interopRequireDefault(require("../../hooks/internal/useNavigatorPlatform"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Surface = function Surface(_ref) {
  var children = _ref.children,
      otherProps = _objectWithoutProperties(_ref, ["children"]);

  var _useNavigatorPlatform = (0, _useNavigatorPlatform3.default)(),
      _useNavigatorPlatform2 = _slicedToArray(_useNavigatorPlatform, 1),
      apple = _useNavigatorPlatform2[0].apple;

  var contextRef = (0, _react.useRef)({
    focii: []
  });
  var handleKeyUp = (0, _react.useCallback)(function (event) {
    var altKey = event.altKey,
        ctrlKey = event.ctrlKey,
        key = event.key,
        shiftKey = event.shiftKey; // On Apple, most modern browsers use CTRL + OPTION as modifiers.
    // Otherwise, we use ALT + SHIFT as modifierse.

    if (altKey && (apple ? ctrlKey : shiftKey)) {
      var focii = contextRef.current.focii.filter(function (entry) {
        return entry.keys.includes(key);
      });
      var currentFocus = focii.findIndex(function (_ref2) {
        var current = _ref2.ref.current;
        return current === document.activeElement || current.contains(document.activeElement);
      });
      var nextFocus = focii[(currentFocus + 1) % focii.length];

      if (nextFocus) {
        event.preventDefault();
        event.stopPropagation();
        var tabbable = (0, _firstTabbableDescendant.orSelf)(nextFocus.ref.current);
        tabbable && tabbable.focus();
      }
    }
  }, [apple]);
  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: contextRef.current
  }, /*#__PURE__*/_react.default.createElement("div", _extends({
    onKeyUp: handleKeyUp
  }, otherProps), children));
};

Surface.defaultProps = {
  children: undefined
};
Surface.propTypes = {
  children: _propTypes.default.element
};
var _default = Surface;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9VdGlscy9BY2Nlc3NLZXlTaW5rL1N1cmZhY2UuanMiXSwibmFtZXMiOlsiU3VyZmFjZSIsImNoaWxkcmVuIiwib3RoZXJQcm9wcyIsImFwcGxlIiwiY29udGV4dFJlZiIsImZvY2lpIiwiaGFuZGxlS2V5VXAiLCJldmVudCIsImFsdEtleSIsImN0cmxLZXkiLCJrZXkiLCJzaGlmdEtleSIsImN1cnJlbnQiLCJmaWx0ZXIiLCJlbnRyeSIsImtleXMiLCJpbmNsdWRlcyIsImN1cnJlbnRGb2N1cyIsImZpbmRJbmRleCIsInJlZiIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImNvbnRhaW5zIiwibmV4dEZvY3VzIiwibGVuZ3RoIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJ0YWJiYWJsZSIsImZvY3VzIiwiZGVmYXVsdFByb3BzIiwidW5kZWZpbmVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsT0FBTyxHQUFHLFNBQVZBLE9BQVUsT0FBaUM7QUFBQSxNQUE5QkMsUUFBOEIsUUFBOUJBLFFBQThCO0FBQUEsTUFBakJDLFVBQWlCOztBQUFBLDhCQUMzQixxQ0FEMkI7QUFBQTtBQUFBLE1BQ3RDQyxLQURzQyw2QkFDdENBLEtBRHNDOztBQUUvQyxNQUFNQyxVQUFVLEdBQUcsbUJBQU87QUFBRUMsSUFBQUEsS0FBSyxFQUFFO0FBQVQsR0FBUCxDQUFuQjtBQUVBLE1BQU1DLFdBQVcsR0FBRyx3QkFDbEIsVUFBQUMsS0FBSyxFQUFJO0FBQUEsUUFDQ0MsTUFERCxHQUNvQ0QsS0FEcEMsQ0FDQ0MsTUFERDtBQUFBLFFBQ1NDLE9BRFQsR0FDb0NGLEtBRHBDLENBQ1NFLE9BRFQ7QUFBQSxRQUNrQkMsR0FEbEIsR0FDb0NILEtBRHBDLENBQ2tCRyxHQURsQjtBQUFBLFFBQ3VCQyxRQUR2QixHQUNvQ0osS0FEcEMsQ0FDdUJJLFFBRHZCLEVBR1A7QUFDQTs7QUFDQSxRQUFJSCxNQUFNLEtBQUtMLEtBQUssR0FBR00sT0FBSCxHQUFhRSxRQUF2QixDQUFWLEVBQTRDO0FBQzFDLFVBQU1OLEtBQUssR0FBR0QsVUFBVSxDQUFDUSxPQUFYLENBQW1CUCxLQUFuQixDQUF5QlEsTUFBekIsQ0FBZ0MsVUFBQUMsS0FBSztBQUFBLGVBQUlBLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxRQUFYLENBQW9CTixHQUFwQixDQUFKO0FBQUEsT0FBckMsQ0FBZDtBQUVBLFVBQU1PLFlBQVksR0FBR1osS0FBSyxDQUFDYSxTQUFOLENBQ25CO0FBQUEsWUFBVU4sT0FBVixTQUFHTyxHQUFILENBQVVQLE9BQVY7QUFBQSxlQUEwQkEsT0FBTyxLQUFLUSxRQUFRLENBQUNDLGFBQXJCLElBQXNDVCxPQUFPLENBQUNVLFFBQVIsQ0FBaUJGLFFBQVEsQ0FBQ0MsYUFBMUIsQ0FBaEU7QUFBQSxPQURtQixDQUFyQjtBQUdBLFVBQU1FLFNBQVMsR0FBR2xCLEtBQUssQ0FBQyxDQUFDWSxZQUFZLEdBQUcsQ0FBaEIsSUFBcUJaLEtBQUssQ0FBQ21CLE1BQTVCLENBQXZCOztBQUVBLFVBQUlELFNBQUosRUFBZTtBQUNiaEIsUUFBQUEsS0FBSyxDQUFDa0IsY0FBTjtBQUNBbEIsUUFBQUEsS0FBSyxDQUFDbUIsZUFBTjtBQUVBLFlBQU1DLFFBQVEsR0FBRyxxQ0FBOEJKLFNBQVMsQ0FBQ0osR0FBVixDQUFjUCxPQUE1QyxDQUFqQjtBQUVBZSxRQUFBQSxRQUFRLElBQUlBLFFBQVEsQ0FBQ0MsS0FBVCxFQUFaO0FBQ0Q7QUFDRjtBQUNGLEdBdkJpQixFQXdCbEIsQ0FBQ3pCLEtBQUQsQ0F4QmtCLENBQXBCO0FBMkJBLHNCQUNFLDZCQUFDLGdCQUFELENBQXNCLFFBQXRCO0FBQStCLElBQUEsS0FBSyxFQUFFQyxVQUFVLENBQUNRO0FBQWpELGtCQUNFO0FBQUssSUFBQSxPQUFPLEVBQUVOO0FBQWQsS0FBK0JKLFVBQS9CLEdBQ0dELFFBREgsQ0FERixDQURGO0FBT0QsQ0F0Q0Q7O0FBd0NBRCxPQUFPLENBQUM2QixZQUFSLEdBQXVCO0FBQ3JCNUIsRUFBQUEsUUFBUSxFQUFFNkI7QUFEVyxDQUF2QjtBQUlBOUIsT0FBTyxDQUFDK0IsU0FBUixHQUFvQjtBQUNsQjlCLEVBQUFBLFFBQVEsRUFBRStCLG1CQUFVQztBQURGLENBQXBCO2VBSWVqQyxPIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IG9yU2VsZiBhcyBmaXJzdFRhYmJhYmxlRGVzY2VuZGFudE9yU2VsZiB9IGZyb20gJy4uL2ZpcnN0VGFiYmFibGVEZXNjZW5kYW50JztcbmltcG9ydCBBY2Nlc3NLZXlTaW5rQ29udGV4dCBmcm9tICcuL2ludGVybmFsL0NvbnRleHQnO1xuaW1wb3J0IHVzZU5hdmlnYXRvclBsYXRmb3JtIGZyb20gJy4uLy4uL2hvb2tzL2ludGVybmFsL3VzZU5hdmlnYXRvclBsYXRmb3JtJztcblxuY29uc3QgU3VyZmFjZSA9ICh7IGNoaWxkcmVuLCAuLi5vdGhlclByb3BzIH0pID0+IHtcbiAgY29uc3QgW3sgYXBwbGUgfV0gPSB1c2VOYXZpZ2F0b3JQbGF0Zm9ybSgpO1xuICBjb25zdCBjb250ZXh0UmVmID0gdXNlUmVmKHsgZm9jaWk6IFtdIH0pO1xuXG4gIGNvbnN0IGhhbmRsZUtleVVwID0gdXNlQ2FsbGJhY2soXG4gICAgZXZlbnQgPT4ge1xuICAgICAgY29uc3QgeyBhbHRLZXksIGN0cmxLZXksIGtleSwgc2hpZnRLZXkgfSA9IGV2ZW50O1xuXG4gICAgICAvLyBPbiBBcHBsZSwgbW9zdCBtb2Rlcm4gYnJvd3NlcnMgdXNlIENUUkwgKyBPUFRJT04gYXMgbW9kaWZpZXJzLlxuICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSB1c2UgQUxUICsgU0hJRlQgYXMgbW9kaWZpZXJzZS5cbiAgICAgIGlmIChhbHRLZXkgJiYgKGFwcGxlID8gY3RybEtleSA6IHNoaWZ0S2V5KSkge1xuICAgICAgICBjb25zdCBmb2NpaSA9IGNvbnRleHRSZWYuY3VycmVudC5mb2NpaS5maWx0ZXIoZW50cnkgPT4gZW50cnkua2V5cy5pbmNsdWRlcyhrZXkpKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSBmb2NpaS5maW5kSW5kZXgoXG4gICAgICAgICAgKHsgcmVmOiB7IGN1cnJlbnQgfSB9KSA9PiBjdXJyZW50ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGN1cnJlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudClcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV4dEZvY3VzID0gZm9jaWlbKGN1cnJlbnRGb2N1cyArIDEpICUgZm9jaWkubGVuZ3RoXTtcblxuICAgICAgICBpZiAobmV4dEZvY3VzKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgIGNvbnN0IHRhYmJhYmxlID0gZmlyc3RUYWJiYWJsZURlc2NlbmRhbnRPclNlbGYobmV4dEZvY3VzLnJlZi5jdXJyZW50KTtcblxuICAgICAgICAgIHRhYmJhYmxlICYmIHRhYmJhYmxlLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFthcHBsZV1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxBY2Nlc3NLZXlTaW5rQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17Y29udGV4dFJlZi5jdXJyZW50fT5cbiAgICAgIDxkaXYgb25LZXlVcD17aGFuZGxlS2V5VXB9IHsuLi5vdGhlclByb3BzfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9BY2Nlc3NLZXlTaW5rQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cblN1cmZhY2UuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogdW5kZWZpbmVkXG59O1xuXG5TdXJmYWNlLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdXJmYWNlO1xuIl19