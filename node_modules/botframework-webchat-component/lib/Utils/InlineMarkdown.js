"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _createCustomEvent = _interopRequireDefault(require("../Utils/createCustomEvent"));

var _randomId = _interopRequireDefault(require("./randomId"));

var _useInternalMarkdownIt = _interopRequireDefault(require("../hooks/internal/useInternalMarkdownIt"));

var _useStyleOptions3 = _interopRequireDefault(require("../hooks/useStyleOptions"));

var _walkMarkdownTokens = _interopRequireDefault(require("./walkMarkdownTokens"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function replaceAnchorWithButton(markdownTokens) {
  return (0, _walkMarkdownTokens.default)(markdownTokens, function (markdownToken) {
    markdownToken = _objectSpread({}, markdownToken);

    switch (markdownToken.type) {
      case 'link_open':
        markdownToken.tag = 'button';
        markdownToken.attrs = [].concat(_toConsumableArray((0, _simpleUpdateIn.default)(markdownToken.attrs, [function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              name = _ref2[0],
              value = _ref2[1];

          return name === 'href' && value.startsWith('#');
        }], function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              value = _ref4[1];

          return ['data-markdown-href', value.substr(1)];
        })), [['type', 'button']]);
        break;

      case 'link_close':
        markdownToken.tag = 'button';
        break;

      default:
        break;
    }

    return markdownToken;
  });
}

var InlineMarkdown = function InlineMarkdown(_ref5) {
  var children = _ref5.children,
      onReference = _ref5.onReference,
      references = _ref5.references;

  if (typeof children !== 'string') {
    console.warn('botframework-webchat: "children" prop passed to <InlineMarkdown> must be of type string.');
    children = '';
  }

  var _useInternalMarkdownI = (0, _useInternalMarkdownIt.default)(),
      _useInternalMarkdownI2 = _slicedToArray(_useInternalMarkdownI, 1),
      markdownIt = _useInternalMarkdownI2[0];

  var _useStyleOptions = (0, _useStyleOptions3.default)(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      accent = _useStyleOptions2[0].accent; // We inlined the style here because this style is:
  // 1. Internal to Web Chat
  // 2. Not customizable from developers (other than setting `styleOptions.accent`)


  var className = (0, _react.useMemo)(function () {
    return (0, _glamor.css)({
      '& button[data-markdown-href]': {
        appearance: 'none',
        backgroundColor: 'transparent',
        border: 0,
        color: accent,
        cursor: 'pointer',
        fontFamily: 'inherit',
        fontSize: 'inherit',
        padding: 0
      }
    }) + '';
  }, [accent]); // Markdown-It only support references in uppercase.

  references = references.map(function (reference) {
    return reference.toUpperCase();
  });

  var _references$reduce = references.reduce(function (_ref6, ref) {
    var hrefToRef = _ref6.hrefToRef,
        refToHref = _ref6.refToHref;
    var href = (0, _randomId.default)();
    return {
      hrefToRef: _objectSpread(_objectSpread({}, hrefToRef), {}, _defineProperty({}, href, ref)),
      refToHref: _objectSpread(_objectSpread({}, refToHref), {}, _defineProperty({}, ref, href))
    };
  }, {
    hrefToRef: {},
    refToHref: {}
  }),
      hrefToRef = _references$reduce.hrefToRef,
      refToHref = _references$reduce.refToHref;

  var html = (0, _react.useMemo)(function () {
    var tree = markdownIt.parseInline(children, {
      references: references.reduce( // (references, key) => ({ ...references, [key]: { href: `#${key}` } }),
      function (references, key) {
        return _objectSpread(_objectSpread({}, references), {}, _defineProperty({}, key, {
          href: "#".concat(refToHref[key])
        }));
      }, {})
    }); // Turn "<a href="#retry">Retry</a>" into "<button data-ref="retry" type="button">Retry</button>"

    var updatedTree = replaceAnchorWithButton(tree);
    return {
      __html: markdownIt.renderer.render(updatedTree)
    };
  }, [children, refToHref, markdownIt, references]);
  var handleClick = (0, _react.useCallback)(function (event) {
    event.stopPropagation();
    var href = event.target.getAttribute('data-markdown-href');
    href && onReference && onReference((0, _createCustomEvent.default)('reference', {
      data: hrefToRef[href]
    }));
  }, [hrefToRef, onReference]);
  return /*#__PURE__*/_react.default.createElement("span", {
    className: className,
    dangerouslySetInnerHTML: html,
    onClick: handleClick
  });
};

InlineMarkdown.defaultProps = {
  children: '',
  onReference: undefined,
  references: []
};
InlineMarkdown.propTypes = {
  children: _propTypes.default.string,
  onReference: _propTypes.default.func,
  references: _propTypes.default.arrayOf(_propTypes.default.string)
};
var _default = InlineMarkdown;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,