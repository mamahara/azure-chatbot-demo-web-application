"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = downscaleImageToDataURLUsingWorker;
exports.checkSupport = void 0;

var _blobToArrayBuffer = _interopRequireDefault(require("./blobToArrayBuffer"));

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _downscaleImageToDataURLUsingWorker = _interopRequireDefault(require("./downscaleImageToDataURLUsingWorker.worker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function createWorker() {
  var blob = new Blob(["(".concat(_downscaleImageToDataURLUsingWorker.default, ")()")], {
    type: 'text/javascript'
  });
  var url = window.URL.createObjectURL(blob);
  return new Promise(function (resolve, reject) {
    var worker = new Worker(url);

    worker.onerror = function (_ref) {
      var error = _ref.error,
          message = _ref.message;
      return reject(error || new Error(message));
    };

    worker.onmessage = function (_ref2) {
      var data = _ref2.data;
      return data === 'ready' && resolve(worker);
    };
  }).finally(function () {
    window.URL.revokeObjectURL(url);
  });
}

var workerPromise;

function getWorker() {
  return _getWorker.apply(this, arguments);
} // We are using a lazy-check because:
// 1. OffscreenCanvas.getContext has a toll
// 2. Developers could bring polyfills


function _getWorker() {
  _getWorker = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var worker;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!workerPromise) {
              _context.next = 6;
              break;
            }

            _context.next = 3;
            return workerPromise;

          case 3:
            worker = _context.sent;
            _context.next = 11;
            break;

          case 6:
            workerPromise = createWorker();
            _context.next = 9;
            return workerPromise;

          case 9:
            worker = _context.sent;
            worker.addEventListener('error', function () {
              // Current worker errored out, will create a new worker next time.
              workerPromise = null;
              worker.terminate();
            });

          case 11:
            return _context.abrupt("return", worker);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getWorker.apply(this, arguments);
}

var checkSupport = (0, _memoizeOne.default)(function () {
  var hasOffscreenCanvas = typeof window.OffscreenCanvas !== 'undefined' && (typeof window.OffscreenCanvas.prototype.convertToBlob !== 'undefined' || typeof window.OffscreenCanvas.prototype.toBlob !== 'undefined');
  var isOffscreenCanvasSupportGetContext2D;

  if (hasOffscreenCanvas) {
    try {
      new OffscreenCanvas(1, 1).getContext('2d');
      isOffscreenCanvasSupportGetContext2D = true;
    } catch (err) {
      isOffscreenCanvasSupportGetContext2D = false;
    }
  }

  return typeof window.createImageBitmap !== 'undefined' && typeof window.MessageChannel !== 'undefined' && hasOffscreenCanvas && isOffscreenCanvasSupportGetContext2D && typeof window.Worker !== 'undefined';
});
exports.checkSupport = checkSupport;

function downscaleImageToDataURLUsingWorker(blob, maxWidth, maxHeight, type, quality) {
  return new Promise(function (resolve, reject) {
    var _MessageChannel = new MessageChannel(),
        port1 = _MessageChannel.port1,
        port2 = _MessageChannel.port2;

    port1.onmessage = function (_ref3) {
      var _ref3$data = _ref3.data,
          error = _ref3$data.error,
          result = _ref3$data.result;

      if (error) {
        var err = new Error(error.message);
        err.stack = error.stack;
        reject(err);
      } else {
        resolve(result);
      }

      port1.close();
      port2.close();
    };

    Promise.all([(0, _blobToArrayBuffer.default)(blob), getWorker()]).then(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
          arrayBuffer = _ref5[0],
          worker = _ref5[1];

      return worker.postMessage({
        arrayBuffer: arrayBuffer,
        maxHeight: maxHeight,
        maxWidth: maxWidth,
        quality: quality,
        type: type
      }, [arrayBuffer, port2]);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,