"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactSay = require("react-say");

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _glamor = require("glamor");

var _reactRedux = require("react-redux");

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _createActivityRenderer = _interopRequireDefault(require("./Middleware/createActivityRenderer"));

var _createActivityStatusRenderer = _interopRequireDefault(require("./Middleware/createActivityStatusRenderer"));

var _createAttachmentRenderer = _interopRequireDefault(require("./Middleware/createAttachmentRenderer"));

var _createAvatarRenderer = _interopRequireDefault(require("./Middleware/createAvatarRenderer"));

var _createCustomEvent = _interopRequireDefault(require("./Utils/createCustomEvent"));

var _createToastRenderer = _interopRequireDefault(require("./Middleware/createToastRenderer"));

var _createTypingIndicatorRenderer = _interopRequireDefault(require("./Middleware/createTypingIndicatorRenderer"));

var _ErrorBoundary = _interopRequireDefault(require("./ErrorBoundary"));

var _getAllLocalizedStrings = _interopRequireDefault(require("./Localization/getAllLocalizedStrings"));

var _isObject = _interopRequireDefault(require("./Utils/isObject"));

var _normalizeLanguage = _interopRequireDefault(require("./Utils/normalizeLanguage"));

var _PrecompiledGlobalize = _interopRequireDefault(require("./Utils/PrecompiledGlobalize"));

var _useReferenceGrammarID = _interopRequireDefault(require("./hooks/useReferenceGrammarID"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _addTargetBlankToHyperlinksMarkdown = _interopRequireDefault(require("./Utils/addTargetBlankToHyperlinksMarkdown"));

var _concatMiddleware = _interopRequireDefault(require("./Middleware/concatMiddleware"));

var _createCoreMiddleware = _interopRequireDefault(require("./Middleware/CardAction/createCoreMiddleware"));

var _createCoreMiddleware2 = _interopRequireDefault(require("./Middleware/GroupActivities/createCoreMiddleware"));

var _createStyleSet = _interopRequireDefault(require("./Styles/createStyleSet"));

var _defaultSelectVoice = _interopRequireDefault(require("./defaultSelectVoice"));

var _Dictation = _interopRequireDefault(require("./Dictation"));

var _mapMap = _interopRequireDefault(require("./Utils/mapMap"));

var _observableToPromise = _interopRequireDefault(require("./Utils/observableToPromise"));

var _Tracker = _interopRequireDefault(require("./Tracker"));

var _WebChatReduxContext = _interopRequireWildcard(require("./WebChatReduxContext"));

var _WebChatUIContext = _interopRequireDefault(require("./WebChatUIContext"));

var _BypassSpeechSynthesisPonyfill = require("./Speech/BypassSpeechSynthesisPonyfill");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// List of Redux actions factory we are hoisting as Web Chat functions
var DISPATCHERS = {
  clearSuggestedActions: _botframeworkWebchatCore.clearSuggestedActions,
  dismissNotification: _botframeworkWebchatCore.dismissNotification,
  emitTypingIndicator: _botframeworkWebchatCore.emitTypingIndicator,
  markActivity: _botframeworkWebchatCore.markActivity,
  postActivity: _botframeworkWebchatCore.postActivity,
  sendEvent: _botframeworkWebchatCore.sendEvent,
  sendFiles: _botframeworkWebchatCore.sendFiles,
  sendMessage: _botframeworkWebchatCore.sendMessage,
  sendMessageBack: _botframeworkWebchatCore.sendMessageBack,
  sendPostBack: _botframeworkWebchatCore.sendPostBack,
  setDictateInterims: _botframeworkWebchatCore.setDictateInterims,
  setDictateState: _botframeworkWebchatCore.setDictateState,
  setNotification: _botframeworkWebchatCore.setNotification,
  setSendBox: _botframeworkWebchatCore.setSendBox,
  setSendTimeout: _botframeworkWebchatCore.setSendTimeout,
  startDictate: _botframeworkWebchatCore.startDictate,
  startSpeakingActivity: _botframeworkWebchatCore.startSpeakingActivity,
  stopDictate: _botframeworkWebchatCore.stopDictate,
  stopSpeakingActivity: _botframeworkWebchatCore.stopSpeakingActivity,
  submitSendBox: _botframeworkWebchatCore.submitSendBox
};

function styleSetToClassNames(styleSet) {
  return (0, _mapMap.default)(styleSet, function (style, key) {
    return key === 'options' ? style : (0, _glamor.css)(style);
  });
}

function createCardActionContext(_ref) {
  var cardActionMiddleware = _ref.cardActionMiddleware,
      directLine = _ref.directLine,
      dispatch = _ref.dispatch;
  var runMiddleware = (0, _concatMiddleware.default)(cardActionMiddleware, (0, _createCoreMiddleware.default)())({
    dispatch: dispatch
  });
  return {
    onCardAction: function onCardAction(cardAction) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          target = _ref2.target;

      return runMiddleware(function (_ref3) {
        var type = _ref3.cardAction.type;
        throw new Error("Web Chat: received unknown card action \"".concat(type, "\""));
      })({
        cardAction: cardAction,
        getSignInUrl: cardAction.type === 'signin' ? function () {
          var value = cardAction.value;

          if (directLine.getSessionId) {
            // TODO: [P3] We should change this one to async/await.
            //       This is the first place in this project to use async.
            //       Thus, we need to add @babel/plugin-transform-runtime and @babel/runtime.
            return (0, _observableToPromise.default)(directLine.getSessionId()).then(function (sessionId) {
              return "".concat(value).concat(encodeURIComponent("&code_challenge=".concat(sessionId)));
            });
          }

          console.warn('botframework-webchat: OAuth is not supported on this Direct Line adapter.');
          return value;
        } : null,
        target: target
      });
    }
  };
}

function createFocusContext(_ref4) {
  var sendBoxFocusRef = _ref4.sendBoxFocusRef,
      transcriptFocusRef = _ref4.transcriptFocusRef;
  return {
    focus: function focus(where) {
      var ref = where === 'sendBox' || where === 'sendBoxWithoutKeyboard' ? sendBoxFocusRef : transcriptFocusRef;

      var _ref5 = ref || {},
          current = _ref5.current;

      if (current) {
        if (where === 'sendBoxWithoutKeyboard') {
          // To not activate the virtual keyboard while changing focus to an input, we will temporarily set it as read-only and flip it back.
          // https://stackoverflow.com/questions/7610758/prevent-iphone-default-keyboard-when-focusing-an-input/7610923
          var readOnly = current.getAttribute('readonly');
          current.setAttribute('readonly', 'readonly');
          setTimeout(function () {
            current.focus();
            readOnly ? current.setAttribute('readonly', readOnly) : current.removeAttribute('readonly');
          }, 0);
        } else {
          current.focus();
        }
      }
    }
  };
}

function createGroupActivitiesContext(_ref6) {
  var groupActivitiesMiddleware = _ref6.groupActivitiesMiddleware,
      groupTimestamp = _ref6.groupTimestamp;
  var runMiddleware = (0, _concatMiddleware.default)(groupActivitiesMiddleware, (0, _createCoreMiddleware2.default)({
    groupTimestamp: groupTimestamp
  }))()(function () {
    throw new Error('botframework-webchat internal: No middleware is execute for groupActivities.');
  });
  return {
    groupActivities: function groupActivities(_ref7) {
      var activities = _ref7.activities;
      return runMiddleware({
        activities: activities
      });
    }
  };
}

function mergeStringsOverrides(localizedStrings, language, overrideLocalizedStrings) {
  if (!overrideLocalizedStrings) {
    return localizedStrings;
  } else if (typeof overrideLocalizedStrings === 'function') {
    var merged = overrideLocalizedStrings(localizedStrings, language);

    if (!(0, _isObject.default)(merged)) {
      throw new Error('botframework-webchat: overrideLocalizedStrings function must return an object.');
    }

    return merged;
  }

  if (!(0, _isObject.default)(overrideLocalizedStrings)) {
    throw new Error('botframework-webchat: overrideLocalizedStrings must be either a function, an object, or falsy.');
  }

  return _objectSpread(_objectSpread({}, localizedStrings), overrideLocalizedStrings);
}

var Composer = function Composer(_ref8) {
  var activityMiddleware = _ref8.activityMiddleware,
      activityRenderer = _ref8.activityRenderer,
      activityStatusMiddleware = _ref8.activityStatusMiddleware,
      activityStatusRenderer = _ref8.activityStatusRenderer,
      attachmentMiddleware = _ref8.attachmentMiddleware,
      attachmentRenderer = _ref8.attachmentRenderer,
      avatarMiddleware = _ref8.avatarMiddleware,
      avatarRenderer = _ref8.avatarRenderer,
      cardActionMiddleware = _ref8.cardActionMiddleware,
      children = _ref8.children,
      dir = _ref8.dir,
      directLine = _ref8.directLine,
      disabled = _ref8.disabled,
      extraStyleSet = _ref8.extraStyleSet,
      grammars = _ref8.grammars,
      groupActivitiesMiddleware = _ref8.groupActivitiesMiddleware,
      groupTimestamp = _ref8.groupTimestamp,
      locale = _ref8.locale,
      onTelemetry = _ref8.onTelemetry,
      overrideLocalizedStrings = _ref8.overrideLocalizedStrings,
      renderMarkdown = _ref8.renderMarkdown,
      selectVoice = _ref8.selectVoice,
      sendTimeout = _ref8.sendTimeout,
      sendTypingIndicator = _ref8.sendTypingIndicator,
      styleOptions = _ref8.styleOptions,
      styleSet = _ref8.styleSet,
      suggestedActionsAccessKey = _ref8.suggestedActionsAccessKey,
      toastMiddleware = _ref8.toastMiddleware,
      toastRenderer = _ref8.toastRenderer,
      typingIndicatorMiddleware = _ref8.typingIndicatorMiddleware,
      typingIndicatorRenderer = _ref8.typingIndicatorRenderer,
      userID = _ref8.userID,
      username = _ref8.username,
      webSpeechPonyfillFactory = _ref8.webSpeechPonyfillFactory;

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      dictateAbortable = _useState2[0],
      setDictateAbortable = _useState2[1];

  var _useReferenceGrammarI = (0, _useReferenceGrammarID.default)(),
      _useReferenceGrammarI2 = _slicedToArray(_useReferenceGrammarI, 1),
      referenceGrammarID = _useReferenceGrammarI2[0];

  var dispatch = (0, _WebChatReduxContext.useDispatch)();
  var sendBoxFocusRef = (0, _react.useRef)();
  var telemetryDimensionsRef = (0, _react.useRef)({});
  var transcriptFocusRef = (0, _react.useRef)();
  var patchedDir = (0, _react.useMemo)(function () {
    return dir === 'ltr' || dir === 'rtl' ? dir : 'auto';
  }, [dir]);
  var patchedGrammars = (0, _react.useMemo)(function () {
    return grammars || [];
  }, [grammars]);
  var patchedStyleOptions = (0, _react.useMemo)(function () {
    var patchedStyleOptions = _objectSpread({}, styleOptions);

    if (typeof groupTimestamp !== 'undefined' && typeof patchedStyleOptions.groupTimestamp === 'undefined') {
      console.warn('Web Chat: "groupTimestamp" has been moved to "styleOptions". This deprecation migration will be removed on or after January 1 2022.');
      patchedStyleOptions.groupTimestamp = groupTimestamp;
    }

    if (typeof sendTimeout !== 'undefined' && typeof patchedStyleOptions.sendTimeout === 'undefined') {
      console.warn('Web Chat: "sendTimeout" has been moved to "styleOptions". This deprecation migration will be removed on or after January 1 2022.');
      patchedStyleOptions.sendTimeout = sendTimeout;
    }

    if (styleOptions.slowConnectionAfter < 0) {
      console.warn('Web Chat: "slowConnectionAfter" cannot be negative, will set to 0.');
      patchedStyleOptions.slowConnectionAfter = 0;
    }

    return patchedStyleOptions;
  }, [groupTimestamp, sendTimeout, styleOptions]);
  (0, _react.useEffect)(function () {
    dispatch((0, _botframeworkWebchatCore.setLanguage)(locale));
  }, [dispatch, locale]);
  (0, _react.useEffect)(function () {
    typeof sendTimeout === 'number' && dispatch((0, _botframeworkWebchatCore.setSendTimeout)(sendTimeout));
  }, [dispatch, sendTimeout]);
  (0, _react.useEffect)(function () {
    dispatch((0, _botframeworkWebchatCore.setSendTypingIndicator)(!!sendTypingIndicator));
  }, [dispatch, sendTypingIndicator]);
  (0, _react.useEffect)(function () {
    dispatch((0, _botframeworkWebchatCore.connect)({
      directLine: directLine,
      userID: userID,
      username: username
    }));
    return function () {
      // TODO: [P3] disconnect() is an async call (pending -> fulfilled), we need to wait, or change it to reconnect()
      dispatch((0, _botframeworkWebchatCore.disconnect)());
    };
  }, [dispatch, directLine, userID, username]);
  var internalMarkdownIt = (0, _react.useMemo)(function () {
    return new _markdownIt.default();
  }, []);
  var internalRenderMarkdownInline = (0, _react.useMemo)(function () {
    return function (markdown) {
      var tree = internalMarkdownIt.parseInline(markdown); // We should add rel="noopener noreferrer" and target="_blank"

      var patchedTree = (0, _addTargetBlankToHyperlinksMarkdown.default)(tree);
      return internalMarkdownIt.renderer.render(patchedTree);
    };
  }, [internalMarkdownIt]);
  var cardActionContext = (0, _react.useMemo)(function () {
    return createCardActionContext({
      cardActionMiddleware: cardActionMiddleware,
      directLine: directLine,
      dispatch: dispatch
    });
  }, [cardActionMiddleware, directLine, dispatch]);
  var patchedSelectVoice = (0, _react.useCallback)(selectVoice || _defaultSelectVoice.default.bind(null, {
    language: locale
  }), [selectVoice]);
  var focusContext = (0, _react.useMemo)(function () {
    return createFocusContext({
      sendBoxFocusRef: sendBoxFocusRef,
      transcriptFocusRef: transcriptFocusRef
    });
  }, [sendBoxFocusRef, transcriptFocusRef]);
  var patchedStyleSet = (0, _react.useMemo)(function () {
    return styleSetToClassNames(_objectSpread(_objectSpread({}, styleSet || (0, _createStyleSet.default)(patchedStyleOptions)), extraStyleSet));
  }, [extraStyleSet, patchedStyleOptions, styleSet]);
  var groupActivitiesContext = (0, _react.useMemo)(function () {
    return createGroupActivitiesContext({
      groupActivitiesMiddleware: groupActivitiesMiddleware,
      groupTimestamp: patchedStyleSet.options.groupTimestamp
    });
  }, [groupActivitiesMiddleware, patchedStyleSet.options.groupTimestamp]);
  var hoistedDispatchers = (0, _react.useMemo)(function () {
    return (0, _mapMap.default)(DISPATCHERS, function (dispatcher) {
      return function () {
        return dispatch(dispatcher.apply(void 0, arguments));
      };
    });
  }, [dispatch]);
  var webSpeechPonyfill = (0, _react.useMemo)(function () {
    var ponyfill = webSpeechPonyfillFactory && webSpeechPonyfillFactory({
      referenceGrammarID: referenceGrammarID
    });

    var _ref9 = ponyfill || {},
        speechSynthesis = _ref9.speechSynthesis,
        SpeechSynthesisUtterance = _ref9.SpeechSynthesisUtterance;

    return _objectSpread(_objectSpread({}, ponyfill), {}, {
      speechSynthesis: speechSynthesis || _BypassSpeechSynthesisPonyfill.speechSynthesis,
      SpeechSynthesisUtterance: SpeechSynthesisUtterance || _BypassSpeechSynthesisPonyfill.SpeechSynthesisUtterance
    });
  }, [referenceGrammarID, webSpeechPonyfillFactory]);
  var dictationOnError = (0, _react.useCallback)(function (err) {
    console.error(err);
  }, []);
  var patchedLocalizedStrings = (0, _react.useMemo)(function () {
    return mergeStringsOverrides((0, _getAllLocalizedStrings.default)()[(0, _normalizeLanguage.default)(locale)], locale, overrideLocalizedStrings);
  }, [locale, overrideLocalizedStrings]);
  var localizedGlobalize = (0, _react.useMemo)(function () {
    var _ref10 = patchedLocalizedStrings || {},
        GLOBALIZE = _ref10.GLOBALIZE,
        GLOBALIZE_LANGUAGE = _ref10.GLOBALIZE_LANGUAGE;

    return GLOBALIZE || GLOBALIZE_LANGUAGE && (0, _PrecompiledGlobalize.default)(GLOBALIZE_LANGUAGE) || (0, _PrecompiledGlobalize.default)('en');
  }, [patchedLocalizedStrings]);
  var trackDimension = (0, _react.useCallback)(function (name, data) {
    if (!name || typeof name !== 'string') {
      return console.warn('botframework-webchat: Telemetry dimension name must be a string.');
    }

    var type = _typeof(data);

    if (type !== 'string' && type !== 'undefined') {
      return console.warn('botframework-webchat: Telemetry dimension data must be a string or undefined.');
    }

    telemetryDimensionsRef.current = (0, _simpleUpdateIn.default)(telemetryDimensionsRef.current, [name], type === 'undefined' ? data : function () {
      return data;
    });
  }, [telemetryDimensionsRef]);
  var patchedActivityRenderer = (0, _react.useMemo)(function () {
    activityRenderer && console.warn('Web Chat: "activityRenderer" is deprecated and will be removed on 2020-06-15, please use "activityMiddleware" instead.');
    return activityRenderer || (0, _createActivityRenderer.default)(activityMiddleware);
  }, [activityMiddleware, activityRenderer]);
  var patchedActivityStatusRenderer = (0, _react.useMemo)(function () {
    activityStatusRenderer && console.warn('Web Chat: "activityStatusRenderer" is deprecated and will be removed on 2020-06-15, please use "activityStatusMiddleware" instead.');
    return activityStatusRenderer || (0, _createActivityStatusRenderer.default)(activityStatusMiddleware);
  }, [activityStatusMiddleware, activityStatusRenderer]);
  var patchedAttachmentRenderer = (0, _react.useMemo)(function () {
    attachmentRenderer && console.warn('Web Chat: "attachmentRenderer" is deprecated and will be removed on 2020-06-15, please use "attachmentMiddleware" instead.');
    return attachmentRenderer || (0, _createAttachmentRenderer.default)(attachmentMiddleware);
  }, [attachmentMiddleware, attachmentRenderer]);
  var patchedAvatarRenderer = (0, _react.useMemo)(function () {
    avatarRenderer && console.warn('Web Chat: "avatarRenderer" is deprecated and will be removed on 2020-06-15, please use "avatarMiddleware" instead.');
    return avatarRenderer || (0, _createAvatarRenderer.default)(avatarMiddleware);
  }, [avatarMiddleware, avatarRenderer]);
  var patchedToastRenderer = (0, _react.useMemo)(function () {
    toastRenderer && console.warn('Web Chat: "toastRenderer" is deprecated and will be removed on 2020-06-15, please use "toastMiddleware" instead.');
    return toastRenderer || (0, _createToastRenderer.default)(toastMiddleware);
  }, [toastMiddleware, toastRenderer]);
  var patchedTypingIndicatorRenderer = (0, _react.useMemo)(function () {
    typingIndicatorRenderer && console.warn('Web Chat: "typingIndicatorRenderer" is deprecated and will be removed on 2020-06-15, please use "typingIndicatorMiddleware" instead.');
    return typingIndicatorRenderer || (0, _createTypingIndicatorRenderer.default)(typingIndicatorMiddleware);
  }, [typingIndicatorMiddleware, typingIndicatorRenderer]);
  var transcriptActivityElementsRef = (0, _react.useRef)([]);
  var transcriptRootElementRef = (0, _react.useRef)(); // This is a heavy function, and it is expected to be only called when there is a need to recreate business logic, e.g.
  // - User ID changed, causing all send* functions to be updated
  // - send
  // TODO: [P3] We should think about if we allow the user to change onSendBoxValueChanged/sendBoxValue, e.g.
  // 1. Turns text into UPPERCASE
  // 2. Filter out profanity
  // TODO: [P4] Revisit all members of context
  //       This context should consist of members that are not in the Redux store
  //       i.e. members that are not interested in other types of UIs

  var context = (0, _react.useMemo)(function () {
    return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cardActionContext), focusContext), groupActivitiesContext), hoistedDispatchers), {}, {
      activityRenderer: patchedActivityRenderer,
      activityStatusRenderer: patchedActivityStatusRenderer,
      attachmentRenderer: patchedAttachmentRenderer,
      avatarRenderer: patchedAvatarRenderer,
      dictateAbortable: dictateAbortable,
      dir: patchedDir,
      directLine: directLine,
      disabled: disabled,
      grammars: patchedGrammars,
      internalMarkdownItState: [internalMarkdownIt],
      internalRenderMarkdownInline: internalRenderMarkdownInline,
      language: locale,
      localizedGlobalizeState: [localizedGlobalize],
      localizedStrings: patchedLocalizedStrings,
      onTelemetry: onTelemetry,
      renderMarkdown: renderMarkdown,
      selectVoice: patchedSelectVoice,
      sendBoxFocusRef: sendBoxFocusRef,
      sendTypingIndicator: sendTypingIndicator,
      setDictateAbortable: setDictateAbortable,
      styleOptions: styleOptions,
      styleSet: patchedStyleSet,
      suggestedActionsAccessKey: suggestedActionsAccessKey,
      telemetryDimensionsRef: telemetryDimensionsRef,
      toastRenderer: patchedToastRenderer,
      trackDimension: trackDimension,
      transcriptActivityElementsRef: transcriptActivityElementsRef,
      transcriptFocusRef: transcriptFocusRef,
      transcriptRootElementRef: transcriptRootElementRef,
      typingIndicatorRenderer: patchedTypingIndicatorRenderer,
      userID: userID,
      username: username,
      webSpeechPonyfill: webSpeechPonyfill
    });
  }, [cardActionContext, dictateAbortable, directLine, disabled, focusContext, groupActivitiesContext, hoistedDispatchers, internalMarkdownIt, internalRenderMarkdownInline, locale, localizedGlobalize, onTelemetry, patchedActivityRenderer, patchedActivityStatusRenderer, patchedAttachmentRenderer, patchedAvatarRenderer, patchedDir, patchedGrammars, patchedLocalizedStrings, patchedSelectVoice, patchedStyleSet, patchedToastRenderer, patchedTypingIndicatorRenderer, renderMarkdown, sendBoxFocusRef, sendTypingIndicator, setDictateAbortable, styleOptions, suggestedActionsAccessKey, telemetryDimensionsRef, trackDimension, transcriptActivityElementsRef, transcriptFocusRef, transcriptRootElementRef, userID, username, webSpeechPonyfill]);
  return /*#__PURE__*/_react.default.createElement(_WebChatUIContext.default.Provider, {
    value: context
  }, /*#__PURE__*/_react.default.createElement(_reactSay.Composer, {
    ponyfill: webSpeechPonyfill
  }, typeof children === 'function' ? children(context) : children), /*#__PURE__*/_react.default.createElement(_Dictation.default, {
    onError: dictationOnError
  }), onTelemetry && /*#__PURE__*/_react.default.createElement(_Tracker.default, null));
}; // We will create a Redux store if it was not passed in


var ComposeWithStore = function ComposeWithStore(_ref11) {
  var onTelemetry = _ref11.onTelemetry,
      store = _ref11.store,
      props = _objectWithoutProperties(_ref11, ["onTelemetry", "store"]);

  var handleError = (0, _react.useCallback)(function (_ref12) {
    var error = _ref12.error;
    onTelemetry && onTelemetry((0, _createCustomEvent.default)('exception', {
      error: error,
      fatal: true
    }));
  }, [onTelemetry]);
  var memoizedStore = (0, _react.useMemo)(function () {
    return store || (0, _botframeworkWebchatCore.createStore)();
  }, [store]);
  return /*#__PURE__*/_react.default.createElement(_ErrorBoundary.default, {
    onError: handleError
  }, /*#__PURE__*/_react.default.createElement(_reactRedux.Provider, {
    context: _WebChatReduxContext.default,
    store: memoizedStore
  }, /*#__PURE__*/_react.default.createElement(_reactScrollToBottom.Composer, null, /*#__PURE__*/_react.default.createElement(Composer, _extends({
    onTelemetry: onTelemetry
  }, props)))));
};

ComposeWithStore.defaultProps = {
  onTelemetry: undefined,
  store: undefined
};
ComposeWithStore.propTypes = {
  onTelemetry: _propTypes.default.func,
  store: _propTypes.default.any
};
var _default = ComposeWithStore; // TODO: [P3] We should consider moving some data from Redux store to props
//       Although we use `connectToWebChat` to hide the details of accessor of Redux store,
//       we should clean up the responsibility between Context and Redux store
//       We should decide which data is needed for React but not in other environment such as CLI/VSCode

exports.default = _default;
Composer.defaultProps = {
  activityMiddleware: undefined,
  activityRenderer: undefined,
  activityStatusMiddleware: undefined,
  activityStatusRenderer: undefined,
  attachmentMiddleware: undefined,
  attachmentRenderer: undefined,
  avatarMiddleware: undefined,
  avatarRenderer: undefined,
  cardActionMiddleware: undefined,
  children: undefined,
  dir: 'auto',
  disabled: false,
  extraStyleSet: undefined,
  grammars: [],
  groupActivitiesMiddleware: undefined,
  groupTimestamp: undefined,
  locale: window.navigator.language || 'en-US',
  onTelemetry: undefined,
  overrideLocalizedStrings: undefined,
  renderMarkdown: undefined,
  selectVoice: undefined,
  sendTimeout: undefined,
  sendTypingIndicator: false,
  styleOptions: {},
  styleSet: undefined,
  suggestedActionsAccessKey: 'A a Å å',
  toastMiddleware: undefined,
  toastRenderer: undefined,
  typingIndicatorMiddleware: undefined,
  typingIndicatorRenderer: undefined,
  userID: '',
  username: '',
  webSpeechPonyfillFactory: undefined
};
Composer.propTypes = {
  activityMiddleware: _propTypes.default.func,
  activityRenderer: _propTypes.default.func,
  activityStatusMiddleware: _propTypes.default.func,
  activityStatusRenderer: _propTypes.default.func,
  attachmentMiddleware: _propTypes.default.func,
  attachmentRenderer: _propTypes.default.func,
  avatarMiddleware: _propTypes.default.func,
  avatarRenderer: _propTypes.default.func,
  cardActionMiddleware: _propTypes.default.func,
  children: _propTypes.default.any,
  dir: _propTypes.default.oneOf(['auto', 'ltr', 'rtl']),
  directLine: _propTypes.default.shape({
    activity$: _propTypes.default.shape({
      subscribe: _propTypes.default.func.isRequired
    }).isRequired,
    connectionStatus$: _propTypes.default.shape({
      subscribe: _propTypes.default.func.isRequired
    }).isRequired,
    end: _propTypes.default.func,
    getSessionId: _propTypes.default.func,
    postActivity: _propTypes.default.func.isRequired,
    referenceGrammarID: _propTypes.default.string,
    token: _propTypes.default.string
  }).isRequired,
  disabled: _propTypes.default.bool,
  extraStyleSet: _propTypes.default.any,
  grammars: _propTypes.default.arrayOf(_propTypes.default.string),
  groupActivitiesMiddleware: _propTypes.default.func,
  groupTimestamp: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number]),
  locale: _propTypes.default.string,
  onTelemetry: _propTypes.default.func,
  overrideLocalizedStrings: _propTypes.default.oneOfType([_propTypes.default.any, _propTypes.default.func]),
  renderMarkdown: _propTypes.default.func,
  selectVoice: _propTypes.default.func,
  sendTimeout: _propTypes.default.number,
  sendTypingIndicator: _propTypes.default.bool,
  styleOptions: _propTypes.default.any,
  styleSet: _propTypes.default.any,
  suggestedActionsAccessKey: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.string]),
  toastMiddleware: _propTypes.default.func,
  toastRenderer: _propTypes.default.func,
  typingIndicatorMiddleware: _propTypes.default.func,
  typingIndicatorRenderer: _propTypes.default.func,
  userID: _propTypes.default.string,
  username: _propTypes.default.string,
  webSpeechPonyfillFactory: _propTypes.default.func
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,