"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectDictationInterims = exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _useDictateInterims3 = _interopRequireDefault(require("../hooks/useDictateInterims"));

var _useDictateState3 = _interopRequireDefault(require("../hooks/useDictateState"));

var _useLocalizer = _interopRequireDefault(require("../hooks/useLocalizer"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _Constants$DictateSta = _botframeworkWebchatCore.Constants.DictateState,
    DICTATING = _Constants$DictateSta.DICTATING,
    STARTING = _Constants$DictateSta.STARTING,
    STOPPING = _Constants$DictateSta.STOPPING;
var ROOT_CSS = (0, _glamor.css)({
  alignItems: 'center',
  display: 'flex'
});

var connectDictationInterims = function connectDictationInterims() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var dictateInterims = _ref.dictateInterims,
        dictateState = _ref.dictateState,
        language = _ref.language;
    return {
      dictateInterims: dictateInterims,
      dictateState: dictateState,
      language: language
    };
  }].concat(selectors));
};

exports.connectDictationInterims = connectDictationInterims;

var DictationInterims = function DictationInterims(_ref2) {
  var className = _ref2.className;

  var _useDictateInterims = (0, _useDictateInterims3.default)(),
      _useDictateInterims2 = _slicedToArray(_useDictateInterims, 1),
      dictateInterims = _useDictateInterims2[0];

  var _useDictateState = (0, _useDictateState3.default)(),
      _useDictateState2 = _slicedToArray(_useDictateState, 1),
      dictateState = _useDictateState2[0];

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      dictationInterimsStyleSet = _useStyleSet2[0].dictationInterims;

  var localize = (0, _useLocalizer.default)();
  return dictateState === STARTING || dictateState === STOPPING ? /*#__PURE__*/_react.default.createElement("p", {
    className: (0, _classnames.default)(dictationInterimsStyleSet + '', ROOT_CSS + '', className + '', 'status')
  }, dictateState === STARTING && localize('SPEECH_INPUT_STARTING')) : dictateState === DICTATING && (dictateInterims.length ? /*#__PURE__*/_react.default.createElement("p", {
    className: (0, _classnames.default)(dictationInterimsStyleSet + '', ROOT_CSS + '', className + '', 'dictating')
  }, dictateInterims.map(function (interim, index) {
    return /*#__PURE__*/_react.default.createElement("span", {
      key: index
    }, interim, "\xA0");
  })) : /*#__PURE__*/_react.default.createElement("p", {
    className: (0, _classnames.default)(dictationInterimsStyleSet + '', ROOT_CSS + '', className + '', 'status')
  }, localize('SPEECH_INPUT_LISTENING')));
};

DictationInterims.defaultProps = {
  className: ''
};
DictationInterims.propTypes = {
  className: _propTypes.default.string
}; // TODO: [P3] After speech started, when clicking on the transcript, it should
//       stop the dictation and allow the user to type-correct the transcript

var _default = DictationInterims;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kQm94L0RpY3RhdGlvbkludGVyaW1zLmpzIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIkRpY3RhdGVTdGF0ZSIsIkRJQ1RBVElORyIsIlNUQVJUSU5HIiwiU1RPUFBJTkciLCJST09UX0NTUyIsImFsaWduSXRlbXMiLCJkaXNwbGF5IiwiY29ubmVjdERpY3RhdGlvbkludGVyaW1zIiwic2VsZWN0b3JzIiwiY29ubmVjdFRvV2ViQ2hhdCIsImRpY3RhdGVJbnRlcmltcyIsImRpY3RhdGVTdGF0ZSIsImxhbmd1YWdlIiwiRGljdGF0aW9uSW50ZXJpbXMiLCJjbGFzc05hbWUiLCJkaWN0YXRpb25JbnRlcmltc1N0eWxlU2V0IiwiZGljdGF0aW9uSW50ZXJpbXMiLCJsb2NhbGl6ZSIsImxlbmd0aCIsIm1hcCIsImludGVyaW0iLCJpbmRleCIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OzRCQUlJQSxrQyxDQURGQyxZO0lBQWdCQyxTLHlCQUFBQSxTO0lBQVdDLFEseUJBQUFBLFE7SUFBVUMsUSx5QkFBQUEsUTtBQUd2QyxJQUFNQyxRQUFRLEdBQUcsaUJBQUk7QUFDbkJDLEVBQUFBLFVBQVUsRUFBRSxRQURPO0FBRW5CQyxFQUFBQSxPQUFPLEVBQUU7QUFGVSxDQUFKLENBQWpCOztBQUtBLElBQU1DLHdCQUF3QixHQUFHLFNBQTNCQSx3QkFBMkI7QUFBQSxvQ0FBSUMsU0FBSjtBQUFJQSxJQUFBQSxTQUFKO0FBQUE7O0FBQUEsU0FDL0JDLHlDQUNFO0FBQUEsUUFBR0MsZUFBSCxRQUFHQSxlQUFIO0FBQUEsUUFBb0JDLFlBQXBCLFFBQW9CQSxZQUFwQjtBQUFBLFFBQWtDQyxRQUFsQyxRQUFrQ0EsUUFBbEM7QUFBQSxXQUFrRDtBQUNoREYsTUFBQUEsZUFBZSxFQUFmQSxlQURnRDtBQUVoREMsTUFBQUEsWUFBWSxFQUFaQSxZQUZnRDtBQUdoREMsTUFBQUEsUUFBUSxFQUFSQTtBQUhnRCxLQUFsRDtBQUFBLEdBREYsU0FNS0osU0FOTCxFQUQrQjtBQUFBLENBQWpDOzs7O0FBVUEsSUFBTUssaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixRQUFtQjtBQUFBLE1BQWhCQyxTQUFnQixTQUFoQkEsU0FBZ0I7O0FBQUEsNEJBQ2pCLG1DQURpQjtBQUFBO0FBQUEsTUFDcENKLGVBRG9DOztBQUFBLHlCQUVwQixnQ0FGb0I7QUFBQTtBQUFBLE1BRXBDQyxZQUZvQzs7QUFBQSxxQkFHZ0IsNEJBSGhCO0FBQUE7QUFBQSxNQUdmSSx5QkFIZSxvQkFHbENDLGlCQUhrQzs7QUFJM0MsTUFBTUMsUUFBUSxHQUFHLDRCQUFqQjtBQUVBLFNBQU9OLFlBQVksS0FBS1QsUUFBakIsSUFBNkJTLFlBQVksS0FBS1IsUUFBOUMsZ0JBQ0w7QUFBRyxJQUFBLFNBQVMsRUFBRSx5QkFBV1kseUJBQXlCLEdBQUcsRUFBdkMsRUFBMkNYLFFBQVEsR0FBRyxFQUF0RCxFQUEwRFUsU0FBUyxHQUFHLEVBQXRFLEVBQTBFLFFBQTFFO0FBQWQsS0FDR0gsWUFBWSxLQUFLVCxRQUFqQixJQUE2QmUsUUFBUSxDQUFDLHVCQUFELENBRHhDLENBREssR0FLTE4sWUFBWSxLQUFLVixTQUFqQixLQUNHUyxlQUFlLENBQUNRLE1BQWhCLGdCQUNDO0FBQUcsSUFBQSxTQUFTLEVBQUUseUJBQVdILHlCQUF5QixHQUFHLEVBQXZDLEVBQTJDWCxRQUFRLEdBQUcsRUFBdEQsRUFBMERVLFNBQVMsR0FBRyxFQUF0RSxFQUEwRSxXQUExRTtBQUFkLEtBQ0dKLGVBQWUsQ0FBQ1MsR0FBaEIsQ0FBb0IsVUFBQ0MsT0FBRCxFQUFVQyxLQUFWO0FBQUEsd0JBQ25CO0FBQU0sTUFBQSxHQUFHLEVBQUVBO0FBQVgsT0FDR0QsT0FESCxTQURtQjtBQUFBLEdBQXBCLENBREgsQ0FERCxnQkFVQztBQUFHLElBQUEsU0FBUyxFQUFFLHlCQUFXTCx5QkFBeUIsR0FBRyxFQUF2QyxFQUEyQ1gsUUFBUSxHQUFHLEVBQXRELEVBQTBEVSxTQUFTLEdBQUcsRUFBdEUsRUFBMEUsUUFBMUU7QUFBZCxLQUNHRyxRQUFRLENBQUMsd0JBQUQsQ0FEWCxDQVhKLENBTEY7QUFxQkQsQ0EzQkQ7O0FBNkJBSixpQkFBaUIsQ0FBQ1MsWUFBbEIsR0FBaUM7QUFDL0JSLEVBQUFBLFNBQVMsRUFBRTtBQURvQixDQUFqQztBQUlBRCxpQkFBaUIsQ0FBQ1UsU0FBbEIsR0FBOEI7QUFDNUJULEVBQUFBLFNBQVMsRUFBRVUsbUJBQVVDO0FBRE8sQ0FBOUIsQyxDQUlBO0FBQ0E7O2VBRWVaLGlCIiwic291cmNlUm9vdCI6ImNvbXBvbmVudDovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5OiBcIm9mZlwiICovXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcblxuaW1wb3J0IGNvbm5lY3RUb1dlYkNoYXQgZnJvbSAnLi4vY29ubmVjdFRvV2ViQ2hhdCc7XG5pbXBvcnQgdXNlRGljdGF0ZUludGVyaW1zIGZyb20gJy4uL2hvb2tzL3VzZURpY3RhdGVJbnRlcmltcyc7XG5pbXBvcnQgdXNlRGljdGF0ZVN0YXRlIGZyb20gJy4uL2hvb2tzL3VzZURpY3RhdGVTdGF0ZSc7XG5pbXBvcnQgdXNlTG9jYWxpemVyIGZyb20gJy4uL2hvb2tzL3VzZUxvY2FsaXplcic7XG5pbXBvcnQgdXNlU3R5bGVTZXQgZnJvbSAnLi4vaG9va3MvdXNlU3R5bGVTZXQnO1xuXG5jb25zdCB7XG4gIERpY3RhdGVTdGF0ZTogeyBESUNUQVRJTkcsIFNUQVJUSU5HLCBTVE9QUElORyB9XG59ID0gQ29uc3RhbnRzO1xuXG5jb25zdCBST09UX0NTUyA9IGNzcyh7XG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBkaXNwbGF5OiAnZmxleCdcbn0pO1xuXG5jb25zdCBjb25uZWN0RGljdGF0aW9uSW50ZXJpbXMgPSAoLi4uc2VsZWN0b3JzKSA9PlxuICBjb25uZWN0VG9XZWJDaGF0KFxuICAgICh7IGRpY3RhdGVJbnRlcmltcywgZGljdGF0ZVN0YXRlLCBsYW5ndWFnZSB9KSA9PiAoe1xuICAgICAgZGljdGF0ZUludGVyaW1zLFxuICAgICAgZGljdGF0ZVN0YXRlLFxuICAgICAgbGFuZ3VhZ2VcbiAgICB9KSxcbiAgICAuLi5zZWxlY3RvcnNcbiAgKTtcblxuY29uc3QgRGljdGF0aW9uSW50ZXJpbXMgPSAoeyBjbGFzc05hbWUgfSkgPT4ge1xuICBjb25zdCBbZGljdGF0ZUludGVyaW1zXSA9IHVzZURpY3RhdGVJbnRlcmltcygpO1xuICBjb25zdCBbZGljdGF0ZVN0YXRlXSA9IHVzZURpY3RhdGVTdGF0ZSgpO1xuICBjb25zdCBbeyBkaWN0YXRpb25JbnRlcmltczogZGljdGF0aW9uSW50ZXJpbXNTdHlsZVNldCB9XSA9IHVzZVN0eWxlU2V0KCk7XG4gIGNvbnN0IGxvY2FsaXplID0gdXNlTG9jYWxpemVyKCk7XG5cbiAgcmV0dXJuIGRpY3RhdGVTdGF0ZSA9PT0gU1RBUlRJTkcgfHwgZGljdGF0ZVN0YXRlID09PSBTVE9QUElORyA/IChcbiAgICA8cCBjbGFzc05hbWU9e2NsYXNzTmFtZXMoZGljdGF0aW9uSW50ZXJpbXNTdHlsZVNldCArICcnLCBST09UX0NTUyArICcnLCBjbGFzc05hbWUgKyAnJywgJ3N0YXR1cycpfT5cbiAgICAgIHtkaWN0YXRlU3RhdGUgPT09IFNUQVJUSU5HICYmIGxvY2FsaXplKCdTUEVFQ0hfSU5QVVRfU1RBUlRJTkcnKX1cbiAgICA8L3A+XG4gICkgOiAoXG4gICAgZGljdGF0ZVN0YXRlID09PSBESUNUQVRJTkcgJiZcbiAgICAgIChkaWN0YXRlSW50ZXJpbXMubGVuZ3RoID8gKFxuICAgICAgICA8cCBjbGFzc05hbWU9e2NsYXNzTmFtZXMoZGljdGF0aW9uSW50ZXJpbXNTdHlsZVNldCArICcnLCBST09UX0NTUyArICcnLCBjbGFzc05hbWUgKyAnJywgJ2RpY3RhdGluZycpfT5cbiAgICAgICAgICB7ZGljdGF0ZUludGVyaW1zLm1hcCgoaW50ZXJpbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICB7aW50ZXJpbX1cbiAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICkgOiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhkaWN0YXRpb25JbnRlcmltc1N0eWxlU2V0ICsgJycsIFJPT1RfQ1NTICsgJycsIGNsYXNzTmFtZSArICcnLCAnc3RhdHVzJyl9PlxuICAgICAgICAgIHtsb2NhbGl6ZSgnU1BFRUNIX0lOUFVUX0xJU1RFTklORycpfVxuICAgICAgICA8L3A+XG4gICAgICApKVxuICApO1xufTtcblxuRGljdGF0aW9uSW50ZXJpbXMuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnXG59O1xuXG5EaWN0YXRpb25JbnRlcmltcy5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuLy8gVE9ETzogW1AzXSBBZnRlciBzcGVlY2ggc3RhcnRlZCwgd2hlbiBjbGlja2luZyBvbiB0aGUgdHJhbnNjcmlwdCwgaXQgc2hvdWxkXG4vLyAgICAgICBzdG9wIHRoZSBkaWN0YXRpb24gYW5kIGFsbG93IHRoZSB1c2VyIHRvIHR5cGUtY29ycmVjdCB0aGUgdHJhbnNjcmlwdFxuXG5leHBvcnQgZGVmYXVsdCBEaWN0YXRpb25JbnRlcmltcztcblxuZXhwb3J0IHsgY29ubmVjdERpY3RhdGlvbkludGVyaW1zIH07XG4iXX0=