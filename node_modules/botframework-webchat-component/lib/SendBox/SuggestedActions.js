"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSuggestedActions = exports.default = void 0;

var _glamor = require("glamor");

var _reactFilm = _interopRequireDefault(require("react-film"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _ScreenReaderText = _interopRequireDefault(require("../ScreenReaderText"));

var _SuggestedAction = _interopRequireDefault(require("./SuggestedAction"));

var _useDirection3 = _interopRequireDefault(require("../hooks/useDirection"));

var _useLocalizeAccessKey = _interopRequireDefault(require("../hooks/internal/useLocalizeAccessKey"));

var _useLocalizer = _interopRequireDefault(require("../hooks/useLocalizer"));

var _useStyleOptions3 = _interopRequireDefault(require("../hooks/useStyleOptions"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

var _useSuggestedActionsAccessKey = _interopRequireDefault(require("../hooks/internal/useSuggestedActionsAccessKey"));

var _useUniqueId = _interopRequireDefault(require("../hooks/internal/useUniqueId"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SUGGESTED_ACTION_STACKED_CSS = (0, _glamor.css)({
  display: 'flex',
  flexDirection: 'column'
});

function suggestedActionText(_ref) {
  var displayText = _ref.displayText,
      title = _ref.title,
      type = _ref.type,
      value = _ref.value;

  if (type === 'messageBack') {
    return title || displayText;
  } else if (title) {
    return title;
  } else if (typeof value === 'string') {
    return value;
  }

  return JSON.stringify(value);
}

var connectSuggestedActions = function connectSuggestedActions() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref2) {
    var language = _ref2.language,
        suggestedActions = _ref2.suggestedActions;
    return {
      language: language,
      suggestedActions: suggestedActions
    };
  }].concat(selectors));
};

exports.connectSuggestedActions = connectSuggestedActions;

var SuggestedActions = function SuggestedActions(_ref3) {
  var className = _ref3.className,
      _ref3$suggestedAction = _ref3.suggestedActions,
      suggestedActions = _ref3$suggestedAction === void 0 ? [] : _ref3$suggestedAction;

  var _useStyleOptions = (0, _useStyleOptions3.default)(),
      _useStyleOptions2 = _slicedToArray(_useStyleOptions, 1),
      _useStyleOptions2$ = _useStyleOptions2[0],
      suggestedActionLayout = _useStyleOptions2$.suggestedActionLayout,
      suggestedActionsStyleSetForReactFilm = _useStyleOptions2$.suggestedActionsStyleSet;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      suggestedActionsStyleSet = _useStyleSet2[0].suggestedActions;

  var _useSuggestedActionsA = (0, _useSuggestedActionsAccessKey.default)(),
      _useSuggestedActionsA2 = _slicedToArray(_useSuggestedActionsA, 1),
      accessKey = _useSuggestedActionsA2[0];

  var _useDirection = (0, _useDirection3.default)(),
      _useDirection2 = _slicedToArray(_useDirection, 1),
      direction = _useDirection2[0];

  var ariaLabelId = (0, _useUniqueId.default)('webchat__suggested-actions');
  var localize = (0, _useLocalizer.default)();
  var localizeAccessKey = (0, _useLocalizeAccessKey.default)();
  var suggestedActionsContainerText = localize('SUGGESTED_ACTIONS_ALT', suggestedActions.length ? accessKey ? localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT_AND_ACCESS_KEY', localizeAccessKey(accessKey)) : localize('SUGGESTED_ACTIONS_ALT_HAS_CONTENT') : localize('SUGGESTED_ACTIONS_ALT_NO_CONTENT'));

  if (!suggestedActions.length) {
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: suggestedActionsContainerText
    }));
  }

  var children = suggestedActions.map(function (_ref4, index) {
    var displayText = _ref4.displayText,
        image = _ref4.image,
        imageAltText = _ref4.imageAltText,
        text = _ref4.text,
        title = _ref4.title,
        type = _ref4.type,
        value = _ref4.value;
    return /*#__PURE__*/_react.default.createElement(_SuggestedAction.default, {
      ariaHidden: true,
      buttonText: suggestedActionText({
        displayText: displayText,
        title: title,
        type: type,
        value: value
      }),
      displayText: displayText,
      image: image,
      imageAlt: imageAltText,
      key: index,
      text: text,
      type: type,
      value: value
    });
  });

  if (suggestedActionLayout === 'stacked') {
    return /*#__PURE__*/_react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: suggestedActionsContainerText
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(suggestedActionsStyleSet + '', SUGGESTED_ACTION_STACKED_CSS + '', className + '')
    }, children));
  }

  return (
    /*#__PURE__*/
    // TODO: The content of suggested actions should be the labelled by the activity.
    //       That means, when the user focus into the suggested actions, it should read similar to "Bot said, what's your preference of today? Suggested actions has items: apple button, orange button, banana button."
    _react.default.createElement("div", {
      "aria-labelledby": ariaLabelId,
      "aria-live": "polite",
      role: "status"
    }, /*#__PURE__*/_react.default.createElement(_ScreenReaderText.default, {
      id: ariaLabelId,
      text: suggestedActionsContainerText
    }), /*#__PURE__*/_react.default.createElement(_reactFilm.default, {
      autoCenter: false,
      className: (0, _classnames.default)(suggestedActionsStyleSet + '', className + ''),
      dir: direction,
      flipperBlurFocusOnClick: true,
      showDots: false,
      showScrollBar: false,
      styleSet: suggestedActionsStyleSetForReactFilm
    }, children))
  );
};

SuggestedActions.defaultProps = {
  className: ''
};
SuggestedActions.propTypes = {
  className: _propTypes.default.string,
  suggestedActions: _propTypes.default.arrayOf(_propTypes.default.shape({
    displayText: _propTypes.default.string,
    image: _propTypes.default.string,
    imageAltText: _propTypes.default.string,
    text: _propTypes.default.string,
    title: _propTypes.default.string,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.any
  })).isRequired
};

var _default = connectSuggestedActions()(SuggestedActions);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,