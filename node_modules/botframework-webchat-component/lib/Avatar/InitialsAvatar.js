"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _useAvatarForBot3 = _interopRequireDefault(require("../hooks/useAvatarForBot"));

var _useAvatarForUser3 = _interopRequireDefault(require("../hooks/useAvatarForUser"));

var _useStyleSet3 = _interopRequireDefault(require("../hooks/useStyleSet"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ROOT_CSS = (0, _glamor.css)({
  alignItems: 'center',
  display: 'flex',
  '& .webchat__initialsAvatar__initials': {
    justifyContent: 'center'
  }
});

var InitialsAvatar = function InitialsAvatar(_ref) {
  var fromUser = _ref.fromUser;

  var _useAvatarForBot = (0, _useAvatarForBot3.default)(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      avatarInitialsForBot = _useAvatarForBot2[0].initials;

  var _useAvatarForUser = (0, _useAvatarForUser3.default)(),
      _useAvatarForUser2 = _slicedToArray(_useAvatarForUser, 1),
      avatarInitialsForUser = _useAvatarForUser2[0].initials;

  var _useStyleSet = (0, _useStyleSet3.default)(),
      _useStyleSet2 = _slicedToArray(_useStyleSet, 1),
      initialsAvatarStyleSet = _useStyleSet2[0].initialsAvatar;

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', 'webchat__initialsAvatar', fromUser && 'webchat__initialsAvatar--fromUser', initialsAvatarStyleSet + '')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "webchat__initialsAvatar__initials"
  }, fromUser ? avatarInitialsForUser : avatarInitialsForBot));
};

InitialsAvatar.defaultProps = {
  fromUser: false
};
InitialsAvatar.propTypes = {
  fromUser: _propTypes.default.bool
};
var _default = InitialsAvatar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvSW5pdGlhbHNBdmF0YXIuanMiXSwibmFtZXMiOlsiUk9PVF9DU1MiLCJhbGlnbkl0ZW1zIiwiZGlzcGxheSIsImp1c3RpZnlDb250ZW50IiwiSW5pdGlhbHNBdmF0YXIiLCJmcm9tVXNlciIsImF2YXRhckluaXRpYWxzRm9yQm90IiwiaW5pdGlhbHMiLCJhdmF0YXJJbml0aWFsc0ZvclVzZXIiLCJpbml0aWFsc0F2YXRhclN0eWxlU2V0IiwiaW5pdGlhbHNBdmF0YXIiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQUcsaUJBQUk7QUFDbkJDLEVBQUFBLFVBQVUsRUFBRSxRQURPO0FBRW5CQyxFQUFBQSxPQUFPLEVBQUUsTUFGVTtBQUluQiwwQ0FBd0M7QUFDdENDLElBQUFBLGNBQWMsRUFBRTtBQURzQjtBQUpyQixDQUFKLENBQWpCOztBQVNBLElBQU1DLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsT0FBa0I7QUFBQSxNQUFmQyxRQUFlLFFBQWZBLFFBQWU7O0FBQUEseUJBQ00sZ0NBRE47QUFBQTtBQUFBLE1BQ3BCQyxvQkFEb0Isd0JBQzlCQyxRQUQ4Qjs7QUFBQSwwQkFFTyxpQ0FGUDtBQUFBO0FBQUEsTUFFcEJDLHFCQUZvQix5QkFFOUJELFFBRjhCOztBQUFBLHFCQUdjLDRCQUhkO0FBQUE7QUFBQSxNQUdkRSxzQkFIYyxvQkFHOUJDLGNBSDhCOztBQUt2QyxzQkFDRTtBQUNFLElBQUEsU0FBUyxFQUFFLHlCQUNUVixRQUFRLEdBQUcsRUFERixFQUVULHlCQUZTLEVBR1RLLFFBQVEsSUFBSSxtQ0FISCxFQUlUSSxzQkFBc0IsR0FBRyxFQUpoQjtBQURiLGtCQVFFO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUFvREosUUFBUSxHQUFHRyxxQkFBSCxHQUEyQkYsb0JBQXZGLENBUkYsQ0FERjtBQVlELENBakJEOztBQW1CQUYsY0FBYyxDQUFDTyxZQUFmLEdBQThCO0FBQzVCTixFQUFBQSxRQUFRLEVBQUU7QUFEa0IsQ0FBOUI7QUFJQUQsY0FBYyxDQUFDUSxTQUFmLEdBQTJCO0FBQ3pCUCxFQUFBQSxRQUFRLEVBQUVRLG1CQUFVQztBQURLLENBQTNCO2VBSWVWLGMiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlQXZhdGFyRm9yQm90IGZyb20gJy4uL2hvb2tzL3VzZUF2YXRhckZvckJvdCc7XG5pbXBvcnQgdXNlQXZhdGFyRm9yVXNlciBmcm9tICcuLi9ob29rcy91c2VBdmF0YXJGb3JVc2VyJztcbmltcG9ydCB1c2VTdHlsZVNldCBmcm9tICcuLi9ob29rcy91c2VTdHlsZVNldCc7XG5cbmNvbnN0IFJPT1RfQ1NTID0gY3NzKHtcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGRpc3BsYXk6ICdmbGV4JyxcblxuICAnJiAud2ViY2hhdF9faW5pdGlhbHNBdmF0YXJfX2luaXRpYWxzJzoge1xuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICB9XG59KTtcblxuY29uc3QgSW5pdGlhbHNBdmF0YXIgPSAoeyBmcm9tVXNlciB9KSA9PiB7XG4gIGNvbnN0IFt7IGluaXRpYWxzOiBhdmF0YXJJbml0aWFsc0ZvckJvdCB9XSA9IHVzZUF2YXRhckZvckJvdCgpO1xuICBjb25zdCBbeyBpbml0aWFsczogYXZhdGFySW5pdGlhbHNGb3JVc2VyIH1dID0gdXNlQXZhdGFyRm9yVXNlcigpO1xuICBjb25zdCBbeyBpbml0aWFsc0F2YXRhcjogaW5pdGlhbHNBdmF0YXJTdHlsZVNldCB9XSA9IHVzZVN0eWxlU2V0KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICAgIFJPT1RfQ1NTICsgJycsXG4gICAgICAgICd3ZWJjaGF0X19pbml0aWFsc0F2YXRhcicsXG4gICAgICAgIGZyb21Vc2VyICYmICd3ZWJjaGF0X19pbml0aWFsc0F2YXRhci0tZnJvbVVzZXInLFxuICAgICAgICBpbml0aWFsc0F2YXRhclN0eWxlU2V0ICsgJydcbiAgICAgICl9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWJjaGF0X19pbml0aWFsc0F2YXRhcl9faW5pdGlhbHNcIj57ZnJvbVVzZXIgPyBhdmF0YXJJbml0aWFsc0ZvclVzZXIgOiBhdmF0YXJJbml0aWFsc0ZvckJvdH08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkluaXRpYWxzQXZhdGFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZnJvbVVzZXI6IGZhbHNlXG59O1xuXG5Jbml0aWFsc0F2YXRhci5wcm9wVHlwZXMgPSB7XG4gIGZyb21Vc2VyOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5pdGlhbHNBdmF0YXI7XG4iXX0=