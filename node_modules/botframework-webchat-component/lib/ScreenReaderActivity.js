"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _glamor = require("glamor");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _textFormatToContentType = _interopRequireDefault(require("./Utils/textFormatToContentType"));

var _useAvatarForBot3 = _interopRequireDefault(require("./hooks/useAvatarForBot"));

var _useDateFormatter = _interopRequireDefault(require("./hooks/useDateFormatter"));

var _useLocalizer = _interopRequireDefault(require("./hooks/useLocalizer"));

var _useStripMarkdown = _interopRequireDefault(require("./hooks/internal/useStripMarkdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ROOT_CSS = (0, _glamor.css)({
  color: 'transparent',
  height: 1,
  overflow: 'hidden',
  position: 'absolute',
  top: 0,
  whiteSpace: 'nowrap',
  width: 1
});
var ACTIVITY_NUM_ATTACHMENTS_ALT_IDS = {
  few: 'ACTIVITY_NUM_ATTACHMENTS_FEW_ALT',
  many: 'ACTIVITY_NUM_ATTACHMENTS_MANY_ALT',
  one: 'ACTIVITY_NUM_ATTACHMENTS_ONE_ALT',
  other: 'ACTIVITY_NUM_ATTACHMENTS_OTHER_ALT',
  two: 'ACTIVITY_NUM_ATTACHMENTS_TWO_ALT'
};

var ScreenReaderActivity = function ScreenReaderActivity(_ref) {
  var activity = _ref.activity;

  var _useAvatarForBot = (0, _useAvatarForBot3.default)(),
      _useAvatarForBot2 = _slicedToArray(_useAvatarForBot, 1),
      botInitials = _useAvatarForBot2[0].initials;

  var formatDate = (0, _useDateFormatter.default)();
  var localize = (0, _useLocalizer.default)();
  var localizeWithPlural = (0, _useLocalizer.default)({
    plural: true
  });
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.messageBack;
  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
  var messageBackDisplayText = _activity$channelData2.displayText,
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      text = activity.text,
      textFormat = activity.textFormat,
      timestamp = activity.timestamp;
  var fromUser = role === 'user';
  var contentTypeMarkdown = (0, _textFormatToContentType.default)(textFormat) === 'text/markdown';
  var displayText = messageBackDisplayText || text;
  var greetingAlt = (fromUser ? localize('ACTIVITY_YOU_SAID_ALT') : localize('ACTIVITY_BOT_SAID_ALT', botInitials)).replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]{2,}/g, ' ');
  var numAttachmentsAlt = !!attachments.length && localizeWithPlural(ACTIVITY_NUM_ATTACHMENTS_ALT_IDS, attachments.length);
  var textAlt = (0, _useStripMarkdown.default)(contentTypeMarkdown && displayText) || displayText;
  var timestampAlt = localize('ACTIVITY_STATUS_SEND_STATUS_ALT_SENT_AT', formatDate(timestamp));
  return /*#__PURE__*/_react.default.createElement("article", {
    "aria-atomic": true,
    "aria-roledescription": "message",
    className: ROOT_CSS,
    role: "region"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement("span", null, greetingAlt), /*#__PURE__*/_react.default.createElement("span", null, textAlt)), numAttachmentsAlt && /*#__PURE__*/_react.default.createElement("p", null, numAttachmentsAlt), /*#__PURE__*/_react.default.createElement("p", null, timestampAlt));
};

ScreenReaderActivity.propTypes = {
  activity: _propTypes.default.any.isRequired
};
var _default = ScreenReaderActivity;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TY3JlZW5SZWFkZXJBY3Rpdml0eS5qcyJdLCJuYW1lcyI6WyJST09UX0NTUyIsImNvbG9yIiwiaGVpZ2h0Iiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsInRvcCIsIndoaXRlU3BhY2UiLCJ3aWR0aCIsIkFDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19BTFRfSURTIiwiZmV3IiwibWFueSIsIm9uZSIsIm90aGVyIiwidHdvIiwiU2NyZWVuUmVhZGVyQWN0aXZpdHkiLCJhY3Rpdml0eSIsImJvdEluaXRpYWxzIiwiaW5pdGlhbHMiLCJmb3JtYXREYXRlIiwibG9jYWxpemUiLCJsb2NhbGl6ZVdpdGhQbHVyYWwiLCJwbHVyYWwiLCJhdHRhY2htZW50cyIsImNoYW5uZWxEYXRhIiwibWVzc2FnZUJhY2siLCJtZXNzYWdlQmFja0Rpc3BsYXlUZXh0IiwiZGlzcGxheVRleHQiLCJmcm9tIiwicm9sZSIsInRleHQiLCJ0ZXh0Rm9ybWF0IiwidGltZXN0YW1wIiwiZnJvbVVzZXIiLCJjb250ZW50VHlwZU1hcmtkb3duIiwiZ3JlZXRpbmdBbHQiLCJyZXBsYWNlIiwibnVtQXR0YWNobWVudHNBbHQiLCJsZW5ndGgiLCJ0ZXh0QWx0IiwidGltZXN0YW1wQWx0IiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYW55IiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsUUFBUSxHQUFHLGlCQUFJO0FBQ25CQyxFQUFBQSxLQUFLLEVBQUUsYUFEWTtBQUVuQkMsRUFBQUEsTUFBTSxFQUFFLENBRlc7QUFHbkJDLEVBQUFBLFFBQVEsRUFBRSxRQUhTO0FBSW5CQyxFQUFBQSxRQUFRLEVBQUUsVUFKUztBQUtuQkMsRUFBQUEsR0FBRyxFQUFFLENBTGM7QUFNbkJDLEVBQUFBLFVBQVUsRUFBRSxRQU5PO0FBT25CQyxFQUFBQSxLQUFLLEVBQUU7QUFQWSxDQUFKLENBQWpCO0FBVUEsSUFBTUMsZ0NBQWdDLEdBQUc7QUFDdkNDLEVBQUFBLEdBQUcsRUFBRSxrQ0FEa0M7QUFFdkNDLEVBQUFBLElBQUksRUFBRSxtQ0FGaUM7QUFHdkNDLEVBQUFBLEdBQUcsRUFBRSxrQ0FIa0M7QUFJdkNDLEVBQUFBLEtBQUssRUFBRSxvQ0FKZ0M7QUFLdkNDLEVBQUFBLEdBQUcsRUFBRTtBQUxrQyxDQUF6Qzs7QUFRQSxJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLE9BQWtCO0FBQUEsTUFBZkMsUUFBZSxRQUFmQSxRQUFlOztBQUFBLHlCQUNULGdDQURTO0FBQUE7QUFBQSxNQUMxQkMsV0FEMEIsd0JBQ3BDQyxRQURvQzs7QUFFN0MsTUFBTUMsVUFBVSxHQUFHLGdDQUFuQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyw0QkFBakI7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRywyQkFBYTtBQUFFQyxJQUFBQSxNQUFNLEVBQUU7QUFBVixHQUFiLENBQTNCO0FBSjZDLDhCQWF6Q04sUUFieUMsQ0FPM0NPLFdBUDJDO0FBQUEsTUFPM0NBLFdBUDJDLHNDQU83QixFQVA2QjtBQUFBLDhCQWF6Q1AsUUFieUMsQ0FRM0NRLFdBUjJDO0FBQUEsNkRBUWtDLEVBUmxDO0FBQUEscURBUTVCQyxXQVI0QjtBQUFBLCtEQVEyQixFQVIzQjtBQUFBLE1BUUFDLHNCQVJBLDBCQVFiQyxXQVJhO0FBQUEsdUJBYXpDWCxRQWJ5QyxDQVMzQ1ksSUFUMkM7QUFBQSwrQ0FTMUIsRUFUMEI7QUFBQSxNQVNuQ0MsSUFUbUMsa0JBU25DQSxJQVRtQztBQUFBLE1BVTNDQyxJQVYyQyxHQWF6Q2QsUUFieUMsQ0FVM0NjLElBVjJDO0FBQUEsTUFXM0NDLFVBWDJDLEdBYXpDZixRQWJ5QyxDQVczQ2UsVUFYMkM7QUFBQSxNQVkzQ0MsU0FaMkMsR0FhekNoQixRQWJ5QyxDQVkzQ2dCLFNBWjJDO0FBZTdDLE1BQU1DLFFBQVEsR0FBR0osSUFBSSxLQUFLLE1BQTFCO0FBQ0EsTUFBTUssbUJBQW1CLEdBQUcsc0NBQXdCSCxVQUF4QixNQUF3QyxlQUFwRTtBQUNBLE1BQU1KLFdBQVcsR0FBR0Qsc0JBQXNCLElBQUlJLElBQTlDO0FBRUEsTUFBTUssV0FBVyxHQUFHLENBQUNGLFFBQVEsR0FDekJiLFFBQVEsQ0FBQyx1QkFBRCxDQURpQixHQUV6QkEsUUFBUSxDQUFDLHVCQUFELEVBQTBCSCxXQUExQixDQUZRLEVBR2xCbUIsT0FIa0IsQ0FHViwwRUFIVSxFQUdFLEdBSEYsQ0FBcEI7QUFJQSxNQUFNQyxpQkFBaUIsR0FDckIsQ0FBQyxDQUFDZCxXQUFXLENBQUNlLE1BQWQsSUFBd0JqQixrQkFBa0IsQ0FBQ1osZ0NBQUQsRUFBbUNjLFdBQVcsQ0FBQ2UsTUFBL0MsQ0FENUM7QUFFQSxNQUFNQyxPQUFPLEdBQUcsK0JBQWlCTCxtQkFBbUIsSUFBSVAsV0FBeEMsS0FBd0RBLFdBQXhFO0FBQ0EsTUFBTWEsWUFBWSxHQUFHcEIsUUFBUSxDQUFDLHlDQUFELEVBQTRDRCxVQUFVLENBQUNhLFNBQUQsQ0FBdEQsQ0FBN0I7QUFFQSxzQkFDRTtBQUFTLG1CQUFhLElBQXRCO0FBQTRCLDRCQUFxQixTQUFqRDtBQUEyRCxJQUFBLFNBQVMsRUFBRS9CLFFBQXRFO0FBQWdGLElBQUEsSUFBSSxFQUFDO0FBQXJGLGtCQUNFLHFEQUNFLDJDQUFPa0MsV0FBUCxDQURGLGVBRUUsMkNBQU9JLE9BQVAsQ0FGRixDQURGLEVBS0dGLGlCQUFpQixpQkFBSSx3Q0FBSUEsaUJBQUosQ0FMeEIsZUFNRSx3Q0FBSUcsWUFBSixDQU5GLENBREY7QUFVRCxDQXRDRDs7QUF3Q0F6QixvQkFBb0IsQ0FBQzBCLFNBQXJCLEdBQWlDO0FBQy9CekIsRUFBQUEsUUFBUSxFQUFFMEIsbUJBQVVDLEdBQVYsQ0FBY0M7QUFETyxDQUFqQztlQUllN0Isb0IiLCJzb3VyY2VSb290IjoiY29tcG9uZW50Oi8vLyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFsyXSB9XSAqL1xuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0ZXh0Rm9ybWF0VG9Db250ZW50VHlwZSBmcm9tICcuL1V0aWxzL3RleHRGb3JtYXRUb0NvbnRlbnRUeXBlJztcbmltcG9ydCB1c2VBdmF0YXJGb3JCb3QgZnJvbSAnLi9ob29rcy91c2VBdmF0YXJGb3JCb3QnO1xuaW1wb3J0IHVzZURhdGVGb3JtYXR0ZXIgZnJvbSAnLi9ob29rcy91c2VEYXRlRm9ybWF0dGVyJztcbmltcG9ydCB1c2VMb2NhbGl6ZXIgZnJvbSAnLi9ob29rcy91c2VMb2NhbGl6ZXInO1xuaW1wb3J0IHVzZVN0cmlwTWFya2Rvd24gZnJvbSAnLi9ob29rcy9pbnRlcm5hbC91c2VTdHJpcE1hcmtkb3duJztcblxuY29uc3QgUk9PVF9DU1MgPSBjc3Moe1xuICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgaGVpZ2h0OiAxLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB0b3A6IDAsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB3aWR0aDogMVxufSk7XG5cbmNvbnN0IEFDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19BTFRfSURTID0ge1xuICBmZXc6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfRkVXX0FMVCcsXG4gIG1hbnk6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfTUFOWV9BTFQnLFxuICBvbmU6ICdBQ1RJVklUWV9OVU1fQVRUQUNITUVOVFNfT05FX0FMVCcsXG4gIG90aGVyOiAnQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX09USEVSX0FMVCcsXG4gIHR3bzogJ0FDVElWSVRZX05VTV9BVFRBQ0hNRU5UU19UV09fQUxUJ1xufTtcblxuY29uc3QgU2NyZWVuUmVhZGVyQWN0aXZpdHkgPSAoeyBhY3Rpdml0eSB9KSA9PiB7XG4gIGNvbnN0IFt7IGluaXRpYWxzOiBib3RJbml0aWFscyB9XSA9IHVzZUF2YXRhckZvckJvdCgpO1xuICBjb25zdCBmb3JtYXREYXRlID0gdXNlRGF0ZUZvcm1hdHRlcigpO1xuICBjb25zdCBsb2NhbGl6ZSA9IHVzZUxvY2FsaXplcigpO1xuICBjb25zdCBsb2NhbGl6ZVdpdGhQbHVyYWwgPSB1c2VMb2NhbGl6ZXIoeyBwbHVyYWw6IHRydWUgfSk7XG5cbiAgY29uc3Qge1xuICAgIGF0dGFjaG1lbnRzID0gW10sXG4gICAgY2hhbm5lbERhdGE6IHsgbWVzc2FnZUJhY2s6IHsgZGlzcGxheVRleHQ6IG1lc3NhZ2VCYWNrRGlzcGxheVRleHQgfSA9IHt9IH0gPSB7fSxcbiAgICBmcm9tOiB7IHJvbGUgfSA9IHt9LFxuICAgIHRleHQsXG4gICAgdGV4dEZvcm1hdCxcbiAgICB0aW1lc3RhbXBcbiAgfSA9IGFjdGl2aXR5O1xuXG4gIGNvbnN0IGZyb21Vc2VyID0gcm9sZSA9PT0gJ3VzZXInO1xuICBjb25zdCBjb250ZW50VHlwZU1hcmtkb3duID0gdGV4dEZvcm1hdFRvQ29udGVudFR5cGUodGV4dEZvcm1hdCkgPT09ICd0ZXh0L21hcmtkb3duJztcbiAgY29uc3QgZGlzcGxheVRleHQgPSBtZXNzYWdlQmFja0Rpc3BsYXlUZXh0IHx8IHRleHQ7XG5cbiAgY29uc3QgZ3JlZXRpbmdBbHQgPSAoZnJvbVVzZXJcbiAgICA/IGxvY2FsaXplKCdBQ1RJVklUWV9ZT1VfU0FJRF9BTFQnKVxuICAgIDogbG9jYWxpemUoJ0FDVElWSVRZX0JPVF9TQUlEX0FMVCcsIGJvdEluaXRpYWxzKVxuICApLnJlcGxhY2UoL1xcc3syLH0vZ3UsICcgJyk7XG4gIGNvbnN0IG51bUF0dGFjaG1lbnRzQWx0ID1cbiAgICAhIWF0dGFjaG1lbnRzLmxlbmd0aCAmJiBsb2NhbGl6ZVdpdGhQbHVyYWwoQUNUSVZJVFlfTlVNX0FUVEFDSE1FTlRTX0FMVF9JRFMsIGF0dGFjaG1lbnRzLmxlbmd0aCk7XG4gIGNvbnN0IHRleHRBbHQgPSB1c2VTdHJpcE1hcmtkb3duKGNvbnRlbnRUeXBlTWFya2Rvd24gJiYgZGlzcGxheVRleHQpIHx8IGRpc3BsYXlUZXh0O1xuICBjb25zdCB0aW1lc3RhbXBBbHQgPSBsb2NhbGl6ZSgnQUNUSVZJVFlfU1RBVFVTX1NFTkRfU1RBVFVTX0FMVF9TRU5UX0FUJywgZm9ybWF0RGF0ZSh0aW1lc3RhbXApKTtcblxuICByZXR1cm4gKFxuICAgIDxhcnRpY2xlIGFyaWEtYXRvbWljPXt0cnVlfSBhcmlhLXJvbGVkZXNjcmlwdGlvbj1cIm1lc3NhZ2VcIiBjbGFzc05hbWU9e1JPT1RfQ1NTfSByb2xlPVwicmVnaW9uXCI+XG4gICAgICA8cD5cbiAgICAgICAgPHNwYW4+e2dyZWV0aW5nQWx0fTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e3RleHRBbHR9PC9zcGFuPlxuICAgICAgPC9wPlxuICAgICAge251bUF0dGFjaG1lbnRzQWx0ICYmIDxwPntudW1BdHRhY2htZW50c0FsdH08L3A+fVxuICAgICAgPHA+e3RpbWVzdGFtcEFsdH08L3A+XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuU2NyZWVuUmVhZGVyQWN0aXZpdHkucHJvcFR5cGVzID0ge1xuICBhY3Rpdml0eTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTY3JlZW5SZWFkZXJBY3Rpdml0eTtcbiJdfQ==