{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/fetchVoices.js"],"names":["fetchVoices","authorizationToken","region","speechSynthesisHostname","subscriptionKey","hostname","encodeURI","fetch","headers","authorization","res","ok","Error","json","voices","map","gender","Gender","lang","Locale","voiceURI","Name","SpeechSynthesisVoice","sort","x","name","y"],"mappings":";;;;;;;;;;;;;;;AAEA;;;;;;SAE8BA,W;;;;;yFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6BC,YAAAA,kBAA7B,QAA6BA,kBAA7B,EAAiDC,MAAjD,QAAiDA,MAAjD,EAAyDC,uBAAzD,QAAyDA,uBAAzD,EAAkFC,eAAlF,QAAkFA,eAAlF;AACb;AACMC,YAAAA,QAFO,GAEIF,uBAAuB,cAAQG,SAAS,CAACJ,MAAD,CAAjB,8BAF3B;AAAA;AAAA,mBAGKK,KAAK,mBAAaF,QAAb,qCAAwD;AAC7EG,cAAAA,OAAO;AACL,gCAAgB;AADX,iBAEDP,kBAAkB,GAClB;AACEQ,gBAAAA,aAAa,mBAAaR,kBAAb;AADf,eADkB,GAIlB;AACE,6CAA6BG;AAD/B,eANC;AADsE,aAAxD,CAHV;;AAAA;AAGPM,YAAAA,GAHO;;AAAA,gBAgBRA,GAAG,CAACC,EAhBI;AAAA;AAAA;AAAA;;AAAA,kBAiBL,IAAIC,KAAJ,CAAU,wBAAV,CAjBK;;AAAA;AAAA;AAAA,mBAoBQF,GAAG,CAACG,IAAJ,EApBR;;AAAA;AAoBPC,YAAAA,MApBO;AAAA,6CAsBNA,MAAM,CACVC,GADI,CACA;AAAA,kBAAWC,MAAX,SAAGC,MAAH;AAAA,kBAA2BC,IAA3B,SAAmBC,MAAnB;AAAA,kBAAuCC,QAAvC,SAAiCC,IAAjC;AAAA,qBAAsD,IAAIC,6BAAJ,CAAyB;AAAEN,gBAAAA,MAAM,EAANA,MAAF;AAAUE,gBAAAA,IAAI,EAAJA,IAAV;AAAgBE,gBAAAA,QAAQ,EAARA;AAAhB,eAAzB,CAAtD;AAAA,aADA,EAEJG,IAFI,CAEC;AAAA,kBAASC,CAAT,SAAGC,IAAH;AAAA,kBAAsBC,CAAtB,SAAgBD,IAAhB;AAAA,qBAA+BD,CAAC,GAAGE,CAAJ,GAAQ,CAAR,GAAYF,CAAC,GAAGE,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAxD;AAAA,aAFD,CAtBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${ encodeURI(region) }.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${ hostname }/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n"],"file":"fetchVoices.js"}