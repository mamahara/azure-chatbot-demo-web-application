{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/fetchSpeechData.js"],"names":["DEFAULT_LANGUAGE","DEFAULT_OUTPUT_FORMAT","DEFAULT_VOICE","EMPTY_MP3_BASE64","deploymentId","fetchCredentials","lang","outputFormat","pitch","rate","text","voice","volume","authorizationToken","region","speechSynthesisHostname","subscriptionKey","Error","ssml","hostname","encodeURI","search","url","fetch","headers","Authorization","method","body","res","ok","status","arrayBuffer"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,gBAAgB,GAAG,OAAzB;AACA,IAAMC,qBAAqB,GAAG,2BAA9B;AACA,IAAMC,aAAa,GAAG,kEAAtB;AACA,IAAMC,gBAAgB,GACpB,skBADF;;;;;;;kFAGe;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,YADa,QACbA,YADa,EAEbC,gBAFa,QAEbA,gBAFa,mBAGbC,IAHa,EAGbA,IAHa,0BAGNN,gBAHM,uCAIbO,YAJa,EAIbA,YAJa,kCAIEN,qBAJF,sBAKbO,KALa,QAKbA,KALa,EAMbC,IANa,QAMbA,IANa,EAObC,IAPa,QAObA,IAPa,oBAQbC,KARa,EAQbA,KARa,2BAQLT,aARK,eASbU,MATa,QASbA,MATa;;AAAA,gBAWRF,IAXQ;AAAA;AAAA;AAAA;;AAAA,6CAaJ,+BAAOP,gBAAP,CAbI;;AAAA;AAAA;AAAA,mBAgB0EE,gBAAgB,EAhB1F;;AAAA;AAAA;AAgBLQ,YAAAA,kBAhBK,yBAgBLA,kBAhBK;AAgBeC,YAAAA,MAhBf,yBAgBeA,MAhBf;AAgBuBC,YAAAA,uBAhBvB,yBAgBuBA,uBAhBvB;AAgBgDC,YAAAA,eAhBhD,yBAgBgDA,eAhBhD;;AAAA,kBAkBRH,kBAAkB,IAAIG,eAAvB,IAA4C,CAACH,kBAAD,IAAuB,CAACG,eAlB3D;AAAA;AAAA;AAAA;;AAAA,kBAmBL,IAAIC,KAAJ,CAAU,+DAAV,CAnBK;;AAAA;AAAA,kBAoBDH,MAAM,IAAIC,uBAAX,IAAwC,CAACD,MAAD,IAAW,CAACC,uBApBlD;AAAA;AAAA;AAAA;;AAAA,kBAqBL,IAAIE,KAAJ,CAAU,+DAAV,CArBK;;AAAA;AAwBPC,YAAAA,IAxBO,GAwBA,qBAAOR,IAAP,IAAeA,IAAf,GAAsB,wBAAU;AAAEJ,cAAAA,IAAI,EAAJA,IAAF;AAAQE,cAAAA,KAAK,EAALA,KAAR;AAAeC,cAAAA,IAAI,EAAJA,IAAf;AAAqBC,cAAAA,IAAI,EAAJA,IAArB;AAA2BC,cAAAA,KAAK,EAALA,KAA3B;AAAkCC,cAAAA,MAAM,EAANA;AAAlC,aAAV,CAxBtB,EA0Bb;;AACMO,YAAAA,QA3BO,GA4BXJ,uBAAuB,KACtBX,YAAY,aACLgB,SAAS,CAACN,MAAD,CADJ,6CAELM,SAAS,CAACN,MAAD,CAFJ,8BADU,CA5BZ;AAgCPO,YAAAA,MAhCO,GAgCEjB,YAAY,2BAAqBgB,SAAS,CAAChB,YAAD,CAA9B,IAAkD,EAhChE;AAiCPkB,YAAAA,GAjCO,qBAiCWH,QAjCX,kCAiC6CE,MAjC7C;AAAA;AAAA,mBAmCKE,KAAK,CAACD,GAAD,EAAM;AAC3BE,cAAAA,OAAO;AACL,gCAAgB,sBADX;AAEL,4CAA4BjB;AAFvB,iBAGDM,kBAAkB,GAClB;AACEY,gBAAAA,aAAa,mBAAaZ,kBAAb;AADf,eADkB,GAIlB;AACE,6CAA6BG;AAD/B,eAPC,CADoB;AAY3BU,cAAAA,MAAM,EAAE,MAZmB;AAa3BC,cAAAA,IAAI,EAAET;AAbqB,aAAN,CAnCV;;AAAA;AAmCPU,YAAAA,GAnCO;;AAAA,gBAmDRA,GAAG,CAACC,EAnDI;AAAA;AAAA;AAAA;;AAAA,kBAoDL,IAAIZ,KAAJ,qFAAwFW,GAAG,CAACE,MAA5F,EApDK;;AAAA;AAAA,6CAuDNF,GAAG,CAACG,WAAJ,EAvDM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, Aria24kRUS)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${ encodeURI(region) }.voice.speech.microsoft.com`\n      : `${ encodeURI(region) }.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${ encodeURI(deploymentId) }` : '';\n  const url = `https://${ hostname }/cognitiveservices/v1${ search }`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n"],"file":"fetchSpeechData.js"}