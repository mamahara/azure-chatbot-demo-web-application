{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/fetchCustomVoices.js"],"names":["fetchCustomVoices","customVoiceHostname","deploymentId","region","subscriptionKey","hostname","fetch","encodeURI","encodeURIComponent","headers","accept","res","ok","Error","json","models","map","gender","properties","Gender","lang","locale","voiceURI","name","SpeechSynthesisVoice","sort","x","y"],"mappings":";;;;;;;;;;;;;AAEA;;AAFA;SAIeA,iB;;;;;+FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmCC,YAAAA,mBAAnC,QAAmCA,mBAAnC,EAAwDC,YAAxD,QAAwDA,YAAxD,EAAsEC,MAAtE,QAAsEA,MAAtE,EAA8EC,eAA9E,QAA8EA,eAA9E;AACQC,YAAAA,QADR,GACmBJ,mBAAmB,cAAQE,MAAR,aADtC,EAGE;;AAHF;AAAA,mBAIoBG,KAAK,mBACTC,SAAS,CAACF,QAAD,CADA,8CACgDG,kBAAkB,CAACN,YAAD,CADlE,GAErB;AACEO,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,6CAA6BN;AAFtB;AADX,aAFqB,CAJzB;;AAAA;AAIQO,YAAAA,GAJR;;AAAA,gBAcOA,GAAG,CAACC,EAdX;AAAA;AAAA;AAAA;;AAAA,kBAeU,IAAIC,KAAJ,CAAU,+BAAV,CAfV;;AAAA;AAAA,6CAkBSF,GAAG,CAACG,IAAJ,EAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;;;kFAqBe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBb,YAAAA,mBAAjB,SAAiBA,mBAAjB,EAAsCC,YAAtC,SAAsCA,YAAtC,EAAoDC,MAApD,SAAoDA,MAApD,EAA4DC,eAA5D,SAA4DA,eAA5D;AAAA;AAAA,mBACYJ,iBAAiB,CAAC;AAAEC,cAAAA,mBAAmB,EAAnBA,mBAAF;AAAuBC,cAAAA,YAAY,EAAZA,YAAvB;AAAqCC,cAAAA,MAAM,EAANA,MAArC;AAA6CC,cAAAA,eAAe,EAAfA;AAA7C,aAAD,CAD7B;;AAAA;AAAA;AACLW,YAAAA,MADK,yBACLA,MADK;AAAA,8CAGNA,MAAM,CACVC,GADI,CAEH;AAAA,kBAAyBC,MAAzB,SAAGC,UAAH,CAAiBC,MAAjB;AAAA,kBAA2CC,IAA3C,SAAmCC,MAAnC;AAAA,kBAAuDC,QAAvD,SAAiDC,IAAjD;AAAA,qBACE,IAAIC,6BAAJ,CAAyB;AAAEP,gBAAAA,MAAM,EAANA,MAAF;AAAUG,gBAAAA,IAAI,EAAJA,IAAV;AAAgBE,gBAAAA,QAAQ,EAARA;AAAhB,eAAzB,CADF;AAAA,aAFG,EAKJG,IALI,CAKC;AAAA,kBAASC,CAAT,SAAGH,IAAH;AAAA,kBAAsBI,CAAtB,SAAgBJ,IAAhB;AAAA,qBAA+BG,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAYD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAxD;AAAA,aALD,CAHM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.cris.ai`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n"],"file":"fetchCustomVoices.js"}