{"version":3,"sources":["../../../src/SpeechServices/TextToSpeech/AudioContextQueue.js"],"names":["audioContext","ponyfill","consumer","paused","queue","getAudioContext","AudioContext","pause","utterance","push","startConsumer","resume","length","AudioContextConsumer","start","splice","stop"],"mappings":";;;;;;;;;;;;;;;;;AAEA;;AAEA;;AAJA;;AAOE,0BAAwC;AAAA,QAA1BA,YAA0B,QAA1BA,YAA0B;AAAA,QAAZC,QAAY,QAAZA,QAAY;AAAA;AACtC,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AAEA,SAAKC,eAAL,GAAuB,yBAAQ;AAAA,aAAML,YAAY,IAAI,IAAIC,QAAQ,CAACK,YAAb,EAAtB;AAAA,KAAR,CAAvB;AACD;;;;4BAEO;AACN,WAAKH,MAAL,GAAc,IAAd;AACA,WAAKD,QAAL,IAAiB,KAAKA,QAAL,CAAcK,KAAd,EAAjB;AACD;;;yBAEIC,S,EAAW;AACd,WAAKJ,KAAL,CAAWK,IAAX,CAAgBD,SAAhB;AACA,WAAKE,aAAL;AACD;;;6BAEQ;AACP,WAAKP,MAAL,GAAc,KAAd;;AAEA,UAAI,KAAKD,QAAT,EAAmB;AACjB,aAAKA,QAAL,CAAcS,MAAd;AACD,OAFD,MAEO;AACL,aAAKD,aAAL;AACD;AACF;;;;;;;;;sBAOQ,CAAC,KAAKP,MAAN,IAAgB,KAAKC,KAAL,CAAWQ,MAA3B,IAAqC,CAAC,KAAKV,Q;;;;;AAChD,qBAAKA,QAAL,GAAgB,IAAIW,6BAAJ,CAAyB,KAAKR,eAAL,EAAzB,CAAhB;;uBAEM,KAAKH,QAAL,CAAcY,KAAd,CAAoB,KAAKV,KAAzB,C;;;AAEN,qBAAKF,QAAL,GAAgB,IAAhB;;;;;;;;;;;;;;;;;;;;2BAIG;AACL,WAAKE,KAAL,CAAWW,MAAX,CAAkB,CAAlB;AACA,WAAKb,QAAL,IAAiB,KAAKA,QAAL,CAAcc,IAAd,EAAjB;AACD;;;wBAjBc;AACb,aAAO,CAAC,CAAC,KAAKd,QAAd;AACD","sourcesContent":["/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n"],"file":"AudioContextQueue.js"}