{"version":3,"sources":["../../src/SpeechServices/patchOptions.js"],"names":["shouldWarnOnSubscriptionKey","patchOptions","authorizationToken","credentials","looseEvent","looseEvents","region","subscriptionKey","otherOptions","console","warn","Error","fetchCredentials","customVoiceHostname","speechRecognitionHostname","speechSynthesisHostname","resolvedCredentials"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAIA,2BAA2B,GAAG,IAAlC;;AAEe,SAASC,YAAT,GAQP;AAAA,iFAAJ,EAAI;;AAAA,MAPNC,kBAOM,QAPNA,kBAOM;AAAA,MANNC,WAMM,QANNA,WAMM;AAAA,MALNC,UAKM,QALNA,UAKM;AAAA,MAJNC,WAIM,QAJNA,WAIM;AAAA,yBAHNC,MAGM;AAAA,MAHNA,MAGM,4BAHG,QAGH;AAAA,MAFNC,eAEM,QAFNA,eAEM;AAAA,MADHC,YACG;;AACN,MAAI,OAAOJ,UAAP,KAAsB,WAA1B,EAAuC;AACrCK,IAAAA,OAAO,CAACC,IAAR,CAAa,0FAAb;AAEAL,IAAAA,WAAW,GAAGD,UAAd;AACD;;AAED,MAAI,CAACD,WAAL,EAAkB;AAChB,QAAI,CAACD,kBAAD,IAAuB,CAACK,eAA5B,EAA6C;AAC3C,YAAM,IAAII,KAAJ,CAAU,+DAAV,CAAN;AACD,KAFD,MAEO;AACLF,MAAAA,OAAO,CAACC,IAAR,CACE,kMADF;;AAIAP,MAAAA,WAAW;AAAA,4FAAG;AAAA;AAAA;AAAA;AAAA;AAAA,uBACZD,kBADY;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAEoB,2CAA6BA,kBAA7B,CAFpB;;AAAA;AAAA;AAAA,gCAEsEI,MAFtE;AAAA;AAENJ,oBAAAA,kBAFM;AAEsEI,oBAAAA,MAFtE;AAAA;AAAA;AAAA;;AAAA;AAAA,gCAGNA,MAHM;AAAA;AAAA,yBAGyB,2CAA6BC,eAA7B,CAHzB;;AAAA;AAAA;AAAA;AAGND,oBAAAA,MAHM;AAGEC,oBAAAA,eAHF;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA;AAAA;AAAA;AAAA,SAAX;AAID;AACF;;AAED,yCACKC,YADL;AAEEI,IAAAA,gBAAgB;AAAA,sGAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAQN,2CAA6BT,WAA7B,CARM;;AAAA;AAAA;AAEdD,gBAAAA,kBAFc,yBAEdA,kBAFc;AAGdW,gBAAAA,mBAHc,yBAGdA,mBAHc;AAIdP,gBAAAA,MAJc,yBAIdA,MAJc;AAKdQ,gBAAAA,yBALc,yBAKdA,yBALc;AAMdC,gBAAAA,uBANc,yBAMdA,uBANc;AAOdR,gBAAAA,eAPc,yBAOdA,eAPc;;AAAA,sBAUX,CAACL,kBAAD,IAAuB,CAACK,eAAzB,IAA8CL,kBAAkB,IAAIK,eAVxD;AAAA;AAAA;AAAA;;AAAA,sBAWR,IAAII,KAAJ,CACJ,mGADI,CAXQ;;AAAA;AAAA,sBAcL,CAACL,MAAD,IAAW,EAAEQ,yBAAyB,IAAIC,uBAA/B,CAdN;AAAA;AAAA;AAAA;;AAAA,sBAeR,IAAIJ,KAAJ,CACJ,0HADI,CAfQ;;AAAA;AAAA,sBAkBLL,MAAM,KAAKO,mBAAmB,IAAIC,yBAAvB,IAAoDC,uBAAzD,CAlBD;AAAA;AAAA;AAAA;;AAAA,sBAmBR,IAAIJ,KAAJ,CACJ,qJADI,CAnBQ;;AAAA;AAAA,qBAsBLT,kBAtBK;AAAA;AAAA;AAAA;;AAAA,sBAuBV,OAAOA,kBAAP,KAA8B,QAvBpB;AAAA;AAAA;AAAA;;AAAA,sBAwBN,IAAIS,KAAJ,CAAU,uEAAV,CAxBM;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBA0BL,OAAOJ,eAAP,KAA2B,QA1BtB;AAAA;AAAA;AAAA;;AAAA,sBA2BR,IAAII,KAAJ,CAAU,oEAAV,CA3BQ;;AAAA;AA8BhB,oBAAIX,2BAA2B,IAAIO,eAAnC,EAAoD;AAClDE,kBAAAA,OAAO,CAACC,IAAR,CACE,4IADF;AAIAV,kBAAAA,2BAA2B,GAAG,KAA9B;AACD;;AAEKgB,gBAAAA,mBAtCU,GAsCYd,kBAAkB,GAAG;AAAEA,kBAAAA,kBAAkB,EAAlBA;AAAF,iBAAH,GAA4B;AAAEK,kBAAAA,eAAe,EAAfA;AAAF,iBAtC1D;;AAwChB,oBAAID,MAAJ,EAAY;AACVU,kBAAAA,mBAAmB,CAACV,MAApB,GAA6BA,MAA7B;AACD,iBAFD,MAEO;AACLU,kBAAAA,mBAAmB,CAACH,mBAApB,GAA0CA,mBAA1C;AACAG,kBAAAA,mBAAmB,CAACF,yBAApB,GAAgDA,yBAAhD;AACAE,kBAAAA,mBAAmB,CAACD,uBAApB,GAA8CA,uBAA9C;AACD;;AA9Ce,kDAgDTC,mBAhDS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAFlB;AAoDEX,IAAAA,WAAW,EAAXA;AApDF;AAsDD","sourcesContent":["import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n"],"file":"patchOptions.js"}