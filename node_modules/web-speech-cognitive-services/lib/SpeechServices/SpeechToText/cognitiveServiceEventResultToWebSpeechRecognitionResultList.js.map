{"version":3,"sources":["../../../src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"],"names":["SpeechSDK","ResultReason","RecognizingSpeech","RecognizedSpeech","result","maxAlternatives","Infinity","textNormalization","reason","json","NBest","resultList","confidence","transcript","text","isFinal","slice","map","Confidence","display","Display","itn","ITN","lexical","Lexical","maskedITN","MaskedITN"],"mappings":";;;;;;;;;AAAA;;AACA;;4BAIIA,kB,CADFC,Y;IAAgBC,iB,yBAAAA,iB;IAAmBC,gB,yBAAAA,gB;;AAGtB,kBAASC,MAAT,EAAqF;AAAA,iFAAJ,EAAI;AAAA,kCAAlEC,eAAkE;AAAA,MAAlEA,eAAkE,qCAAhDC,QAAgD;AAAA,mCAAtCC,iBAAsC;AAAA,MAAtCA,iBAAsC,sCAAlB,SAAkB;;AAClG,MAAIH,MAAM,CAACI,MAAP,KAAkBN,iBAAlB,IAAwCE,MAAM,CAACI,MAAP,KAAkBL,gBAAlB,IAAsC,CAACC,MAAM,CAACK,IAAP,CAAYC,KAA/F,EAAuG;AACrG,QAAMC,UAAU,GAAG,CACjB;AACEC,MAAAA,UAAU,EAAE,GADd;AAEEC,MAAAA,UAAU,EAAET,MAAM,CAACU;AAFrB,KADiB,CAAnB;;AAOA,QAAIV,MAAM,CAACI,MAAP,KAAkBL,gBAAtB,EAAwC;AACtCQ,MAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;AACD;;AAED,WAAOJ,UAAP;AACD,GAbD,MAaO,IAAIP,MAAM,CAACI,MAAP,KAAkBL,gBAAtB,EAAwC;AAC7C,QAAMQ,WAAU,GAAG,yBACjB,CAACP,MAAM,CAACK,IAAP,CAAYC,KAAZ,IAAqB,EAAtB,EACGM,KADH,CACS,CADT,EACYX,eADZ,EAEGY,GAFH,CAEO;AAAA,UAAeL,UAAf,SAAGM,UAAH;AAAA,UAAoCC,OAApC,SAA2BC,OAA3B;AAAA,UAAkDC,GAAlD,SAA6CC,GAA7C;AAAA,UAAgEC,OAAhE,SAAuDC,OAAvD;AAAA,UAAoFC,SAApF,SAAyEC,SAAzE;AAAA,aAAqG;AACxGd,QAAAA,UAAU,EAAVA,UADwG;AAExGC,QAAAA,UAAU,EACRN,iBAAiB,KAAK,KAAtB,GACIc,GADJ,GAEId,iBAAiB,KAAK,SAAtB,GACAgB,OADA,GAEAhB,iBAAiB,KAAK,WAAtB,GACAkB,SADA,GAEAN;AATkG,OAArG;AAAA,KAFP,CADiB,EAcjB;AAAEJ,MAAAA,OAAO,EAAE;AAAX,KAdiB,CAAnB;;AAiBA,WAAOJ,WAAP;AACD;;AAED,SAAO,EAAP;AACD","sourcesContent":["import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n"],"file":"cognitiveServiceEventResultToWebSpeechRecognitionResultList.js"}