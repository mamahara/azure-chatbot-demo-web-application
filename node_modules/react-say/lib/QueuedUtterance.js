"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _createCustomEvent = _interopRequireDefault(require("./createCustomEvent"));

var _createDeferred = _interopRequireDefault(require("./createDeferred"));

var _createErrorEvent = _interopRequireDefault(require("./createErrorEvent"));

function speakUtterance(ponyfill, utterance, startCallback) {
  var speechSynthesis, startDeferred, errorDeferred, endDeferred, startEvent, finishedSpeaking, endPromise, endEvent;
  return _regenerator["default"].async(function speakUtterance$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          speechSynthesis = ponyfill.speechSynthesis;
          startDeferred = (0, _createDeferred["default"])();
          errorDeferred = (0, _createDeferred["default"])();
          endDeferred = (0, _createDeferred["default"])();
          utterance.addEventListener('end', endDeferred.resolve);
          utterance.addEventListener('error', errorDeferred.resolve);
          utterance.addEventListener('start', startDeferred.resolve); // if (speechSynthesis.speaking) {
          //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy before we call speak`);
          // }

          speechSynthesis.speak(utterance);
          _context2.next = 10;
          return _regenerator["default"].awrap(Promise.race([errorDeferred.promise, startDeferred.promise]));

        case 10:
          startEvent = _context2.sent;

          if (!(startEvent.type === 'error')) {
            _context2.next = 13;
            break;
          }

          throw startEvent.error;

        case 13:
          endPromise = Promise.race([errorDeferred.promise, endDeferred.promise]);
          startCallback && startCallback(function _callee() {
            return _regenerator["default"].async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (finishedSpeaking) {
                      _context.next = 4;
                      break;
                    }

                    speechSynthesis.cancel();
                    _context.next = 4;
                    return _regenerator["default"].awrap(endPromise);

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            });
          });
          _context2.next = 17;
          return _regenerator["default"].awrap(endPromise);

        case 17:
          endEvent = _context2.sent;
          finishedSpeaking = true; // if (speechSynthesis.speaking) {
          //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy after speak is stopped`);
          // }
          // console.debug(`ENDED: ${ utterance.text }`);

          if (!(endEvent.type === 'error')) {
            _context2.next = 21;
            break;
          }

          throw endEvent.error;

        case 21:
        case "end":
          return _context2.stop();
      }
    }
  });
}

var QueuedUtterance =
/*#__PURE__*/
function () {
  function QueuedUtterance(ponyfill, utterance, _ref) {
    var onEnd = _ref.onEnd,
        onError = _ref.onError,
        onStart = _ref.onStart;
    (0, _classCallCheck2["default"])(this, QueuedUtterance);
    this._cancelled = false;
    this._deferred = (0, _createDeferred["default"])();
    this._onEnd = onEnd;
    this._onError = onError;
    this._onStart = onStart;
    this._ponyfill = ponyfill;
    this._speaking = false;
    this._utterance = utterance;
    this.promise = this._deferred.promise;
  }

  (0, _createClass2["default"])(QueuedUtterance, [{
    key: "cancel",
    value: function cancel() {
      return _regenerator["default"].async(function cancel$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this._cancelled = true;
              _context3.t0 = this._cancel;

              if (!_context3.t0) {
                _context3.next = 5;
                break;
              }

              _context3.next = 5;
              return _regenerator["default"].awrap(this._cancel());

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "speak",
    value: function speak() {
      var _this = this;

      if (this._speaking) {
        console.warn("ASSERTION: QueuedUtterance is already speaking or has spoken.");
      }

      this._speaking = true;
      (function _callee2() {
        return _regenerator["default"].async(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!_this._cancelled) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('cancelled');

              case 2:
                _context4.next = 4;
                return _regenerator["default"].awrap(speakUtterance(_this._ponyfill, _this._utterance, function (cancel) {
                  if (_this._cancelled) {
                    cancel();
                    throw new Error('cancelled');
                  } else {
                    _this._cancel = cancel;
                    _this._onStart && _this._onStart((0, _createCustomEvent["default"])('start'));
                  }
                }));

              case 4:
                if (!_this._cancelled) {
                  _context4.next = 6;
                  break;
                }

                throw new Error('cancelled');

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        });
      })().then(function () {
        _this._onEnd && _this._onEnd((0, _createCustomEvent["default"])('end'));

        _this._deferred.resolve();
      }, function (error) {
        _this._onError && _this._onError((0, _createErrorEvent["default"])(error));

        _this._deferred.reject(error);
      });
      return this.promise;
    }
  }]);
  return QueuedUtterance;
}();

exports["default"] = QueuedUtterance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9RdWV1ZWRVdHRlcmFuY2UuanMiXSwibmFtZXMiOlsic3BlYWtVdHRlcmFuY2UiLCJwb255ZmlsbCIsInV0dGVyYW5jZSIsInN0YXJ0Q2FsbGJhY2siLCJzcGVlY2hTeW50aGVzaXMiLCJzdGFydERlZmVycmVkIiwiZXJyb3JEZWZlcnJlZCIsImVuZERlZmVycmVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc29sdmUiLCJzcGVhayIsIlByb21pc2UiLCJyYWNlIiwicHJvbWlzZSIsInN0YXJ0RXZlbnQiLCJ0eXBlIiwiZXJyb3IiLCJlbmRQcm9taXNlIiwiZmluaXNoZWRTcGVha2luZyIsImNhbmNlbCIsImVuZEV2ZW50IiwiUXVldWVkVXR0ZXJhbmNlIiwib25FbmQiLCJvbkVycm9yIiwib25TdGFydCIsIl9jYW5jZWxsZWQiLCJfZGVmZXJyZWQiLCJfb25FbmQiLCJfb25FcnJvciIsIl9vblN0YXJ0IiwiX3BvbnlmaWxsIiwiX3NwZWFraW5nIiwiX3V0dGVyYW5jZSIsIl9jYW5jZWwiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIiwidGhlbiIsInJlamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsU0FBZUEsY0FBZixDQUE4QkMsUUFBOUIsRUFBd0NDLFNBQXhDLEVBQW1EQyxhQUFuRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDVUMsVUFBQUEsZUFEVixHQUM4QkgsUUFEOUIsQ0FDVUcsZUFEVjtBQUdRQyxVQUFBQSxhQUhSLEdBR3dCLGlDQUh4QjtBQUlRQyxVQUFBQSxhQUpSLEdBSXdCLGlDQUp4QjtBQUtRQyxVQUFBQSxXQUxSLEdBS3NCLGlDQUx0QjtBQU9FTCxVQUFBQSxTQUFTLENBQUNNLGdCQUFWLENBQTJCLEtBQTNCLEVBQWtDRCxXQUFXLENBQUNFLE9BQTlDO0FBQ0FQLFVBQUFBLFNBQVMsQ0FBQ00sZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBb0NGLGFBQWEsQ0FBQ0csT0FB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Q0FBTjtBQUNELG1CQUpELE1BSU87QUFDTCxvQkFBQSxLQUFJLENBQUNILE9BQUwsR0FBZWQsTUFBZjtBQUNBLG9CQUFBLEtBQUksQ0FBQ1UsUUFBTCxJQUFpQixLQUFJLENBQUNBLFFBQUwsQ0FBYyxtQ0FBa0IsT0FBbEIsQ0FBZCxDQUFqQjtBQUNEO0FBQ0YsaUJBVG1CLENBTHJCOztBQUFBO0FBQUEscUJBZ0JLLEtBQUksQ0FBQ0osVUFoQlY7QUFBQTtBQUFBO0FBQUE7O0FBQUEsc0JBaUJTLElBQUlXLEtBQUosQ0FBVSxXQUFWLENBakJUOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQUQsSUFtQktDLElBbkJMLENBbUJVLFlBQU07QUFDZCxRQUFBLEtBQUksQ0FBQ1YsTUFBTCxJQUFlLEtBQUksQ0FBQ0EsTUFBTCxDQUFZLG1DQUFrQixLQUFsQixDQUFaLENBQWY7O0FBQ0EsUUFBQSxLQUFJLENBQUNELFNBQUwsQ0FBZWpCLE9BQWY7QUFDRCxPQXRCRCxFQXNCRyxVQUFBTyxLQUFLLEVBQUk7QUFDVixRQUFBLEtBQUksQ0FBQ1ksUUFBTCxJQUFpQixLQUFJLENBQUNBLFFBQUwsQ0FBYyxrQ0FBaUJaLEtBQWpCLENBQWQsQ0FBakI7O0FBQ0EsUUFBQSxLQUFJLENBQUNVLFNBQUwsQ0FBZVksTUFBZixDQUFzQnRCLEtBQXRCO0FBQ0QsT0F6QkQ7QUEyQkEsYUFBTyxLQUFLSCxPQUFaO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQ3VzdG9tRXZlbnQgZnJvbSAnLi9jcmVhdGVDdXN0b21FdmVudCc7XG5pbXBvcnQgY3JlYXRlRGVmZXJyZWQgZnJvbSAnLi9jcmVhdGVEZWZlcnJlZCc7XG5pbXBvcnQgY3JlYXRlRXJyb3JFdmVudCBmcm9tICcuL2NyZWF0ZUVycm9yRXZlbnQnO1xuXG5hc3luYyBmdW5jdGlvbiBzcGVha1V0dGVyYW5jZShwb255ZmlsbCwgdXR0ZXJhbmNlLCBzdGFydENhbGxiYWNrKSB7XG4gIGNvbnN0IHsgc3BlZWNoU3ludGhlc2lzIH0gPSBwb255ZmlsbDtcblxuICBjb25zdCBzdGFydERlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcbiAgY29uc3QgZXJyb3JEZWZlcnJlZCA9IGNyZWF0ZURlZmVycmVkKCk7XG4gIGNvbnN0IGVuZERlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcblxuICB1dHRlcmFuY2UuYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgZW5kRGVmZXJyZWQucmVzb2x2ZSk7XG4gIHV0dGVyYW5jZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yRGVmZXJyZWQucmVzb2x2ZSk7XG4gIHV0dGVyYW5jZS5hZGRFdmVudExpc3RlbmVyKCdzdGFydCcsIHN0YXJ0RGVmZXJyZWQucmVzb2x2ZSk7XG5cbiAgLy8gaWYgKHNwZWVjaFN5bnRoZXNpcy5zcGVha2luZykge1xuICAvLyAgIGNvbnNvbGUud2FybihgQVNTRVJUSU9OOiBzcGVlY2hTeW50aGVzaXMuc3BlYWtpbmcgc2hvdWxkIG5vdCBiZSB0cnV0aHkgYmVmb3JlIHdlIGNhbGwgc3BlYWtgKTtcbiAgLy8gfVxuXG4gIHNwZWVjaFN5bnRoZXNpcy5zcGVhayh1dHRlcmFuY2UpO1xuXG4gIGNvbnN0IHN0YXJ0RXZlbnQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgIGVycm9yRGVmZXJyZWQucHJvbWlzZSxcbiAgICBzdGFydERlZmVycmVkLnByb21pc2VcbiAgXSk7XG5cbiAgaWYgKHN0YXJ0RXZlbnQudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIHRocm93IHN0YXJ0RXZlbnQuZXJyb3I7XG4gIH1cblxuICBsZXQgZmluaXNoZWRTcGVha2luZztcbiAgY29uc3QgZW5kUHJvbWlzZSA9IFByb21pc2UucmFjZShbXG4gICAgZXJyb3JEZWZlcnJlZC5wcm9taXNlLFxuICAgIGVuZERlZmVycmVkLnByb21pc2VcbiAgXSk7XG5cbiAgc3RhcnRDYWxsYmFjayAmJiBzdGFydENhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWZpbmlzaGVkU3BlYWtpbmcpIHtcbiAgICAgIHNwZWVjaFN5bnRoZXNpcy5jYW5jZWwoKTtcbiAgICAgIGF3YWl0IGVuZFByb21pc2U7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBlbmRFdmVudCA9IGF3YWl0IGVuZFByb21pc2U7XG5cbiAgZmluaXNoZWRTcGVha2luZyA9IHRydWU7XG5cbiAgLy8gaWYgKHNwZWVjaFN5bnRoZXNpcy5zcGVha2luZykge1xuICAvLyAgIGNvbnNvbGUud2FybihgQVNTRVJUSU9OOiBzcGVlY2hTeW50aGVzaXMuc3BlYWtpbmcgc2hvdWxkIG5vdCBiZSB0cnV0aHkgYWZ0ZXIgc3BlYWsgaXMgc3RvcHBlZGApO1xuICAvLyB9XG5cbiAgLy8gY29uc29sZS5kZWJ1ZyhgRU5ERUQ6ICR7IHV0dGVyYW5jZS50ZXh0IH1gKTtcblxuICBpZiAoZW5kRXZlbnQudHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIHRocm93IGVuZEV2ZW50LmVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXVlZFV0dGVyYW5jZSB7XG4gIGNvbnN0cnVjdG9yKHBvbnlmaWxsLCB1dHRlcmFuY2UsIHsgb25FbmQsIG9uRXJyb3IsIG9uU3RhcnQgfSkge1xuICAgIHRoaXMuX2NhbmNlbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQoKTtcbiAgICB0aGlzLl9vbkVuZCA9IG9uRW5kO1xuICAgIHRoaXMuX29uRXJyb3IgPSBvbkVycm9yO1xuICAgIHRoaXMuX29uU3RhcnQgPSBvblN0YXJ0O1xuICAgIHRoaXMuX3BvbnlmaWxsID0gcG9ueWZpbGw7XG4gICAgdGhpcy5fc3BlYWtpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl91dHRlcmFuY2UgPSB1dHRlcmFuY2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSB0aGlzLl9kZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgYXN5bmMgY2FuY2VsKCkge1xuICAgIHRoaXMuX2NhbmNlbGxlZCA9IHRydWU7XG4gICAgdGhpcy5fY2FuY2VsICYmIGF3YWl0IHRoaXMuX2NhbmNlbCgpO1xuICB9XG5cbiAgc3BlYWsoKSB7XG4gICAgaWYgKHRoaXMuX3NwZWFraW5nKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEFTU0VSVElPTjogUXVldWVkVXR0ZXJhbmNlIGlzIGFscmVhZHkgc3BlYWtpbmcgb3IgaGFzIHNwb2tlbi5gKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zcGVha2luZyA9IHRydWU7XG5cbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2NhbmNlbGxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbmNlbGxlZCcpO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBzcGVha1V0dGVyYW5jZSh0aGlzLl9wb255ZmlsbCwgdGhpcy5fdXR0ZXJhbmNlLCBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAodGhpcy5fY2FuY2VsbGVkKSB7XG4gICAgICAgICAgY2FuY2VsKCk7XG5cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbmNlbGxlZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2NhbmNlbCA9IGNhbmNlbDtcbiAgICAgICAgICB0aGlzLl9vblN0YXJ0ICYmIHRoaXMuX29uU3RhcnQoY3JlYXRlQ3VzdG9tRXZlbnQoJ3N0YXJ0JykpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMuX2NhbmNlbGxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbmNlbGxlZCcpO1xuICAgICAgfVxuICAgIH0pKCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLl9vbkVuZCAmJiB0aGlzLl9vbkVuZChjcmVhdGVDdXN0b21FdmVudCgnZW5kJykpO1xuICAgICAgdGhpcy5fZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgIH0sIGVycm9yID0+IHtcbiAgICAgIHRoaXMuX29uRXJyb3IgJiYgdGhpcy5fb25FcnJvcihjcmVhdGVFcnJvckV2ZW50KGVycm9yKSk7XG4gICAgICB0aGlzLl9kZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgfVxufVxuIl19