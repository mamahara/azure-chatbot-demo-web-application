"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = whileConnectedEffect;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _connect = require("../../actions/connect");

var _disconnect = require("../../actions/disconnect");

var _reconnect = require("../../actions/reconnect");

function whileConnectedEffect(fn) {
  return (0, _effects.call)( /*#__PURE__*/_regenerator["default"].mark(function whileConnected() {
    var _yield$take, _yield$take$meta, userID, username, directLine, task;

    return _regenerator["default"].wrap(function whileConnected$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _effects.take)([_connect.CONNECT_FULFILLING, _reconnect.RECONNECT_FULFILLING]);

          case 2:
            _yield$take = _context.sent;
            _yield$take$meta = _yield$take.meta;
            userID = _yield$take$meta.userID;
            username = _yield$take$meta.username;
            directLine = _yield$take.payload.directLine;
            _context.next = 9;
            return (0, _effects.fork)(fn, {
              directLine: directLine,
              userID: userID,
              username: username
            });

          case 9:
            task = _context.sent;
            _context.next = 12;
            return (0, _effects.take)([_disconnect.DISCONNECT_PENDING, _reconnect.RECONNECT_PENDING]);

          case 12:
            _context.next = 14;
            return (0, _effects.cancel)(task);

          case 14:
            _context.next = 0;
            break;

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, whileConnected);
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zYWdhcy9lZmZlY3RzL3doaWxlQ29ubmVjdGVkLmpzIl0sIm5hbWVzIjpbIndoaWxlQ29ubmVjdGVkRWZmZWN0IiwiZm4iLCJ3aGlsZUNvbm5lY3RlZCIsIkNPTk5FQ1RfRlVMRklMTElORyIsIlJFQ09OTkVDVF9GVUxGSUxMSU5HIiwibWV0YSIsInVzZXJJRCIsInVzZXJuYW1lIiwiZGlyZWN0TGluZSIsInBheWxvYWQiLCJ0YXNrIiwiRElTQ09OTkVDVF9QRU5ESU5HIiwiUkVDT05ORUNUX1BFTkRJTkciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRWUsU0FBU0Esb0JBQVQsQ0FBOEJDLEVBQTlCLEVBQWtDO0FBQy9DLFNBQU8sOERBQUssU0FBVUMsY0FBVjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLSixtQkFBTSxtQkFBSyxDQUFDQywyQkFBRCxFQUFxQkMsK0JBQXJCLENBQUwsQ0FBTjs7QUFMSTtBQUFBO0FBQUEsMkNBR05DLElBSE07QUFHRUMsWUFBQUEsTUFIRixvQkFHRUEsTUFIRjtBQUdVQyxZQUFBQSxRQUhWLG9CQUdVQSxRQUhWO0FBSUtDLFlBQUFBLFVBSkwsZUFJTkMsT0FKTSxDQUlLRCxVQUpMO0FBQUE7QUFNSyxtQkFBTSxtQkFBS1AsRUFBTCxFQUFTO0FBQUVPLGNBQUFBLFVBQVUsRUFBVkEsVUFBRjtBQUFjRixjQUFBQSxNQUFNLEVBQU5BLE1BQWQ7QUFBc0JDLGNBQUFBLFFBQVEsRUFBUkE7QUFBdEIsYUFBVCxDQUFOOztBQU5MO0FBTUZHLFlBQUFBLElBTkU7QUFBQTtBQVVSLG1CQUFNLG1CQUFLLENBQUNDLDhCQUFELEVBQXFCQyw0QkFBckIsQ0FBTCxDQUFOOztBQVZRO0FBQUE7QUFXUixtQkFBTSxxQkFBT0YsSUFBUCxDQUFOOztBQVhRO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBVVIsY0FBVjtBQUFBLEdBQUwsRUFBUDtBQWNEIiwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsbCwgY2FuY2VsLCBmb3JrLCB0YWtlIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgQ09OTkVDVF9GVUxGSUxMSU5HIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb25uZWN0JztcbmltcG9ydCB7IERJU0NPTk5FQ1RfUEVORElORyB9IGZyb20gJy4uLy4uL2FjdGlvbnMvZGlzY29ubmVjdCc7XG5pbXBvcnQgeyBSRUNPTk5FQ1RfUEVORElORywgUkVDT05ORUNUX0ZVTEZJTExJTkcgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3JlY29ubmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdoaWxlQ29ubmVjdGVkRWZmZWN0KGZuKSB7XG4gIHJldHVybiBjYWxsKGZ1bmN0aW9uKiB3aGlsZUNvbm5lY3RlZCgpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1ldGE6IHsgdXNlcklELCB1c2VybmFtZSB9LFxuICAgICAgICBwYXlsb2FkOiB7IGRpcmVjdExpbmUgfVxuICAgICAgfSA9IHlpZWxkIHRha2UoW0NPTk5FQ1RfRlVMRklMTElORywgUkVDT05ORUNUX0ZVTEZJTExJTkddKTtcbiAgICAgIGNvbnN0IHRhc2sgPSB5aWVsZCBmb3JrKGZuLCB7IGRpcmVjdExpbmUsIHVzZXJJRCwgdXNlcm5hbWUgfSk7XG5cbiAgICAgIC8vIFdoZW4gd2UgcmVjZWl2ZSBESVNDT05ORUNUX1BFTkRJTkcgb3IgUkVDT05ORUNUX1BFTkRJTkcsIHRoZSBEaXJlY3QgTGluZSBjb25uZWN0aW9uIGlzIGN1cnJlbnRseSBidXN5IGFuZCBzaG91bGQgbm90IGJlIHVzZWQuXG5cbiAgICAgIHlpZWxkIHRha2UoW0RJU0NPTk5FQ1RfUEVORElORywgUkVDT05ORUNUX1BFTkRJTkddKTtcbiAgICAgIHlpZWxkIGNhbmNlbCh0YXNrKTtcbiAgICB9XG4gIH0pO1xufVxuIl19