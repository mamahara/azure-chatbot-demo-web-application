"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _connect = require("../actions/connect");

var _createPromiseQueue2 = _interopRequireDefault(require("../createPromiseQueue"));

var _setNotification = _interopRequireDefault(require("../actions/setNotification"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(connectionStatusToNotification),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(_callee);

var CONNECTIVITY_STATUS_NOTIFICATION_ID = 'connectivitystatus';

function subscribeToPromiseQueue(observable) {
  var _createPromiseQueue = (0, _createPromiseQueue2["default"])(),
      push = _createPromiseQueue.push,
      shift = _createPromiseQueue.shift;

  var subscription = observable.subscribe({
    next: push
  });
  return {
    shift: shift,
    unsubscribe: function unsubscribe() {
      subscription.unsubscribe();
    }
  };
}

function connectionStatusToNotification(_ref) {
  var directLine, _subscribeToPromiseQu, shift, unsubscribe, reconnecting, value;

  return _regenerator["default"].wrap(function connectionStatusToNotification$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          directLine = _ref.payload.directLine;
          _subscribeToPromiseQu = subscribeToPromiseQueue(directLine.connectionStatus$), shift = _subscribeToPromiseQu.shift, unsubscribe = _subscribeToPromiseQu.unsubscribe;
          _context.prev = 2;

        case 3:
          _context.next = 5;
          return (0, _effects.call)(shift);

        case 5:
          value = _context.sent;
          _context.t0 = value;
          _context.next = _context.t0 === 0 ? 9 : _context.t0 === 1 ? 9 : _context.t0 === 2 ? 12 : _context.t0 === 3 ? 16 : _context.t0 === 4 ? 16 : 20;
          break;

        case 9:
          _context.next = 11;
          return (0, _effects.put)((0, _setNotification["default"])({
            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,
            level: 'info',
            message: reconnecting ? 'reconnecting' : 'connecting'
          }));

        case 11:
          return _context.abrupt("break", 21);

        case 12:
          reconnecting = 1;
          _context.next = 15;
          return (0, _effects.put)((0, _setNotification["default"])({
            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,
            level: 'success',
            message: 'connected'
          }));

        case 15:
          return _context.abrupt("break", 21);

        case 16:
          reconnecting = 1;
          _context.next = 19;
          return (0, _effects.put)((0, _setNotification["default"])({
            id: CONNECTIVITY_STATUS_NOTIFICATION_ID,
            level: 'error',
            message: 'failedtoconnect'
          }));

        case 19:
          return _context.abrupt("break", 21);

        case 20:
          return _context.abrupt("break", 21);

        case 21:
          _context.next = 3;
          break;

        case 23:
          _context.prev = 23;
          unsubscribe();
          return _context.finish(23);

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[2,, 23, 26]]);
}

function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.takeLatest)(_connect.CONNECT, connectionStatusToNotification);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9jb25uZWN0aW9uU3RhdHVzVG9Ob3RpZmljYXRpb25TYWdhLmpzIl0sIm5hbWVzIjpbImNvbm5lY3Rpb25TdGF0dXNUb05vdGlmaWNhdGlvbiIsIkNPTk5FQ1RJVklUWV9TVEFUVVNfTk9USUZJQ0FUSU9OX0lEIiwic3Vic2NyaWJlVG9Qcm9taXNlUXVldWUiLCJvYnNlcnZhYmxlIiwicHVzaCIsInNoaWZ0Iiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlIiwibmV4dCIsInVuc3Vic2NyaWJlIiwiZGlyZWN0TGluZSIsInBheWxvYWQiLCJjb25uZWN0aW9uU3RhdHVzJCIsInZhbHVlIiwiaWQiLCJsZXZlbCIsIm1lc3NhZ2UiLCJyZWNvbm5lY3RpbmciLCJDT05ORUNUIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUVBOztBQUNBOztBQUNBOzt3REFnQlVBLDhCOzs7QUFkVixJQUFNQyxtQ0FBbUMsR0FBRyxvQkFBNUM7O0FBRUEsU0FBU0MsdUJBQVQsQ0FBaUNDLFVBQWpDLEVBQTZDO0FBQUEsNEJBQ25CLHNDQURtQjtBQUFBLE1BQ25DQyxJQURtQyx1QkFDbkNBLElBRG1DO0FBQUEsTUFDN0JDLEtBRDZCLHVCQUM3QkEsS0FENkI7O0FBRTNDLE1BQU1DLFlBQVksR0FBR0gsVUFBVSxDQUFDSSxTQUFYLENBQXFCO0FBQUVDLElBQUFBLElBQUksRUFBRUo7QUFBUixHQUFyQixDQUFyQjtBQUVBLFNBQU87QUFDTEMsSUFBQUEsS0FBSyxFQUFMQSxLQURLO0FBRUxJLElBQUFBLFdBRksseUJBRVM7QUFDWkgsTUFBQUEsWUFBWSxDQUFDRyxXQUFiO0FBQ0Q7QUFKSSxHQUFQO0FBTUQ7O0FBRUQsU0FBVVQsOEJBQVY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFzRFUsVUFBQUEsVUFBdEQsUUFBMkNDLE9BQTNDLENBQXNERCxVQUF0RDtBQUFBLGtDQUNpQ1IsdUJBQXVCLENBQUNRLFVBQVUsQ0FBQ0UsaUJBQVosQ0FEeEQsRUFDVVAsS0FEVix5QkFDVUEsS0FEVixFQUNpQkksV0FEakIseUJBQ2lCQSxXQURqQjtBQUFBOztBQUFBO0FBQUE7QUFPb0IsaUJBQU0sbUJBQUtKLEtBQUwsQ0FBTjs7QUFQcEI7QUFPWVEsVUFBQUEsS0FQWjtBQUFBLHdCQVNjQSxLQVRkO0FBQUEsMENBVWEsQ0FWYix1QkFXYSxDQVhiLHVCQXNCYSxDQXRCYix3QkFtQ2EsQ0FuQ2Isd0JBb0NhLENBcENiO0FBQUE7O0FBQUE7QUFBQTtBQVlVLGlCQUFNLGtCQUNKLGlDQUFnQjtBQUNkQyxZQUFBQSxFQUFFLEVBQUViLG1DQURVO0FBRWRjLFlBQUFBLEtBQUssRUFBRSxNQUZPO0FBR2RDLFlBQUFBLE9BQU8sRUFBRUMsWUFBWSxHQUFHLGNBQUgsR0FBb0I7QUFIM0IsV0FBaEIsQ0FESSxDQUFOOztBQVpWO0FBQUE7O0FBQUE7QUF1QlVBLFVBQUFBLFlBQVksR0FBRyxDQUFmO0FBdkJWO0FBeUJVLGlCQUFNLGtCQUNKLGlDQUFnQjtBQUNkSCxZQUFBQSxFQUFFLEVBQUViLG1DQURVO0FBRWRjLFlBQUFBLEtBQUssRUFBRSxTQUZPO0FBR2RDLFlBQUFBLE9BQU8sRUFBRTtBQUhLLFdBQWhCLENBREksQ0FBTjs7QUF6QlY7QUFBQTs7QUFBQTtBQXFDVUMsVUFBQUEsWUFBWSxHQUFHLENBQWY7QUFyQ1Y7QUF1Q1UsaUJBQU0sa0JBQ0osaUNBQWdCO0FBQ2RILFlBQUFBLEVBQUUsRUFBRWIsbUNBRFU7QUFFZGMsWUFBQUEsS0FBSyxFQUFFLE9BRk87QUFHZEMsWUFBQUEsT0FBTyxFQUFFO0FBSEssV0FBaEIsQ0FESSxDQUFOOztBQXZDVjtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFzRElQLFVBQUFBLFdBQVc7QUF0RGY7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBMERlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiLGlCQUFNLHlCQUFXUyxnQkFBWCxFQUFvQmxCLDhCQUFwQixDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzAsIDEsIDIsIDMsIDRdIH1dICovXG5cbmltcG9ydCB7IGNhbGwsIHB1dCwgdGFrZUxhdGVzdCB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB7IENPTk5FQ1QgfSBmcm9tICcuLi9hY3Rpb25zL2Nvbm5lY3QnO1xuaW1wb3J0IGNyZWF0ZVByb21pc2VRdWV1ZSBmcm9tICcuLi9jcmVhdGVQcm9taXNlUXVldWUnO1xuaW1wb3J0IHNldE5vdGlmaWNhdGlvbiBmcm9tICcuLi9hY3Rpb25zL3NldE5vdGlmaWNhdGlvbic7XG5cbmNvbnN0IENPTk5FQ1RJVklUWV9TVEFUVVNfTk9USUZJQ0FUSU9OX0lEID0gJ2Nvbm5lY3Rpdml0eXN0YXR1cyc7XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVRvUHJvbWlzZVF1ZXVlKG9ic2VydmFibGUpIHtcbiAgY29uc3QgeyBwdXNoLCBzaGlmdCB9ID0gY3JlYXRlUHJvbWlzZVF1ZXVlKCk7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGUuc3Vic2NyaWJlKHsgbmV4dDogcHVzaCB9KTtcblxuICByZXR1cm4ge1xuICAgIHNoaWZ0LFxuICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiogY29ubmVjdGlvblN0YXR1c1RvTm90aWZpY2F0aW9uKHsgcGF5bG9hZDogeyBkaXJlY3RMaW5lIH0gfSkge1xuICBjb25zdCB7IHNoaWZ0LCB1bnN1YnNjcmliZSB9ID0gc3Vic2NyaWJlVG9Qcm9taXNlUXVldWUoZGlyZWN0TGluZS5jb25uZWN0aW9uU3RhdHVzJCk7XG5cbiAgdHJ5IHtcbiAgICBsZXQgcmVjb25uZWN0aW5nO1xuXG4gICAgZm9yICg7Oykge1xuICAgICAgY29uc3QgdmFsdWUgPSB5aWVsZCBjYWxsKHNoaWZ0KTtcblxuICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB5aWVsZCBwdXQoXG4gICAgICAgICAgICBzZXROb3RpZmljYXRpb24oe1xuICAgICAgICAgICAgICBpZDogQ09OTkVDVElWSVRZX1NUQVRVU19OT1RJRklDQVRJT05fSUQsXG4gICAgICAgICAgICAgIGxldmVsOiAnaW5mbycsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IHJlY29ubmVjdGluZyA/ICdyZWNvbm5lY3RpbmcnIDogJ2Nvbm5lY3RpbmcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmVjb25uZWN0aW5nID0gMTtcblxuICAgICAgICAgIHlpZWxkIHB1dChcbiAgICAgICAgICAgIHNldE5vdGlmaWNhdGlvbih7XG4gICAgICAgICAgICAgIGlkOiBDT05ORUNUSVZJVFlfU1RBVFVTX05PVElGSUNBVElPTl9JRCxcbiAgICAgICAgICAgICAgbGV2ZWw6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ2Nvbm5lY3RlZCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHJlY29ubmVjdGluZyA9IDE7XG5cbiAgICAgICAgICB5aWVsZCBwdXQoXG4gICAgICAgICAgICBzZXROb3RpZmljYXRpb24oe1xuICAgICAgICAgICAgICBpZDogQ09OTkVDVElWSVRZX1NUQVRVU19OT1RJRklDQVRJT05fSUQsXG4gICAgICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnZmFpbGVkdG9jb25uZWN0J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiooKSB7XG4gIHlpZWxkIHRha2VMYXRlc3QoQ09OTkVDVCwgY29ubmVjdGlvblN0YXR1c1RvTm90aWZpY2F0aW9uKTtcbn1cbiJdfQ==