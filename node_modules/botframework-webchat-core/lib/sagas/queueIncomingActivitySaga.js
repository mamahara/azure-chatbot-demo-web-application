"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = queueIncomingActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _queueIncomingActivity = require("../actions/queueIncomingActivity");

var _activities = _interopRequireWildcard(require("../selectors/activities"));

var _activityFromBot = _interopRequireDefault(require("../definitions/activityFromBot"));

var _incomingActivity = _interopRequireWildcard(require("../actions/incomingActivity"));

var _setSuggestedActions = _interopRequireDefault(require("../actions/setSuggestedActions"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(takeEveryAndSelect),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(waitForActivityId),
    _marked3 = /*#__PURE__*/_regenerator["default"].mark(queueIncomingActivity),
    _marked4 = /*#__PURE__*/_regenerator["default"].mark(queueIncomingActivitySaga);

// We will hold up the replying activity if the originating activity did not arrive, up to 5 seconds.
var REPLY_TIMEOUT = 5000;

function takeEveryAndSelect(actionType, selector, fn) {
  var action, state;
  return _regenerator["default"].wrap(function takeEveryAndSelect$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.cancelled)();

        case 2:
          if (_context.sent) {
            _context.next = 13;
            break;
          }

          _context.next = 5;
          return (0, _effects.take)(actionType);

        case 5:
          action = _context.sent;
          _context.next = 8;
          return (0, _effects.select)(selector);

        case 8:
          state = _context.sent;
          _context.next = 11;
          return (0, _effects.fork)(fn, action, state);

        case 11:
          _context.next = 0;
          break;

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
} // Wait for specific activity to arrive in the transcript.
// We will use the initial set of activities to close time gaps between select() and take().


function waitForActivityId(replyToId, initialActivities) {
  var activities, replied;
  return _regenerator["default"].wrap(function waitForActivityId$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          activities = initialActivities;

        case 1:
          replied = activities.find(function (activity) {
            return activity.id === replyToId;
          });

          if (!replied) {
            _context2.next = 4;
            break;
          }

          return _context2.abrupt("break", 11);

        case 4:
          _context2.next = 6;
          return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

        case 6:
          _context2.next = 8;
          return (0, _effects.select)(_activities["default"]);

        case 8:
          activities = _context2.sent;

        case 9:
          _context2.next = 1;
          break;

        case 11:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function queueIncomingActivity(_ref) {
  var userID;
  return _regenerator["default"].wrap(function queueIncomingActivity$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          userID = _ref.userID;
          _context4.next = 3;
          return takeEveryAndSelect(_queueIncomingActivity.QUEUE_INCOMING_ACTIVITY, _activities["default"], /*#__PURE__*/_regenerator["default"].mark(function queueIncomingActivity(_ref2, initialActivities) {
            var activity, replyToId, messageActivities, lastMessageActivity, _lastMessageActivity$, actions, to;

            return _regenerator["default"].wrap(function queueIncomingActivity$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    activity = _ref2.payload.activity;
                    // This is for accessibility issue.
                    // If the incoming activity has "replyToId" field, hold on it until the activity replied to is in the transcript, then release this one.
                    replyToId = activity.replyToId;

                    if (!replyToId) {
                      _context3.next = 5;
                      break;
                    }

                    _context3.next = 5;
                    return (0, _effects.race)([waitForActivityId(replyToId, initialActivities), (0, _effects.call)(_sleep["default"], REPLY_TIMEOUT)]);

                  case 5:
                    _context3.next = 7;
                    return (0, _effects.put)((0, _incomingActivity["default"])(activity));

                  case 7:
                    _context3.next = 9;
                    return (0, _effects.select)((0, _activities.ofType)('message'));

                  case 9:
                    messageActivities = _context3.sent;
                    lastMessageActivity = messageActivities[messageActivities.length - 1];

                    if (!(0, _activityFromBot["default"])(lastMessageActivity)) {
                      _context3.next = 17;
                      break;
                    }

                    _lastMessageActivity$ = lastMessageActivity.suggestedActions;
                    _lastMessageActivity$ = _lastMessageActivity$ === void 0 ? {} : _lastMessageActivity$;
                    actions = _lastMessageActivity$.actions, to = _lastMessageActivity$.to; // If suggested actions is not destined to anyone, or is destined to the user, show it.
                    // In other words, if suggested actions is destined to someone else, don't show it.

                    _context3.next = 17;
                    return (0, _effects.put)((0, _setSuggestedActions["default"])(to && to.length && !to.includes(userID) ? null : actions));

                  case 17:
                  case "end":
                    return _context3.stop();
                }
              }
            }, queueIncomingActivity);
          }));

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked3);
}

function queueIncomingActivitySaga() {
  return _regenerator["default"].wrap(function queueIncomingActivitySaga$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return (0, _whileConnected["default"])(queueIncomingActivity);

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked4);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9xdWV1ZUluY29taW5nQWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbInRha2VFdmVyeUFuZFNlbGVjdCIsIndhaXRGb3JBY3Rpdml0eUlkIiwicXVldWVJbmNvbWluZ0FjdGl2aXR5IiwicXVldWVJbmNvbWluZ0FjdGl2aXR5U2FnYSIsIlJFUExZX1RJTUVPVVQiLCJhY3Rpb25UeXBlIiwic2VsZWN0b3IiLCJmbiIsImFjdGlvbiIsInN0YXRlIiwicmVwbHlUb0lkIiwiaW5pdGlhbEFjdGl2aXRpZXMiLCJhY3Rpdml0aWVzIiwicmVwbGllZCIsImZpbmQiLCJhY3Rpdml0eSIsImlkIiwiSU5DT01JTkdfQUNUSVZJVFkiLCJhY3Rpdml0aWVzU2VsZWN0b3IiLCJ1c2VySUQiLCJRVUVVRV9JTkNPTUlOR19BQ1RJVklUWSIsInBheWxvYWQiLCJzbGVlcCIsIm1lc3NhZ2VBY3Rpdml0aWVzIiwibGFzdE1lc3NhZ2VBY3Rpdml0eSIsImxlbmd0aCIsInN1Z2dlc3RlZEFjdGlvbnMiLCJhY3Rpb25zIiwidG8iLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzt3REFLVUEsa0I7eURBY0FDLGlCO3lEQWdCQUMscUI7eURBK0JlQyx5Qjs7QUFoRXpCO0FBQ0EsSUFBTUMsYUFBYSxHQUFHLElBQXRCOztBQUVBLFNBQVVKLGtCQUFWLENBQTZCSyxVQUE3QixFQUF5Q0MsUUFBekMsRUFBbURDLEVBQW5EO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBSVcsaUJBQU0seUJBQU47O0FBSlg7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUttQixpQkFBTSxtQkFBS0YsVUFBTCxDQUFOOztBQUxuQjtBQUtVRyxVQUFBQSxNQUxWO0FBQUE7QUFNa0IsaUJBQU0scUJBQU9GLFFBQVAsQ0FBTjs7QUFObEI7QUFNVUcsVUFBQUEsS0FO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YW5jZWxsZWQsIGZvcmssIHB1dCwgcmFjZSwgc2VsZWN0LCB0YWtlIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgUVVFVUVfSU5DT01JTkdfQUNUSVZJVFkgfSBmcm9tICcuLi9hY3Rpb25zL3F1ZXVlSW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgYWN0aXZpdGllc1NlbGVjdG9yLCB7IG9mVHlwZSBhcyBhY3Rpdml0aWVzT2ZUeXBlIH0gZnJvbSAnLi4vc2VsZWN0b3JzL2FjdGl2aXRpZXMnO1xuaW1wb3J0IGFjdGl2aXR5RnJvbUJvdCBmcm9tICcuLi9kZWZpbml0aW9ucy9hY3Rpdml0eUZyb21Cb3QnO1xuaW1wb3J0IGluY29taW5nQWN0aXZpdHksIHsgSU5DT01JTkdfQUNUSVZJVFkgfSBmcm9tICcuLi9hY3Rpb25zL2luY29taW5nQWN0aXZpdHknO1xuaW1wb3J0IHNldFN1Z2dlc3RlZEFjdGlvbnMgZnJvbSAnLi4vYWN0aW9ucy9zZXRTdWdnZXN0ZWRBY3Rpb25zJztcbmltcG9ydCBzbGVlcCBmcm9tICcuLi91dGlscy9zbGVlcCc7XG5pbXBvcnQgd2hpbGVDb25uZWN0ZWQgZnJvbSAnLi9lZmZlY3RzL3doaWxlQ29ubmVjdGVkJztcblxuLy8gV2Ugd2lsbCBob2xkIHVwIHRoZSByZXBseWluZyBhY3Rpdml0eSBpZiB0aGUgb3JpZ2luYXRpbmcgYWN0aXZpdHkgZGlkIG5vdCBhcnJpdmUsIHVwIHRvIDUgc2Vjb25kcy5cbmNvbnN0IFJFUExZX1RJTUVPVVQgPSA1MDAwO1xuXG5mdW5jdGlvbiogdGFrZUV2ZXJ5QW5kU2VsZWN0KGFjdGlvblR5cGUsIHNlbGVjdG9yLCBmbikge1xuICAvLyBzZWxlY3QoKSB3aWxsIGZyZWUgdXAgdGhlIGNvZGUgZXhlY3V0aW9uLlxuICAvLyBJZiB3ZSBwYWlyIHVwIHdpdGggdGFrZUV2ZXJ5KCksIGl0IHdpbGwgYWxsb3cgYWN0aW9ucyB0byBzbGlwIHRocm91Z2guXG4gIC8vIFRodXMsIHdlIGFyZSB3cml0aW5nIG9uZSB0aGF0IGRvbid0IHVzZSB0YWtlRXZlcnkoKS5cbiAgd2hpbGUgKCEoeWllbGQgY2FuY2VsbGVkKCkpKSB7XG4gICAgY29uc3QgYWN0aW9uID0geWllbGQgdGFrZShhY3Rpb25UeXBlKTtcbiAgICBjb25zdCBzdGF0ZSA9IHlpZWxkIHNlbGVjdChzZWxlY3Rvcik7XG5cbiAgICB5aWVsZCBmb3JrKGZuLCBhY3Rpb24sIHN0YXRlKTtcbiAgfVxufVxuXG4vLyBXYWl0IGZvciBzcGVjaWZpYyBhY3Rpdml0eSB0byBhcnJpdmUgaW4gdGhlIHRyYW5zY3JpcHQuXG4vLyBXZSB3aWxsIHVzZSB0aGUgaW5pdGlhbCBzZXQgb2YgYWN0aXZpdGllcyB0byBjbG9zZSB0aW1lIGdhcHMgYmV0d2VlbiBzZWxlY3QoKSBhbmQgdGFrZSgpLlxuZnVuY3Rpb24qIHdhaXRGb3JBY3Rpdml0eUlkKHJlcGx5VG9JZCwgaW5pdGlhbEFjdGl2aXRpZXMpIHtcbiAgbGV0IGFjdGl2aXRpZXMgPSBpbml0aWFsQWN0aXZpdGllcztcblxuICBmb3IgKDs7KSB7XG4gICAgY29uc3QgcmVwbGllZCA9IGFjdGl2aXRpZXMuZmluZChhY3Rpdml0eSA9PiBhY3Rpdml0eS5pZCA9PT0gcmVwbHlUb0lkKTtcblxuICAgIGlmIChyZXBsaWVkKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB5aWVsZCB0YWtlKElOQ09NSU5HX0FDVElWSVRZKTtcblxuICAgIGFjdGl2aXRpZXMgPSB5aWVsZCBzZWxlY3QoYWN0aXZpdGllc1NlbGVjdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiogcXVldWVJbmNvbWluZ0FjdGl2aXR5KHsgdXNlcklEIH0pIHtcbiAgeWllbGQgdGFrZUV2ZXJ5QW5kU2VsZWN0KFFVRVVFX0lOQ09NSU5HX0FDVElWSVRZLCBhY3Rpdml0aWVzU2VsZWN0b3IsIGZ1bmN0aW9uKiBxdWV1ZUluY29taW5nQWN0aXZpdHkoXG4gICAgeyBwYXlsb2FkOiB7IGFjdGl2aXR5IH0gfSxcbiAgICBpbml0aWFsQWN0aXZpdGllc1xuICApIHtcbiAgICAvLyBUaGlzIGlzIGZvciBhY2Nlc3NpYmlsaXR5IGlzc3VlLlxuICAgIC8vIElmIHRoZSBpbmNvbWluZyBhY3Rpdml0eSBoYXMgXCJyZXBseVRvSWRcIiBmaWVsZCwgaG9sZCBvbiBpdCB1bnRpbCB0aGUgYWN0aXZpdHkgcmVwbGllZCB0byBpcyBpbiB0aGUgdHJhbnNjcmlwdCwgdGhlbiByZWxlYXNlIHRoaXMgb25lLlxuICAgIGNvbnN0IHsgcmVwbHlUb0lkIH0gPSBhY3Rpdml0eTtcblxuICAgIGlmIChyZXBseVRvSWQpIHtcbiAgICAgIC8vIEVpdGhlciB0aGUgYWN0aXZpdHkgcmVwbGllZCB0byBpcyBpbiB0aGUgdHJhbnNjcmlwdCBvciBhZnRlciB0aW1lb3V0LlxuICAgICAgeWllbGQgcmFjZShbd2FpdEZvckFjdGl2aXR5SWQocmVwbHlUb0lkLCBpbml0aWFsQWN0aXZpdGllcyksIGNhbGwoc2xlZXAsIFJFUExZX1RJTUVPVVQpXSk7XG4gICAgfVxuXG4gICAgeWllbGQgcHV0KGluY29taW5nQWN0aXZpdHkoYWN0aXZpdHkpKTtcblxuICAgIC8vIFVwZGF0ZSBzdWdnZXN0ZWQgYWN0aW9uc1xuICAgIC8vIFRPRE86IFtQM10gV2UgY291bGQgcHV0IHRoaXMgbG9naWMgaW5zaWRlIHJlZHVjZXIgdG8gbWluaW1pemUgbnVtYmVyIG9mIGFjdGlvbnMgZGlzcGF0Y2hlZC5cbiAgICBjb25zdCBtZXNzYWdlQWN0aXZpdGllcyA9IHlpZWxkIHNlbGVjdChhY3Rpdml0aWVzT2ZUeXBlKCdtZXNzYWdlJykpO1xuICAgIGNvbnN0IGxhc3RNZXNzYWdlQWN0aXZpdHkgPSBtZXNzYWdlQWN0aXZpdGllc1ttZXNzYWdlQWN0aXZpdGllcy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChhY3Rpdml0eUZyb21Cb3QobGFzdE1lc3NhZ2VBY3Rpdml0eSkpIHtcbiAgICAgIGNvbnN0IHsgc3VnZ2VzdGVkQWN0aW9uczogeyBhY3Rpb25zLCB0byB9ID0ge30gfSA9IGxhc3RNZXNzYWdlQWN0aXZpdHk7XG5cbiAgICAgIC8vIElmIHN1Z2dlc3RlZCBhY3Rpb25zIGlzIG5vdCBkZXN0aW5lZCB0byBhbnlvbmUsIG9yIGlzIGRlc3RpbmVkIHRvIHRoZSB1c2VyLCBzaG93IGl0LlxuICAgICAgLy8gSW4gb3RoZXIgd29yZHMsIGlmIHN1Z2dlc3RlZCBhY3Rpb25zIGlzIGRlc3RpbmVkIHRvIHNvbWVvbmUgZWxzZSwgZG9uJ3Qgc2hvdyBpdC5cbiAgICAgIHlpZWxkIHB1dChzZXRTdWdnZXN0ZWRBY3Rpb25zKHRvICYmIHRvLmxlbmd0aCAmJiAhdG8uaW5jbHVkZXModXNlcklEKSA/IG51bGwgOiBhY3Rpb25zKSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHF1ZXVlSW5jb21pbmdBY3Rpdml0eVNhZ2EoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKHF1ZXVlSW5jb21pbmdBY3Rpdml0eSk7XG59XG4iXX0=