"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = speakActivityAndStartDictateOnIncomingActivityFromOthersSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _incomingActivity = require("../actions/incomingActivity");

var _DictateState = require("../constants/DictateState");

var _markActivity = _interopRequireDefault(require("../actions/markActivity"));

var _setDictateState = _interopRequireDefault(require("../actions/setDictateState"));

var _shouldSpeakIncomingActivity = _interopRequireDefault(require("../selectors/shouldSpeakIncomingActivity"));

var _speakableActivity = _interopRequireDefault(require("../definitions/speakableActivity"));

var _stopDictate = _interopRequireDefault(require("../actions/stopDictate"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(speakActivityAndStartDictateOnIncomingActivityFromOthers),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(speakActivityAndStartDictateOnIncomingActivityFromOthersSaga);

function speakActivityAndStartDictateOnIncomingActivityFromOthers(_ref) {
  var userID;
  return _regenerator["default"].wrap(function speakActivityAndStartDictateOnIncomingActivityFromOthers$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          userID = _ref.userID;
          _context2.next = 3;
          return (0, _effects.takeEvery)(function (_ref2) {
            var payload = _ref2.payload,
                type = _ref2.type;
            return (// In Direct Line, the "role" is not filled (yet), but we do know the user ID.
              // In Direct Line Speech, we do not know the user ID, but "role" is filled with "bot" or "user".
              // Here, we do two checks: the speakable activity must not have user ID, and must not have role === 'user'
              type === _incomingActivity.INCOMING_ACTIVITY && payload.activity.from.id !== userID && payload.activity.from.role !== 'user'
            );
          }, /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref3) {
            var activity, shouldSpeakIncomingActivity, shouldSpeak;
            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    activity = _ref3.payload.activity;
                    _context.next = 3;
                    return (0, _effects.select)(_shouldSpeakIncomingActivity["default"]);

                  case 3:
                    shouldSpeakIncomingActivity = _context.sent;
                    shouldSpeak = (0, _speakableActivity["default"])(activity) && shouldSpeakIncomingActivity;

                    if (!(shouldSpeak && (activity.speak || activity.text || ~(activity.attachments || []).findIndex(function (_ref4) {
                      var _ref4$content = _ref4.content;
                      _ref4$content = _ref4$content === void 0 ? {} : _ref4$content;
                      var speak = _ref4$content.speak;
                      return speak;
                    })))) {
                      _context.next = 8;
                      break;
                    }

                    _context.next = 8;
                    return (0, _effects.put)((0, _markActivity["default"])(activity, 'speak', true));

                  case 8:
                    if (!(shouldSpeak && activity.inputHint === 'expectingInput')) {
                      _context.next = 13;
                      break;
                    }

                    _context.next = 11;
                    return (0, _effects.put)((0, _setDictateState["default"])(_DictateState.WILL_START));

                  case 11:
                    _context.next = 16;
                    break;

                  case 13:
                    if (!(activity.inputHint === 'ignoringInput')) {
                      _context.next = 16;
                      break;
                    }

                    _context.next = 16;
                    return (0, _effects.put)((0, _stopDictate["default"])());

                  case 16:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function speakActivityAndStartDictateOnIncomingActivityFromOthersSaga() {
  return _regenerator["default"].wrap(function speakActivityAndStartDictateOnIncomingActivityFromOthersSaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(speakActivityAndStartDictateOnIncomingActivityFromOthers);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zcGVha0FjdGl2aXR5QW5kU3RhcnREaWN0YXRlT25JbmNvbWluZ0FjdGl2aXR5RnJvbU90aGVyc1NhZ2EuanMiXSwibmFtZXMiOlsic3BlYWtBY3Rpdml0eUFuZFN0YXJ0RGljdGF0ZU9uSW5jb21pbmdBY3Rpdml0eUZyb21PdGhlcnMiLCJzcGVha0FjdGl2aXR5QW5kU3RhcnREaWN0YXRlT25JbmNvbWluZ0FjdGl2aXR5RnJvbU90aGVyc1NhZ2EiLCJ1c2VySUQiLCJwYXlsb2FkIiwidHlwZSIsIklOQ09NSU5HX0FDVElWSVRZIiwiYWN0aXZpdHkiLCJmcm9tIiwiaWQiLCJyb2xlIiwic2hvdWxkU3BlYWtJbmNvbWluZ0FjdGl2aXR5U2VsZWN0b3IiLCJzaG91bGRTcGVha0luY29taW5nQWN0aXZpdHkiLCJzaG91bGRTcGVhayIsInNwZWFrIiwidGV4dCIsImF0dGFjaG1lbnRzIiwiZmluZEluZGV4IiwiY29udGVudCIsImlucHV0SGludCIsIldJTExfU1RBUlQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O3dEQUVVQSx3RDt5REE2QmVDLDREOztBQTdCekIsU0FBVUQsd0RBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXFFRSxVQUFBQSxNQUFyRSxRQUFxRUEsTUFBckU7QUFBQTtBQUNFLGlCQUFNLHdCQUNKO0FBQUEsZ0JBQUdDLE9BQUgsU0FBR0EsT0FBSDtBQUFBLGdCQUFZQyxJQUFaLFNBQVlBLElBQVo7QUFBQSxtQkFDRTtBQUNBO0FBQ0E7QUFDQUEsY0FBQUEsSUFBSSxLQUFLQyxtQ0FBVCxJQUE4QkYsT0FBTyxDQUFDRyxRQUFSLENBQWlCQyxJQUFqQixDQUFzQkMsRUFBdEIsS0FBNkJOLE1BQTNELElBQXFFQyxPQUFPLENBQUNHLFFBQVIsQ0FBaUJDLElBQWpCLENBQXNCRSxJQUF0QixLQUErQjtBQUp0RztBQUFBLFdBREksNENBTUo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXVCSCxvQkFBQUEsUUFBdkIsU0FBWUgsT0FBWixDQUF1QkcsUUFBdkI7QUFBQTtBQUNzQywyQkFBTSxxQkFBT0ksdUNBQVAsQ0FBTjs7QUFEdEM7QUFDUUMsb0JBQUFBLDJCQURSO0FBRVFDLG9CQUFBQSxXQUZSLEdBRXNCLG1DQUFrQk4sUUFBbEIsS0FBK0JLLDJCQUZyRDs7QUFBQSwwQkFLSUMsV0FBVyxLQUNWTixRQUFRLENBQUNPLEtBQVQsSUFDQ1AsUUFBUSxDQUFDUSxJQURWLElBRUMsQ0FBQyxDQUFDUixRQUFRLENBQUNTLFdBQVQsSUFBd0IsRUFBekIsRUFBNkJDLFNBQTdCLENBQXVDO0FBQUEsZ0RBQUdDLE9BQUg7QUFBQSxpRUFBd0IsRUFBeEI7QUFBQSwwQkFBY0osS0FBZCxpQkFBY0EsS0FBZDtBQUFBLDZCQUFpQ0EsS0FBakM7QUFBQSxxQkFBdkMsQ0FIUSxDQUxmO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBVUksMkJBQU0sa0JBQUksOEJBQWFQLFFBQWIsRUFBdUIsT0FBdkIsRUFBZ0MsSUFBaEMsQ0FBSixDQUFOOztBQVZKO0FBQUEsMEJBYU1NLFdBQVcsSUFBSU4sUUFBUSxDQUFDWSxTQUFULEtBQXVCLGdCQWI1QztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQWNJLDJCQUFNLGtCQUFJLGlDQUFnQkMsd0JBQWhCLENBQUosQ0FBTjs7QUFkSjtBQUFBO0FBQUE7O0FBQUE7QUFBQSwwQkFlYWIsUUFBUSxDQUFDWSxTQUFULEtBQXVCLGVBZnBDO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBZ0JJLDJCQUFNLGtCQUFJLDhCQUFKLENBQU47O0FBaEJKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBTkksRUFBTjs7QUFERjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUE2QmUsU0FBVWpCLDREQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiLGlCQUFNLGdDQUFlRCx3REFBZixDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6ImNvcmU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHV0LCBzZWxlY3QsIHRha2VFdmVyeSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCB7IElOQ09NSU5HX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmNvbWluZ0FjdGl2aXR5JztcbmltcG9ydCB7IFdJTExfU1RBUlQgfSBmcm9tICcuLi9jb25zdGFudHMvRGljdGF0ZVN0YXRlJztcbmltcG9ydCBtYXJrQWN0aXZpdHkgZnJvbSAnLi4vYWN0aW9ucy9tYXJrQWN0aXZpdHknO1xuaW1wb3J0IHNldERpY3RhdGVTdGF0ZSBmcm9tICcuLi9hY3Rpb25zL3NldERpY3RhdGVTdGF0ZSc7XG5pbXBvcnQgc2hvdWxkU3BlYWtJbmNvbWluZ0FjdGl2aXR5U2VsZWN0b3IgZnJvbSAnLi4vc2VsZWN0b3JzL3Nob3VsZFNwZWFrSW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgc3BlYWthYmxlQWN0aXZpdHkgZnJvbSAnLi4vZGVmaW5pdGlvbnMvc3BlYWthYmxlQWN0aXZpdHknO1xuaW1wb3J0IHN0b3BEaWN0YXRlIGZyb20gJy4uL2FjdGlvbnMvc3RvcERpY3RhdGUnO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbmZ1bmN0aW9uKiBzcGVha0FjdGl2aXR5QW5kU3RhcnREaWN0YXRlT25JbmNvbWluZ0FjdGl2aXR5RnJvbU90aGVycyh7IHVzZXJJRCB9KSB7XG4gIHlpZWxkIHRha2VFdmVyeShcbiAgICAoeyBwYXlsb2FkLCB0eXBlIH0pID0+XG4gICAgICAvLyBJbiBEaXJlY3QgTGluZSwgdGhlIFwicm9sZVwiIGlzIG5vdCBmaWxsZWQgKHlldCksIGJ1dCB3ZSBkbyBrbm93IHRoZSB1c2VyIElELlxuICAgICAgLy8gSW4gRGlyZWN0IExpbmUgU3BlZWNoLCB3ZSBkbyBub3Qga25vdyB0aGUgdXNlciBJRCwgYnV0IFwicm9sZVwiIGlzIGZpbGxlZCB3aXRoIFwiYm90XCIgb3IgXCJ1c2VyXCIuXG4gICAgICAvLyBIZXJlLCB3ZSBkbyB0d28gY2hlY2tzOiB0aGUgc3BlYWthYmxlIGFjdGl2aXR5IG11c3Qgbm90IGhhdmUgdXNlciBJRCwgYW5kIG11c3Qgbm90IGhhdmUgcm9sZSA9PT0gJ3VzZXInXG4gICAgICB0eXBlID09PSBJTkNPTUlOR19BQ1RJVklUWSAmJiBwYXlsb2FkLmFjdGl2aXR5LmZyb20uaWQgIT09IHVzZXJJRCAmJiBwYXlsb2FkLmFjdGl2aXR5LmZyb20ucm9sZSAhPT0gJ3VzZXInLFxuICAgIGZ1bmN0aW9uKih7IHBheWxvYWQ6IHsgYWN0aXZpdHkgfSB9KSB7XG4gICAgICBjb25zdCBzaG91bGRTcGVha0luY29taW5nQWN0aXZpdHkgPSB5aWVsZCBzZWxlY3Qoc2hvdWxkU3BlYWtJbmNvbWluZ0FjdGl2aXR5U2VsZWN0b3IpO1xuICAgICAgY29uc3Qgc2hvdWxkU3BlYWsgPSBzcGVha2FibGVBY3Rpdml0eShhY3Rpdml0eSkgJiYgc2hvdWxkU3BlYWtJbmNvbWluZ0FjdGl2aXR5O1xuXG4gICAgICBpZiAoXG4gICAgICAgIHNob3VsZFNwZWFrICYmXG4gICAgICAgIChhY3Rpdml0eS5zcGVhayB8fFxuICAgICAgICAgIGFjdGl2aXR5LnRleHQgfHxcbiAgICAgICAgICB+KGFjdGl2aXR5LmF0dGFjaG1lbnRzIHx8IFtdKS5maW5kSW5kZXgoKHsgY29udGVudDogeyBzcGVhayB9ID0ge30gfSkgPT4gc3BlYWspKVxuICAgICAgKSB7XG4gICAgICAgIHlpZWxkIHB1dChtYXJrQWN0aXZpdHkoYWN0aXZpdHksICdzcGVhaycsIHRydWUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFNwZWFrICYmIGFjdGl2aXR5LmlucHV0SGludCA9PT0gJ2V4cGVjdGluZ0lucHV0Jykge1xuICAgICAgICB5aWVsZCBwdXQoc2V0RGljdGF0ZVN0YXRlKFdJTExfU1RBUlQpKTtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aXZpdHkuaW5wdXRIaW50ID09PSAnaWdub3JpbmdJbnB1dCcpIHtcbiAgICAgICAgeWllbGQgcHV0KHN0b3BEaWN0YXRlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24qIHNwZWFrQWN0aXZpdHlBbmRTdGFydERpY3RhdGVPbkluY29taW5nQWN0aXZpdHlGcm9tT3RoZXJzU2FnYSgpIHtcbiAgeWllbGQgd2hpbGVDb25uZWN0ZWQoc3BlYWtBY3Rpdml0eUFuZFN0YXJ0RGljdGF0ZU9uSW5jb21pbmdBY3Rpdml0eUZyb21PdGhlcnMpO1xufVxuIl19