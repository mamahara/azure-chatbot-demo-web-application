"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = observeActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _observeEach = _interopRequireDefault(require("./effects/observeEach"));

var _queueIncomingActivity = _interopRequireDefault(require("../actions/queueIncomingActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(observeActivity),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(observeActivitySaga);

var PASSTHRU_FN = function PASSTHRU_FN(value) {
  return value;
};

function patchActivityWithFromRole(activity, userID) {
  // Some activities, such as "ConversationUpdate", does not have "from" defined.
  // And although "role" is defined in Direct Line spec, it was not sent over the wire.
  // We normalize the activity here to simplify null-check and logic later.
  // Patch activity.from.role to make sure its either "bot", "user", or "channel"
  if (!activity.from) {
    activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
      return 'channel';
    });
  } else if (!activity.from.role) {
    if (activity.from.id === userID) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'user';
      });
    } else if (activity.from.id) {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'bot';
      });
    } else {
      activity = (0, _simpleUpdateIn["default"])(activity, ['from', 'role'], function () {
        return 'channel';
      });
    }
  }

  return activity;
}

function patchNullAsUndefined(activity) {
  // These fields are known used in Web Chat and in any cases, they should not be null, but undefined.
  // The only field omitted is "value", as it could be null purposefully.
  return ['attachmentLayout', 'attachments', 'channelData', 'conversation', 'entities', 'from', 'inputHint', 'locale', 'name', 'recipient', 'speak', 'suggestedActions', 'text', 'textFormat', 'timestamp', 'type'].reduce(function (activity, name) {
    var value = activity[name];
    return (0, _simpleUpdateIn["default"])(activity, [name], typeof value === 'undefined' || value === null ? undefined : PASSTHRU_FN);
  }, activity);
}

function observeActivity(_ref) {
  var directLine, userID;
  return _regenerator["default"].wrap(function observeActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          directLine = _ref.directLine, userID = _ref.userID;
          _context2.next = 3;
          return (0, _observeEach["default"])(directLine.activity$, /*#__PURE__*/_regenerator["default"].mark(function observeActivity(activity) {
            return _regenerator["default"].wrap(function observeActivity$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    activity = patchNullAsUndefined(activity);
                    activity = patchActivityWithFromRole(activity, userID);
                    _context.next = 4;
                    return (0, _effects.put)((0, _queueIncomingActivity["default"])(activity));

                  case 4:
                  case "end":
                    return _context.stop();
                }
              }
            }, observeActivity);
          }));

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked);
}

function observeActivitySaga() {
  return _regenerator["default"].wrap(function observeActivitySaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _whileConnected["default"])(observeActivity);

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9vYnNlcnZlQWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbIm9ic2VydmVBY3Rpdml0eSIsIm9ic2VydmVBY3Rpdml0eVNhZ2EiLCJQQVNTVEhSVV9GTiIsInZhbHVlIiwicGF0Y2hBY3Rpdml0eVdpdGhGcm9tUm9sZSIsImFjdGl2aXR5IiwidXNlcklEIiwiZnJvbSIsInJvbGUiLCJpZCIsInBhdGNoTnVsbEFzVW5kZWZpbmVkIiwicmVkdWNlIiwibmFtZSIsInVuZGVmaW5lZCIsImRpcmVjdExpbmUiLCJhY3Rpdml0eSQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O3dEQXFEVUEsZTt5REFTZUMsbUI7O0FBNUR6QixJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSjtBQUFBLENBQXpCOztBQUVBLFNBQVNDLHlCQUFULENBQW1DQyxRQUFuQyxFQUE2Q0MsTUFBN0MsRUFBcUQ7QUFDbkQ7QUFDQTtBQUNBO0FBRUE7QUFDQSxNQUFJLENBQUNELFFBQVEsQ0FBQ0UsSUFBZCxFQUFvQjtBQUNsQkYsSUFBQUEsUUFBUSxHQUFHLGdDQUFTQSxRQUFULEVBQW1CLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBbkIsRUFBcUM7QUFBQSxhQUFNLFNBQU47QUFBQSxLQUFyQyxDQUFYO0FBQ0QsR0FGRCxNQUVPLElBQUksQ0FBQ0EsUUFBUSxDQUFDRSxJQUFULENBQWNDLElBQW5CLEVBQXlCO0FBQzlCLFFBQUlILFFBQVEsQ0FBQ0UsSUFBVCxDQUFjRSxFQUFkLEtBQXFCSCxNQUF6QixFQUFpQztBQUMvQkQsTUFBQUEsUUFBUSxHQUFHLGdDQUFTQSxRQUFULEVBQW1CLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBbkIsRUFBcUM7QUFBQSxlQUFNLE1BQU47QUFBQSxPQUFyQyxDQUFYO0FBQ0QsS0FGRCxNQUVPLElBQUlBLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjRSxFQUFsQixFQUFzQjtBQUMzQkosTUFBQUEsUUFBUSxHQUFHLGdDQUFTQSxRQUFULEVBQW1CLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FBbkIsRUFBcUM7QUFBQSxlQUFNLEtBQU47QUFBQSxPQUFyQyxDQUFYO0FBQ0QsS0FGTSxNQUVBO0FBQ0xBLE1BQUFBLFFBQVEsR0FBRyxnQ0FBU0EsUUFBVCxFQUFtQixDQUFDLE1BQUQsRUFBUyxNQUFULENBQW5CLEVBQXFDO0FBQUEsZUFBTSxTQUFOO0FBQUEsT0FBckMsQ0FBWDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsUUFBUDtBQUNEOztBQUVELFNBQVNLLG9CQUFULENBQThCTCxRQUE5QixFQUF3QztBQUN0QztBQUNBO0FBRUEsU0FBTyxDQUNMLGtCQURLLEVBRUwsYUFGSyxFQUdMLGFBSEssRUFJTCxjQUpLLEVBS0wsVUFMSyxFQU1MLE1BTkssRUFPTCxXQVBLLEVBUUwsUUFSSyxFQVNMLE1BVEssRUFVTCxXQVZLLEVBV0wsT0FYSyxFQVlMLGtCQVpLLEVBYUwsTUFiSyxFQWNMLFlBZEssRUFlTCxXQWZLLEVBZ0JMLE1BaEJLLEVBaUJMTSxNQWpCSyxDQWlCRSxVQUFDTixRQUFELEVBQVdPLElBQVgsRUFBb0I7QUFBQSxRQUNYVCxLQURXLEdBQ0RFLFFBREMsQ0FDbEJPLElBRGtCO0FBRzNCLFdBQU8sZ0NBQVNQLFFBQVQsRUFBbUIsQ0FBQ08sSUFBRCxDQUFuQixFQUEyQixPQUFPVCxLQUFQLEtBQWlCLFdBQWpCLElBQWdDQSxLQUFLLEtBQUssSUFBMUMsR0FBaURVLFNBQWpELEdBQTZEWCxXQUF4RixDQUFQO0FBQ0QsR0FyQk0sRUFxQkpHLFFBckJJLENBQVA7QUFzQkQ7O0FBRUQsU0FBVUwsZUFBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNEJjLFVBQUFBLFVBQTVCLFFBQTRCQSxVQUE1QixFQUF3Q1IsTUFBeEMsUUFBd0NBLE1BQXhDO0FBQUE7QUFDRSxpQkFBTSw2QkFBWVEsVUFBVSxDQUFDQyxTQUF2Qiw0Q0FBa0MsU0FBVWYsZUFBVixDQUEwQkssUUFBMUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUN0Q0Esb0JBQUFBLFFBQVEsR0FBR0ssb0JBQW9CLENBQUNMLFFBQUQsQ0FBL0I7QUFDQUEsb0JBQUFBLFFBQVEsR0FBR0QseUJBQXlCLENBQUNDLFFBQUQsRUFBV0MsTUFBWCxDQUFwQztBQUZzQztBQUl0QywyQkFBTSxrQkFBSSx1Q0FBc0JELFFBQXRCLENBQUosQ0FBTjs7QUFKc0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBQVVMLGVBQVY7QUFBQSxXQUFsQyxFQUFOOztBQURGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQVNlLFNBQVVDLG1CQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNiLGlCQUFNLGdDQUFlRCxlQUFmLENBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiY29yZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwdXQgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0IHVwZGF0ZUluIGZyb20gJ3NpbXBsZS11cGRhdGUtaW4nO1xuXG5pbXBvcnQgb2JzZXJ2ZUVhY2ggZnJvbSAnLi9lZmZlY3RzL29ic2VydmVFYWNoJztcbmltcG9ydCBxdWV1ZUluY29taW5nQWN0aXZpdHkgZnJvbSAnLi4vYWN0aW9ucy9xdWV1ZUluY29taW5nQWN0aXZpdHknO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbmNvbnN0IFBBU1NUSFJVX0ZOID0gdmFsdWUgPT4gdmFsdWU7XG5cbmZ1bmN0aW9uIHBhdGNoQWN0aXZpdHlXaXRoRnJvbVJvbGUoYWN0aXZpdHksIHVzZXJJRCkge1xuICAvLyBTb21lIGFjdGl2aXRpZXMsIHN1Y2ggYXMgXCJDb252ZXJzYXRpb25VcGRhdGVcIiwgZG9lcyBub3QgaGF2ZSBcImZyb21cIiBkZWZpbmVkLlxuICAvLyBBbmQgYWx0aG91Z2ggXCJyb2xlXCIgaXMgZGVmaW5lZCBpbiBEaXJlY3QgTGluZSBzcGVjLCBpdCB3YXMgbm90IHNlbnQgb3ZlciB0aGUgd2lyZS5cbiAgLy8gV2Ugbm9ybWFsaXplIHRoZSBhY3Rpdml0eSBoZXJlIHRvIHNpbXBsaWZ5IG51bGwtY2hlY2sgYW5kIGxvZ2ljIGxhdGVyLlxuXG4gIC8vIFBhdGNoIGFjdGl2aXR5LmZyb20ucm9sZSB0byBtYWtlIHN1cmUgaXRzIGVpdGhlciBcImJvdFwiLCBcInVzZXJcIiwgb3IgXCJjaGFubmVsXCJcbiAgaWYgKCFhY3Rpdml0eS5mcm9tKSB7XG4gICAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydmcm9tJywgJ3JvbGUnXSwgKCkgPT4gJ2NoYW5uZWwnKTtcbiAgfSBlbHNlIGlmICghYWN0aXZpdHkuZnJvbS5yb2xlKSB7XG4gICAgaWYgKGFjdGl2aXR5LmZyb20uaWQgPT09IHVzZXJJRCkge1xuICAgICAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydmcm9tJywgJ3JvbGUnXSwgKCkgPT4gJ3VzZXInKTtcbiAgICB9IGVsc2UgaWYgKGFjdGl2aXR5LmZyb20uaWQpIHtcbiAgICAgIGFjdGl2aXR5ID0gdXBkYXRlSW4oYWN0aXZpdHksIFsnZnJvbScsICdyb2xlJ10sICgpID0+ICdib3QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZpdHkgPSB1cGRhdGVJbihhY3Rpdml0eSwgWydmcm9tJywgJ3JvbGUnXSwgKCkgPT4gJ2NoYW5uZWwnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYWN0aXZpdHk7XG59XG5cbmZ1bmN0aW9uIHBhdGNoTnVsbEFzVW5kZWZpbmVkKGFjdGl2aXR5KSB7XG4gIC8vIFRoZXNlIGZpZWxkcyBhcmUga25vd24gdXNlZCBpbiBXZWIgQ2hhdCBhbmQgaW4gYW55IGNhc2VzLCB0aGV5IHNob3VsZCBub3QgYmUgbnVsbCwgYnV0IHVuZGVmaW5lZC5cbiAgLy8gVGhlIG9ubHkgZmllbGQgb21pdHRlZCBpcyBcInZhbHVlXCIsIGFzIGl0IGNvdWxkIGJlIG51bGwgcHVycG9zZWZ1bGx5LlxuXG4gIHJldHVybiBbXG4gICAgJ2F0dGFjaG1lbnRMYXlvdXQnLFxuICAgICdhdHRhY2htZW50cycsXG4gICAgJ2NoYW5uZWxEYXRhJyxcbiAgICAnY29udmVyc2F0aW9uJyxcbiAgICAnZW50aXRpZXMnLFxuICAgICdmcm9tJyxcbiAgICAnaW5wdXRIaW50JyxcbiAgICAnbG9jYWxlJyxcbiAgICAnbmFtZScsXG4gICAgJ3JlY2lwaWVudCcsXG4gICAgJ3NwZWFrJyxcbiAgICAnc3VnZ2VzdGVkQWN0aW9ucycsXG4gICAgJ3RleHQnLFxuICAgICd0ZXh0Rm9ybWF0JyxcbiAgICAndGltZXN0YW1wJyxcbiAgICAndHlwZSdcbiAgXS5yZWR1Y2UoKGFjdGl2aXR5LCBuYW1lKSA9PiB7XG4gICAgY29uc3QgeyBbbmFtZV06IHZhbHVlIH0gPSBhY3Rpdml0eTtcblxuICAgIHJldHVybiB1cGRhdGVJbihhY3Rpdml0eSwgW25hbWVdLCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsID8gdW5kZWZpbmVkIDogUEFTU1RIUlVfRk4pO1xuICB9LCBhY3Rpdml0eSk7XG59XG5cbmZ1bmN0aW9uKiBvYnNlcnZlQWN0aXZpdHkoeyBkaXJlY3RMaW5lLCB1c2VySUQgfSkge1xuICB5aWVsZCBvYnNlcnZlRWFjaChkaXJlY3RMaW5lLmFjdGl2aXR5JCwgZnVuY3Rpb24qIG9ic2VydmVBY3Rpdml0eShhY3Rpdml0eSkge1xuICAgIGFjdGl2aXR5ID0gcGF0Y2hOdWxsQXNVbmRlZmluZWQoYWN0aXZpdHkpO1xuICAgIGFjdGl2aXR5ID0gcGF0Y2hBY3Rpdml0eVdpdGhGcm9tUm9sZShhY3Rpdml0eSwgdXNlcklEKTtcblxuICAgIHlpZWxkIHB1dChxdWV1ZUluY29taW5nQWN0aXZpdHkoYWN0aXZpdHkpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBvYnNlcnZlQWN0aXZpdHlTYWdhKCkge1xuICB5aWVsZCB3aGlsZUNvbm5lY3RlZChvYnNlcnZlQWN0aXZpdHkpO1xufVxuIl19