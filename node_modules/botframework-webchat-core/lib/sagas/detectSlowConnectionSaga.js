"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = detectSlowConnectionSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _connect = require("../actions/connect");

var _reconnect = require("../actions/reconnect");

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(detectSlowConnectionSaga);

var SLOW_CONNECTION_AFTER = 15000;

function detectSlowConnectionSaga() {
  var connectivityRace;
  return _regenerator["default"].wrap(function detectSlowConnectionSaga$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.take)([_connect.CONNECT_PENDING, _reconnect.RECONNECT_PENDING]);

        case 2:
          _context.next = 4;
          return (0, _effects.race)({
            fulfilled: (0, _effects.take)([_connect.CONNECT_FULFILLED, _reconnect.RECONNECT_FULFILLED]),
            rejected: (0, _effects.take)([_connect.CONNECT_REJECTED, _reconnect.RECONNECT_REJECTED]),
            slow: (0, _effects.call)(function () {
              return (0, _sleep["default"])(SLOW_CONNECTION_AFTER);
            })
          });

        case 4:
          connectivityRace = _context.sent;

          if (!('slow' in connectivityRace)) {
            _context.next = 8;
            break;
          }

          _context.next = 8;
          return (0, _effects.put)({
            type: _connect.CONNECT_STILL_PENDING
          });

        case 8:
          _context.next = 0;
          break;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9kZXRlY3RTbG93Q29ubmVjdGlvblNhZ2EuanMiXSwibmFtZXMiOlsiZGV0ZWN0U2xvd0Nvbm5lY3Rpb25TYWdhIiwiU0xPV19DT05ORUNUSU9OX0FGVEVSIiwiQ09OTkVDVF9QRU5ESU5HIiwiUkVDT05ORUNUX1BFTkRJTkciLCJmdWxmaWxsZWQiLCJDT05ORUNUX0ZVTEZJTExFRCIsIlJFQ09OTkVDVF9GVUxGSUxMRUQiLCJyZWplY3RlZCIsIkNPTk5FQ1RfUkVKRUNURUQiLCJSRUNPTk5FQ1RfUkVKRUNURUQiLCJzbG93IiwiY29ubmVjdGl2aXR5UmFjZSIsInR5cGUiLCJDT05ORUNUX1NUSUxMX1BFTkRJTkciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7O0FBQ0E7O3dEQUl5QkEsd0I7O0FBRnpCLElBQU1DLHFCQUFxQixHQUFHLEtBQTlCOztBQUVlLFNBQVVELHdCQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRVgsaUJBQU0sbUJBQUssQ0FBQ0Usd0JBQUQsRUFBa0JDLDRCQUFsQixDQUFMLENBQU47O0FBRlc7QUFBQTtBQUljLGlCQUFNLG1CQUFLO0FBQ2xDQyxZQUFBQSxTQUFTLEVBQUUsbUJBQUssQ0FBQ0MsMEJBQUQsRUFBb0JDLDhCQUFwQixDQUFMLENBRHVCO0FBRWxDQyxZQUFBQSxRQUFRLEVBQUUsbUJBQUssQ0FBQ0MseUJBQUQsRUFBbUJDLDZCQUFuQixDQUFMLENBRndCO0FBR2xDQyxZQUFBQSxJQUFJLEVBQUUsbUJBQUs7QUFBQSxxQkFBTSx1QkFBTVQscUJBQU4sQ0FBTjtBQUFBLGFBQUw7QUFINEIsV0FBTCxDQUFOOztBQUpkO0FBSUxVLFVBQUFBLGdCQUpLOztBQUFBLGdCQVVQLFVBQVVBLGdCQVZIO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBV1QsaUJBQU0sa0JBQUk7QUFBRUMsWUFBQUEsSUFBSSxFQUFFQztBQUFSLFdBQUosQ0FBTjs7QUFYUztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiY29yZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsLCBwdXQsIHJhY2UsIHRha2UgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBDT05ORUNUX0ZVTEZJTExFRCwgQ09OTkVDVF9QRU5ESU5HLCBDT05ORUNUX1JFSkVDVEVELCBDT05ORUNUX1NUSUxMX1BFTkRJTkcgfSBmcm9tICcuLi9hY3Rpb25zL2Nvbm5lY3QnO1xuXG5pbXBvcnQgeyBSRUNPTk5FQ1RfRlVMRklMTEVELCBSRUNPTk5FQ1RfUEVORElORywgUkVDT05ORUNUX1JFSkVDVEVEIH0gZnJvbSAnLi4vYWN0aW9ucy9yZWNvbm5lY3QnO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcblxuY29uc3QgU0xPV19DT05ORUNUSU9OX0FGVEVSID0gMTUwMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBkZXRlY3RTbG93Q29ubmVjdGlvblNhZ2EoKSB7XG4gIGZvciAoOzspIHtcbiAgICB5aWVsZCB0YWtlKFtDT05ORUNUX1BFTkRJTkcsIFJFQ09OTkVDVF9QRU5ESU5HXSk7XG5cbiAgICBjb25zdCBjb25uZWN0aXZpdHlSYWNlID0geWllbGQgcmFjZSh7XG4gICAgICBmdWxmaWxsZWQ6IHRha2UoW0NPTk5FQ1RfRlVMRklMTEVELCBSRUNPTk5FQ1RfRlVMRklMTEVEXSksXG4gICAgICByZWplY3RlZDogdGFrZShbQ09OTkVDVF9SRUpFQ1RFRCwgUkVDT05ORUNUX1JFSkVDVEVEXSksXG4gICAgICBzbG93OiBjYWxsKCgpID0+IHNsZWVwKFNMT1dfQ09OTkVDVElPTl9BRlRFUikpXG4gICAgfSk7XG5cbiAgICBpZiAoJ3Nsb3cnIGluIGNvbm5lY3Rpdml0eVJhY2UpIHtcbiAgICAgIHlpZWxkIHB1dCh7IHR5cGU6IENPTk5FQ1RfU1RJTExfUEVORElORyB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==