"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = sendTypingIndicatorOnSetSendBoxSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _setSendBox = require("../actions/setSendBox");

var _setSendTypingIndicator = require("../actions/setSendTypingIndicator");

var _postActivity = require("../actions/postActivity");

var _emitTypingIndicator = _interopRequireDefault(require("../actions/emitTypingIndicator"));

var _sendTypingIndicator = _interopRequireDefault(require("../selectors/sendTypingIndicator"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(sendTypingIndicatorOnSetSendBox),
    _marked2 = /*#__PURE__*/_regenerator["default"].mark(sendTypingIndicatorOnSetSendBoxSaga);

var SEND_INTERVAL = 3000;

function takeSendTypingIndicator(value) {
  return (0, _effects.take)(function (_ref) {
    var payload = _ref.payload,
        type = _ref.type;
    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value;
  });
}

function sendTypingIndicatorOnSetSendBox() {
  var sendTypingIndicator, _loop;

  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBox$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.select)(_sendTypingIndicator["default"]);

        case 2:
          sendTypingIndicator = _context3.sent;

          if (sendTypingIndicator) {
            _context3.next = 6;
            break;
          }

          _context3.next = 6;
          return takeSendTypingIndicator(true);

        case 6:
          _loop = /*#__PURE__*/_regenerator["default"].mark(function _loop() {
            var lastSend, task;
            return _regenerator["default"].wrap(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    lastSend = -Infinity;
                    _context2.next = 3;
                    return (0, _effects.takeLatest)(function (_ref2) {
                      var payload = _ref2.payload,
                          type = _ref2.type;
                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.
                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).
                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.
                      // This code is to cancel the typing indicator at t = 3000.
                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';
                    }, /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref3) {
                      var payload, type, interval;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              payload = _ref3.payload, type = _ref3.type;

                              if (!(type === _setSendBox.SET_SEND_BOX)) {
                                _context.next = 11;
                                break;
                              }

                              interval = SEND_INTERVAL - Date.now() + lastSend;

                              if (!(interval > 0)) {
                                _context.next = 6;
                                break;
                              }

                              _context.next = 6;
                              return (0, _effects.call)(_sleep["default"], interval);

                            case 6:
                              _context.next = 8;
                              return (0, _effects.put)((0, _emitTypingIndicator["default"])());

                            case 8:
                              lastSend = Date.now();
                              _context.next = 12;
                              break;

                            case 11:
                              if (payload.activity.type === 'message') {
                                lastSend = -Infinity;
                              }

                            case 12:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                  case 3:
                    task = _context2.sent;
                    _context2.next = 6;
                    return takeSendTypingIndicator(false);

                  case 6:
                    _context2.next = 8;
                    return (0, _effects.cancel)(task);

                  case 8:
                    _context2.next = 10;
                    return takeSendTypingIndicator(true);

                  case 10:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _loop);
          });

        case 7:
          return _context3.delegateYield(_loop(), "t0", 8);

        case 8:
          _context3.next = 7;
          break;

        case 10:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked);
}

function sendTypingIndicatorOnSetSendBoxSaga() {
  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBoxSaga$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return (0, _whileConnected["default"])(sendTypingIndicatorOnSetSendBox);

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94U2FnYS5qcyJdLCJuYW1lcyI6WyJzZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94Iiwic2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EiLCJTRU5EX0lOVEVSVkFMIiwidGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IiLCJ2YWx1ZSIsInBheWxvYWQiLCJ0eXBlIiwiU0VUX1NFTkRfVFlQSU5HX0lORElDQVRPUiIsInNlbmRUeXBpbmdJbmRpY2F0b3IiLCJzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IiLCJsYXN0U2VuZCIsIkluZmluaXR5IiwiU0VUX1NFTkRfQk9YIiwidGV4dCIsIlBPU1RfQUNUSVZJVFkiLCJhY3Rpdml0eSIsImludGVydmFsIiwiRGF0ZSIsIm5vdyIsInNsZWVwIiwidGFzayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFHQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7d0RBUVVBLCtCO3lEQXdDZUMsbUM7O0FBOUN6QixJQUFNQyxhQUFhLEdBQUcsSUFBdEI7O0FBRUEsU0FBU0MsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDO0FBQ3RDLFNBQU8sbUJBQUs7QUFBQSxRQUFHQyxPQUFILFFBQUdBLE9BQUg7QUFBQSxRQUFZQyxJQUFaLFFBQVlBLElBQVo7QUFBQSxXQUF1QkEsSUFBSSxLQUFLQyxpREFBVCxJQUFzQyxDQUFDRixPQUFPLENBQUNHLG1CQUFULEtBQWlDLENBQUNKLEtBQS9GO0FBQUEsR0FBTCxDQUFQO0FBQ0Q7O0FBRUQsU0FBVUosK0JBQVY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzhCLGlCQUFNLHFCQUFPUywrQkFBUCxDQUFOOztBQUQ5QjtBQUNRRCxVQUFBQSxtQkFEUjs7QUFBQSxjQUdPQSxtQkFIUDtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUlJLGlCQUFNTCx1QkFBdUIsQ0FBQyxJQUFELENBQTdCOztBQUpKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBUVFPLG9CQUFBQSxRQVJSLEdBUW1CLENBQUNDLFFBUnBCO0FBQUE7QUFTaUIsMkJBQU0seUJBQ2pCO0FBQUEsMEJBQUdOLE9BQUgsU0FBR0EsT0FBSDtBQUFBLDBCQUFZQyxJQUFaLFNBQVlBLElBQVo7QUFBQSw2QkFDR0EsSUFBSSxLQUFLTSx3QkFBVCxJQUF5QlAsT0FBTyxDQUFDUSxJQUFsQyxJQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0NQLHNCQUFBQSxJQUFJLEtBQUtRLDJCQUFULElBQTBCVCxPQUFPLENBQUNVLFFBQVIsQ0FBaUJULElBQWpCLEtBQTBCLFFBTnZEO0FBQUEscUJBRGlCLDRDQVFqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBWUQsOEJBQUFBLE9BQVosU0FBWUEsT0FBWixFQUFxQkMsSUFBckIsU0FBcUJBLElBQXJCOztBQUFBLG9DQUNNQSxJQUFJLEtBQUtNLHdCQURmO0FBQUE7QUFBQTtBQUFBOztBQUVVSSw4QkFBQUEsUUFGVixHQUVxQmQsYUFBYSxHQUFHZSxJQUFJLENBQUNDLEdBQUwsRUFBaEIsR0FBNkJSLFFBRmxEOztBQUFBLG9DQUlRTSxRQUFRLEdBQUcsQ0FKbkI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFLTSxxQ0FBTSxtQkFBS0csaUJBQUwsRUFBWUgsUUFBWixDQUFOOztBQUxOO0FBQUE7QUFRSSxxQ0FBTSxrQkFBSSxzQ0FBSixDQUFOOztBQVJKO0FBVUlOLDhCQUFBQSxRQUFRLEdBQUdPLElBQUksQ0FBQ0MsR0FBTCxFQUFYO0FBVko7QUFBQTs7QUFBQTtBQVdTLGtDQUFJYixPQUFPLENBQUNVLFFBQVIsQ0FBaUJULElBQWpCLEtBQTBCLFNBQTlCLEVBQXlDO0FBQzlDSSxnQ0FBQUEsUUFBUSxHQUFHLENBQUNDLFFBQVo7QUFDRDs7QUFiSDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQkFSaUIsRUFBTjs7QUFUakI7QUFTVVMsb0JBQUFBLElBVFY7QUFBQTtBQWtDSSwyQkFBTWpCLHVCQUF1QixDQUFDLEtBQUQsQ0FBN0I7O0FBbENKO0FBQUE7QUFtQ0ksMkJBQU0scUJBQU9pQixJQUFQLENBQU47O0FBbkNKO0FBQUE7QUFvQ0ksMkJBQU1qQix1QkFBdUIsQ0FBQyxJQUFELENBQTdCOztBQXBDSjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUF3Q2UsU0FBVUYsbUNBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU0sZ0NBQWVELCtCQUFmLENBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiY29yZTovLy8iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSB3aWxsIHJldmlzaXQgdGhpcyBsb2dpYyBpbiAjMjE1NyBhbmQgc2hvdWxkIHJlbW92ZSB0aGUgZm9sbG93aW5nIGVzbGludCBpZ25vcmVcbi8qIGVzbGludCByZXF1aXJlLWF0b21pYy11cGRhdGVzOiBcIm9mZlwiICovXG5cbmltcG9ydCB7IGNhbGwsIGNhbmNlbCwgcHV0LCBzZWxlY3QsIHRha2UsIHRha2VMYXRlc3QgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBTRVRfU0VORF9CT1ggfSBmcm9tICcuLi9hY3Rpb25zL3NldFNlbmRCb3gnO1xuaW1wb3J0IHsgU0VUX1NFTkRfVFlQSU5HX0lORElDQVRPUiB9IGZyb20gJy4uL2FjdGlvbnMvc2V0U2VuZFR5cGluZ0luZGljYXRvcic7XG5pbXBvcnQgeyBQT1NUX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9wb3N0QWN0aXZpdHknO1xuaW1wb3J0IGVtaXRUeXBpbmdJbmRpY2F0b3IgZnJvbSAnLi4vYWN0aW9ucy9lbWl0VHlwaW5nSW5kaWNhdG9yJztcbmltcG9ydCBzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IgZnJvbSAnLi4vc2VsZWN0b3JzL3NlbmRUeXBpbmdJbmRpY2F0b3InO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcbmltcG9ydCB3aGlsZUNvbm5lY3RlZCBmcm9tICcuL2VmZmVjdHMvd2hpbGVDb25uZWN0ZWQnO1xuXG5jb25zdCBTRU5EX0lOVEVSVkFMID0gMzAwMDtcblxuZnVuY3Rpb24gdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IodmFsdWUpIHtcbiAgcmV0dXJuIHRha2UoKHsgcGF5bG9hZCwgdHlwZSB9KSA9PiB0eXBlID09PSBTRVRfU0VORF9UWVBJTkdfSU5ESUNBVE9SICYmICFwYXlsb2FkLnNlbmRUeXBpbmdJbmRpY2F0b3IgPT09ICF2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uKiBzZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94KCkge1xuICBjb25zdCBzZW5kVHlwaW5nSW5kaWNhdG9yID0geWllbGQgc2VsZWN0KHNlbmRUeXBpbmdJbmRpY2F0b3JTZWxlY3Rvcik7XG5cbiAgaWYgKCFzZW5kVHlwaW5nSW5kaWNhdG9yKSB7XG4gICAgeWllbGQgdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IodHJ1ZSk7XG4gIH1cblxuICBmb3IgKDs7KSB7XG4gICAgbGV0IGxhc3RTZW5kID0gLUluZmluaXR5O1xuICAgIGNvbnN0IHRhc2sgPSB5aWVsZCB0YWtlTGF0ZXN0KFxuICAgICAgKHsgcGF5bG9hZCwgdHlwZSB9KSA9PlxuICAgICAgICAodHlwZSA9PT0gU0VUX1NFTkRfQk9YICYmIHBheWxvYWQudGV4dCkgfHxcbiAgICAgICAgLy8gU3RvcCBzZW5kaW5nIHBlbmRpbmcgdHlwaW5nIGluZGljYXRvciBpZiB0aGUgdXNlciBoYXMgcG9zdGVkIGFueXRoaW5nLlxuICAgICAgICAvLyBXZSBzZW5kIHR5cGluZyBpbmRpY2F0b3IgaW4gYSBkZWJvdW5jZSB3YXkgKHQgPSAwLCB0ID0gMzAwMCwgdCA9IDYwMDApLlxuICAgICAgICAvLyBXaGVuIHRoZSB1c2VyIHR5cGUsIGFuZCB0aGVuIHBvc3QgdGhlIGFjdGl2aXR5IGF0IHQgPSAxNTAwLCB3ZSBzdGlsbCBoYXZlIGEgcGVuZGluZyB0eXBpbmcgaW5kaWNhdG9yIGF0IHQgPSAzMDAwLlxuICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdG8gY2FuY2VsIHRoZSB0eXBpbmcgaW5kaWNhdG9yIGF0IHQgPSAzMDAwLlxuICAgICAgICAodHlwZSA9PT0gUE9TVF9BQ1RJVklUWSAmJiBwYXlsb2FkLmFjdGl2aXR5LnR5cGUgIT09ICd0eXBpbmcnKSxcbiAgICAgIGZ1bmN0aW9uKih7IHBheWxvYWQsIHR5cGUgfSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gU0VUX1NFTkRfQk9YKSB7XG4gICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBTRU5EX0lOVEVSVkFMIC0gRGF0ZS5ub3coKSArIGxhc3RTZW5kO1xuXG4gICAgICAgICAgaWYgKGludGVydmFsID4gMCkge1xuICAgICAgICAgICAgeWllbGQgY2FsbChzbGVlcCwgaW50ZXJ2YWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHlpZWxkIHB1dChlbWl0VHlwaW5nSW5kaWNhdG9yKCkpO1xuXG4gICAgICAgICAgbGFzdFNlbmQgPSBEYXRlLm5vdygpO1xuICAgICAgICB9IGVsc2UgaWYgKHBheWxvYWQuYWN0aXZpdHkudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgbGFzdFNlbmQgPSAtSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgeWllbGQgdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgIHlpZWxkIGNhbmNlbCh0YXNrKTtcbiAgICB5aWVsZCB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih0cnVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogc2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3gpO1xufVxuIl19