"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = activities;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _deleteActivity = require("../actions/deleteActivity");

var _incomingActivity = require("../actions/incomingActivity");

var _markActivity = require("../actions/markActivity");

var _postActivity = require("../actions/postActivity");

var _ActivityClientState = require("../constants/ActivityClientState");

/* eslint no-magic-numbers: ["error", { "ignore": [0, -1] }] */
var DEFAULT_STATE = [];
var DIRECT_LINE_PLACEHOLDER_URL = 'https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png';

function getClientActivityID(_ref) {
  var _ref$channelData = _ref.channelData;
  _ref$channelData = _ref$channelData === void 0 ? {} : _ref$channelData;
  var clientActivityID = _ref$channelData.clientActivityID;
  return clientActivityID;
}

function findByClientActivityID(clientActivityID) {
  return function (activity) {
    return getClientActivityID(activity) === clientActivityID;
  };
}

function patchActivity(activity) {
  // Direct Line channel will return a placeholder image for the user-uploaded image.
  // As observed, the URL for the placeholder image is https://docs.botframework.com/static/devportal/client/images/bot-framework-default-placeholder.png.
  // To make our code simpler, we are removing the value if "contentUrl" is pointing to a placeholder image.
  // TODO: [P2] #2869 This "contentURL" removal code should be moved to DirectLineJS adapter.
  // Also, if the "contentURL" starts with "blob:", this means the user is uploading a file (the URL is constructed by URL.createObjectURL)
  // Although the copy/reference of the file is temporary in-memory, to make the UX consistent across page refresh, we do not allow the user to re-download the file either.
  return (0, _simpleUpdateIn["default"])(activity, ['attachments', function () {
    return true;
  }, 'contentUrl'], function (contentUrl) {
    if (contentUrl !== DIRECT_LINE_PLACEHOLDER_URL && !/^blob:/i.test(contentUrl)) {
      return contentUrl;
    }
  });
}

function upsertActivityWithSort(activities, nextActivity) {
  nextActivity = patchActivity(nextActivity);
  var _nextActivity = nextActivity,
      _nextActivity$channel = _nextActivity.channelData;
  _nextActivity$channel = _nextActivity$channel === void 0 ? {} : _nextActivity$channel;
  var nextClientActivityID = _nextActivity$channel.clientActivityID;
  var nextTimestamp = Date.parse(nextActivity.timestamp);
  var nextActivities = activities.filter(function (_ref2) {
    var _ref2$channelData = _ref2.channelData;
    _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;
    var clientActivityID = _ref2$channelData.clientActivityID,
        id = _ref2.id;
    return (// We will remove all "sending messages" activities and activities with same ID
      // "clientActivityID" is unique and used to track if the message has been sent and echoed back from the server
      !(nextClientActivityID && clientActivityID === nextClientActivityID) && !(id && id === nextActivity.id)
    );
  }); // Then, find the right (sorted) place to insert the new activity at, based on timestamp
  // Since clockskew might happen, we will ignore timestamp on messages that are sending

  var indexToInsert = nextActivities.findIndex(function (_ref3) {
    var _ref3$channelData = _ref3.channelData;
    _ref3$channelData = _ref3$channelData === void 0 ? {} : _ref3$channelData;
    var state = _ref3$channelData.state,
        timestamp = _ref3.timestamp;
    return Date.parse(timestamp) > nextTimestamp && state !== _ActivityClientState.SENDING && state !== _ActivityClientState.SEND_FAILED;
  }); // If no right place are found, append it

  nextActivities.splice(~indexToInsert ? indexToInsert : nextActivities.length, 0, nextActivity);
  return nextActivities;
}

function activities() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;

  var _ref4 = arguments.length > 1 ? arguments[1] : undefined,
      meta = _ref4.meta,
      payload = _ref4.payload,
      type = _ref4.type;

  switch (type) {
    case _deleteActivity.DELETE_ACTIVITY:
      state = (0, _simpleUpdateIn["default"])(state, [function (_ref5) {
        var id = _ref5.id;
        return id === payload.activityID;
      }]);
      break;

    case _markActivity.MARK_ACTIVITY:
      state = (0, _simpleUpdateIn["default"])(state, [function (_ref6) {
        var id = _ref6.id;
        return id === payload.activityID;
      }, 'channelData', payload.name], function () {
        return payload.value;
      });
      break;

    case _postActivity.POST_ACTIVITY_PENDING:
      state = upsertActivityWithSort(state, (0, _simpleUpdateIn["default"])(payload.activity, ['channelData', 'state'], function () {
        return _ActivityClientState.SENDING;
      }));
      break;

    case _postActivity.POST_ACTIVITY_REJECTED:
      state = (0, _simpleUpdateIn["default"])(state, [findByClientActivityID(meta.clientActivityID), 'channelData', 'state'], function () {
        return _ActivityClientState.SEND_FAILED;
      });
      break;

    case _postActivity.POST_ACTIVITY_FULFILLED:
      state = (0, _simpleUpdateIn["default"])(state, [findByClientActivityID(meta.clientActivityID)], function () {
        return (// We will replace the activity with the version from the server
          (0, _simpleUpdateIn["default"])(patchActivity(payload.activity), ['channelData', 'state'], function () {
            return _ActivityClientState.SENT;
          })
        );
      });
      break;

    case _incomingActivity.INCOMING_ACTIVITY:
      // TODO: [P4] Move "typing" into Constants.ActivityType
      if (payload.activity.type !== 'typing') {
        state = upsertActivityWithSort(state, payload.activity);
      }

      break;

    default:
      break;
  }

  return state;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,