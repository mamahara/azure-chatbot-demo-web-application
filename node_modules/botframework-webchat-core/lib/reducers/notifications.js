"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = notifications;

var _simpleUpdateIn = _interopRequireDefault(require("simple-update-in"));

var _dismissNotification = require("../actions/dismissNotification");

var _sagaError = require("../actions/sagaError");

var _setNotification = require("../actions/setNotification");

var DEFAULT_STATE = {};

function notifications() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      payload = _ref.payload,
      type = _ref.type;

  var now = Date.now();

  if (type === _dismissNotification.DISMISS_NOTIFICATION) {
    state = (0, _simpleUpdateIn["default"])(state, [payload.id]);
  } else if (type === _sagaError.SAGA_ERROR) {
    state = (0, _simpleUpdateIn["default"])(state, ['connectivitystatus', 'message'], function () {
      return 'javascripterror';
    });
  } else if (type === _setNotification.SET_NOTIFICATION) {
    var alt = payload.alt,
        data = payload.data,
        id = payload.id,
        level = payload.level,
        message = payload.message;
    var notification = state[id];

    if (!notification || alt !== notification.alt || !Object.is(data, notification.data) || level !== notification.level || message !== notification.message) {
      state = (0, _simpleUpdateIn["default"])(state, [id], function () {
        return {
          alt: alt,
          data: data,
          id: id,
          level: level,
          message: message,
          timestamp: now
        };
      });
    }
  }

  return state;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9ub3RpZmljYXRpb25zLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfU1RBVEUiLCJub3RpZmljYXRpb25zIiwic3RhdGUiLCJwYXlsb2FkIiwidHlwZSIsIm5vdyIsIkRhdGUiLCJESVNNSVNTX05PVElGSUNBVElPTiIsImlkIiwiU0FHQV9FUlJPUiIsIlNFVF9OT1RJRklDQVRJT04iLCJhbHQiLCJkYXRhIiwibGV2ZWwiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwiT2JqZWN0IiwiaXMiLCJ0aW1lc3RhbXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGFBQWEsR0FBRyxFQUF0Qjs7QUFFZSxTQUFTQyxhQUFULEdBQWlFO0FBQUEsTUFBMUNDLEtBQTBDLHVFQUFsQ0YsYUFBa0M7O0FBQUE7QUFBQSxNQUFqQkcsT0FBaUIsUUFBakJBLE9BQWlCO0FBQUEsTUFBUkMsSUFBUSxRQUFSQSxJQUFROztBQUM5RSxNQUFNQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBTCxFQUFaOztBQUVBLE1BQUlELElBQUksS0FBS0cseUNBQWIsRUFBbUM7QUFDakNMLElBQUFBLEtBQUssR0FBRyxnQ0FBU0EsS0FBVCxFQUFnQixDQUFDQyxPQUFPLENBQUNLLEVBQVQsQ0FBaEIsQ0FBUjtBQUNELEdBRkQsTUFFTyxJQUFJSixJQUFJLEtBQUtLLHFCQUFiLEVBQXlCO0FBQzlCUCxJQUFBQSxLQUFLLEdBQUcsZ0NBQVNBLEtBQVQsRUFBZ0IsQ0FBQyxvQkFBRCxFQUF1QixTQUF2QixDQUFoQixFQUFtRDtBQUFBLGFBQU0saUJBQU47QUFBQSxLQUFuRCxDQUFSO0FBQ0QsR0FGTSxNQUVBLElBQUlFLElBQUksS0FBS00saUNBQWIsRUFBK0I7QUFBQSxRQUM1QkMsR0FENEIsR0FDTVIsT0FETixDQUM1QlEsR0FENEI7QUFBQSxRQUN2QkMsSUFEdUIsR0FDTVQsT0FETixDQUN2QlMsSUFEdUI7QUFBQSxRQUNqQkosRUFEaUIsR0FDTUwsT0FETixDQUNqQkssRUFEaUI7QUFBQSxRQUNiSyxLQURhLEdBQ01WLE9BRE4sQ0FDYlUsS0FEYTtBQUFBLFFBQ05DLE9BRE0sR0FDTVgsT0FETixDQUNOVyxPQURNO0FBRXBDLFFBQU1DLFlBQVksR0FBR2IsS0FBSyxDQUFDTSxFQUFELENBQTFCOztBQUVBLFFBQ0UsQ0FBQ08sWUFBRCxJQUNBSixHQUFHLEtBQUtJLFlBQVksQ0FBQ0osR0FEckIsSUFFQSxDQUFDSyxNQUFNLENBQUNDLEVBQVAsQ0FBVUwsSUFBVixFQUFnQkcsWUFBWSxDQUFDSCxJQUE3QixDQUZELElBR0FDLEtBQUssS0FBS0UsWUFBWSxDQUFDRixLQUh2QixJQUlBQyxPQUFPLEtBQUtDLFlBQVksQ0FBQ0QsT0FMM0IsRUFNRTtBQUNBWixNQUFBQSxLQUFLLEdBQUcsZ0NBQVNBLEtBQVQsRUFBZ0IsQ0FBQ00sRUFBRCxDQUFoQixFQUFzQjtBQUFBLGVBQU87QUFDbkNHLFVBQUFBLEdBQUcsRUFBSEEsR0FEbUM7QUFFbkNDLFVBQUFBLElBQUksRUFBSkEsSUFGbUM7QUFHbkNKLFVBQUFBLEVBQUUsRUFBRkEsRUFIbUM7QUFJbkNLLFVBQUFBLEtBQUssRUFBTEEsS0FKbUM7QUFLbkNDLFVBQUFBLE9BQU8sRUFBUEEsT0FMbUM7QUFNbkNJLFVBQUFBLFNBQVMsRUFBRWI7QUFOd0IsU0FBUDtBQUFBLE9BQXRCLENBQVI7QUFRRDtBQUNGOztBQUVELFNBQU9ILEtBQVA7QUFDRCIsInNvdXJjZVJvb3QiOiJjb3JlOi8vLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1cGRhdGVJbiBmcm9tICdzaW1wbGUtdXBkYXRlLWluJztcblxuaW1wb3J0IHsgRElTTUlTU19OT1RJRklDQVRJT04gfSBmcm9tICcuLi9hY3Rpb25zL2Rpc21pc3NOb3RpZmljYXRpb24nO1xuaW1wb3J0IHsgU0FHQV9FUlJPUiB9IGZyb20gJy4uL2FjdGlvbnMvc2FnYUVycm9yJztcbmltcG9ydCB7IFNFVF9OT1RJRklDQVRJT04gfSBmcm9tICcuLi9hY3Rpb25zL3NldE5vdGlmaWNhdGlvbic7XG5cbmNvbnN0IERFRkFVTFRfU1RBVEUgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm90aWZpY2F0aW9ucyhzdGF0ZSA9IERFRkFVTFRfU1RBVEUsIHsgcGF5bG9hZCwgdHlwZSB9KSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgaWYgKHR5cGUgPT09IERJU01JU1NfTk9USUZJQ0FUSU9OKSB7XG4gICAgc3RhdGUgPSB1cGRhdGVJbihzdGF0ZSwgW3BheWxvYWQuaWRdKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBTQUdBX0VSUk9SKSB7XG4gICAgc3RhdGUgPSB1cGRhdGVJbihzdGF0ZSwgWydjb25uZWN0aXZpdHlzdGF0dXMnLCAnbWVzc2FnZSddLCAoKSA9PiAnamF2YXNjcmlwdGVycm9yJyk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gU0VUX05PVElGSUNBVElPTikge1xuICAgIGNvbnN0IHsgYWx0LCBkYXRhLCBpZCwgbGV2ZWwsIG1lc3NhZ2UgfSA9IHBheWxvYWQ7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gc3RhdGVbaWRdO1xuXG4gICAgaWYgKFxuICAgICAgIW5vdGlmaWNhdGlvbiB8fFxuICAgICAgYWx0ICE9PSBub3RpZmljYXRpb24uYWx0IHx8XG4gICAgICAhT2JqZWN0LmlzKGRhdGEsIG5vdGlmaWNhdGlvbi5kYXRhKSB8fFxuICAgICAgbGV2ZWwgIT09IG5vdGlmaWNhdGlvbi5sZXZlbCB8fFxuICAgICAgbWVzc2FnZSAhPT0gbm90aWZpY2F0aW9uLm1lc3NhZ2VcbiAgICApIHtcbiAgICAgIHN0YXRlID0gdXBkYXRlSW4oc3RhdGUsIFtpZF0sICgpID0+ICh7XG4gICAgICAgIGFsdCxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgaWQsXG4gICAgICAgIGxldmVsLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5vd1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cbiJdfQ==